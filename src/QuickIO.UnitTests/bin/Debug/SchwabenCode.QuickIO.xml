<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SchwabenCode.QuickIO</name>
    </assembly>
    <members>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.ForceFileAttributesExistance(System.IO.FileAttributes,System.IO.FileAttributes,System.Boolean)">
            <summary>
            Adds another <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add or remove</param>
            <param name="existance">true to add, false to remove</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.TryForceFileAttributesExistance(System.IO.FileAttributes,System.IO.FileAttributes,System.Boolean,System.IO.FileAttributes@)">
            <summary>
            Checks whether an attribute is already in the collection; If not, it will be added.
            Returns true on add. False if the collection already contains that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add or remove</param>
            <param name="existance">true to add, false to remove</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if the collection <paramref name="source"/> has been updated <paramref name="updatedSource"/>.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.TryAddFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes,System.IO.FileAttributes@)">
            <summary>
            Adds a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            Returns true on add. False if the collection already contains that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if attributes updated</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.AddFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Adds a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.TryRemoveFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes,System.IO.FileAttributes@)">
            <summary>
            Removes a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            Returns true on remove. False if the collection does not contain that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to remove</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if attributes updated</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.RemoveFileAttribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Removes a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to remove</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.ContainsFileAttribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Checks whether the given attribute in the collection is included.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to check</param>
            <returns>True if exists, false if not</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateSystemPaths(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions,SchwabenCode.QuickIO.QuickIOPathType,System.Nullable{SchwabenCode.QuickIO.QuickIOFileSystemEntryType})">
            <summary>
            Search Exection
            </summary>
            <param name="uncDirectoryPath">Start directory path</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="filterType"><see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/></param>
            <returns>Collection of path</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined all sub system entries of a directory
            </summary>
            <param name="uncDirectoryPath">Path of the directory</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns>Collection of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateWin32FileSystemEntries(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined all sub system entries of a directory
            </summary>
            <param name="path">Path of the directory</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns>Collection of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateDirectoryMetadata(System.String,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined metadata of directory
            </summary>
            <param name="path">Path of the directory</param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/> started with the given directory</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateDirectoryMetadata(System.String,SchwabenCode.QuickIO.Win32.Win32FileSystemEntry,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined metadata of directory
            </summary>
            <param name="path">Path of the directory</param>
            <param name="fileSystemEntry"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/> started with the given directory</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateFiles(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined all files of a directory
            </summary>
            <param name="uncDirectoryPath">Path of the directory</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns>Collection of files</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateDirectories(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined all subfolders of a directory
            </summary>
            <param name="uncDirectoryPath">Path of the directory</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/> collection of subfolders</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateDirectoryStatistics(System.String)">
            <summary>
            Determines the statistics of the given directory. This includes the number of files, folders and the total size in bytes.        
            </summary>
            <param name="uncDirectoryPath">Path to the directory to generate the statistics.</param>
            <returns>Provides the statistics of the directory</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.ForceFileAttributesExistance(System.IO.FileAttributes,System.IO.FileAttributes,System.Boolean)">
            <summary>
            Adds another <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add or remove</param>
            <param name="existance">true to add, false to remove</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.TryForceFileAttributesExistance(System.IO.FileAttributes,System.IO.FileAttributes,System.Boolean,System.IO.FileAttributes@)">
            <summary>
            Checks whether an attribute is already in the collection; If not, it will be added.
            Returns true on add. False if the collection already contains that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add or remove</param>
            <param name="existance">true to add, false to remove</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if the collection <paramref name="source"/> has been updated <paramref name="updatedSource"/>.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.TryAddFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes,System.IO.FileAttributes@)">
            <summary>
            Adds a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            Returns true on add. False if the collection already contains that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if attributes updated</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.AddFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Adds a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.TryRemoveFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes,System.IO.FileAttributes@)">
            <summary>
            Removes a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            Returns true on remove. False if the collection does not contain that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to remove</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if attributes updated</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.RemoveFileAttribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Removes a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to remove</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.ContainsFileAttribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Checks whether the given attribute in the collection is included.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to check</param>
            <returns>True if exists, false if not</returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.Internal.InternalQuickIO">
            <summary>
            Provides internal methods. PathMatchAll IO operations are called from here.
            </summary>
            <summary>
            Provides internal methods. PathMatchAll IO operations are called from here.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.CreateDirectory(System.String,System.Boolean)">
            <summary>
            Creates a new directory. If <paramref name="recursive"/> is false, the parent directory must exists.
            </summary>
            <param name="uncDirectoryPath">Directory path</param>
            <param name="recursive">If <paramref name="recursive"/> is false, the parent directory must exist.</param>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the given directory. On request  all contents, too.
            </summary>
            <param name="uncDirectoryPath">Path of directory to delete</param>
            <param name="recursive">If <paramref name="recursive"/> is true then all subfolders are also deleted.</param>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
            <exception cref="T:SchwabenCode.QuickIO.DirectoryNotEmptyException">The directory is not empty.</exception>
            <remarks>Function loads every file and attribute. Alls read-only flags will be removed before removing.</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.GetDirectoryStatistics(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determines the statistics of the given directory. This includes the number of files, folders and the total size in bytes.
            </summary>
            <param name="pathInfo">PathInfo of the directory to generate the statistics.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>Provides the statistics of the directory</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.GetDiskInformation(System.String)">
            <summary>
            Determines metadata of network shares
            </summary>
            <param name="rootPath">Share to check</param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODiskInformation"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.MoveFile(System.String,System.String)">
            <summary>
            Moves a file
            </summary>
            <param name="sourceFileName">Full source path</param>
            <param name="destFileName">Full target path</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.CreateSafeFileHandle(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> and fills <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from the passes path.
            </summary>
            <param name="pathInfo">Path to the file system entry</param>
            <returns><see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.CreateSafeFileHandle(System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> and fills <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from the passes path.
            </summary>
            <param name="path">Path to the file system entry</param>
            <returns><see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.OpenReadWriteFileSystemEntryHandle(System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> and fills <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from the passes path.
            </summary>
            <param name="path">Path to the file system entry</param>
            <returns><see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.CreateFile(System.String,System.IO.FileAccess,System.IO.FileShare,System.IO.FileMode,System.IO.FileAttributes)">
            <summary>
            Creates a new file.
            </summary>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.DeleteFile(System.String)">
            <summary>
            Removes a file.
            </summary>
            <param name="path">Path to the file to remove</param>
            <exception cref="T:System.IO.FileNotFoundException">This error is fired if the specified file to remove does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.DeleteFiles(System.String,System.Boolean)">
            <summary>
            Deletes all files in the given directory.
            </summary>
            <param name="directoryPath">Path of directory to clear</param>
            <param name="recursive">If true all files in all all subfolders included</param>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
            <exception cref="T:System.IO.FileNotFoundException">This error will be fired when attempting a file to delete, which does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.CopyFile(System.String,System.String,System.Int32@,System.Boolean)">
            <summary>
            Copies a file and overwrite existing files if desired.
            </summary>
            <param name="sourceFilePath">Full source path</param>
            <param name="targetFilePath">Full target path</param>
            <param name="win32Error">Last error occured</param>
            <param name="overwrite">true to overwrite existing files</param>
            <returns>True if copy succeeded, false if not. Check last Win32 Error to get further information.</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.AddAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Adds a file attribute
            </summary>
            <param name="path">Affected target</param>
            <param name="attribute">Attribute to add</param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.RemoveAllFileAttributes(System.String)">
            <summary>
            Sets all attributes to <see cref="F:System.IO.FileAttributes.Normal"/>
            </summary>
            <param name="path">Path to file or directory</param>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error will be fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.RemoveAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Remove a file attribute
            </summary>
            <param name="path">Affected target</param>
            <param name="attribute">Attribute to remove</param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the entry.
            </summary>
            <param name="uncPath">The path to the entry. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the entry.</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SafeGetAttributes(System.String,System.Int32@)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the entry.
            </summary>
            <param name="path">The path to the entry. </param>
            <param name="win32Error">Win32 Error Code</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the entry.</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the entry on the specified path.
            </summary>
            <param name="path">The path to the entry.</param>
            <param name="attributes">A bitwise combination of the enumeration values.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Unmatched Exception</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SetAllFileTimes(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="pathInfo">Affected file or directory</param>     
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Sets the time at which the file or directory was created (UTC)
            </summary>
            <param name="pathInfo">Affected file or directory</param>     
            <param name="utcTime">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Sets the time at which the file or directory was last written to (UTC)
            </summary>
            <param name="pathInfo">Affected file or directory</param>     
            <param name="utcTime">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Sets the time at which the file or directory was last accessed to (UTC)
            </summary>
            <param name="pathInfo">Affected file or directory</param>     
            <param name="utcTime">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.TryGetFindDataFromPath(SchwabenCode.QuickIO.Internal.InternalPath,SchwabenCode.QuickIO.Win32.Win32FindData@)">
            <summary>
            Gets the <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from the passed path.
            </summary>
            <param name="internalPath">Path</param>
            <param name="win32FindData"><seealso cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/>. Will be null if path does not exist.</param>
            <returns>true if path is valid and <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> is set</returns>
            <remarks>
            <see>
                <cref>QuickIOCommon.NativeExceptionMapping</cref>
            </see> if invalid handle found.
            </remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.FindFirstSafeFileHandle(System.String,SchwabenCode.QuickIO.Win32.Win32FindData,System.Int32@)">
            <summary>
            Returns the <see cref="T:SchwabenCode.QuickIO.Win32.Win32FileHandle"/> and fills <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from the passes path.
            </summary>
            <param name="path">Path to the file system entry</param>
            <param name="win32FindData"></param>
            <param name="win32Error">Last error code. 0 if no error occurs</param>
            <returns><see cref="T:SchwabenCode.QuickIO.Win32.Win32FileHandle"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.Exists(System.String)">
            <summary>
            Reurns true if passed path exists
            </summary>
            <param name="path">Path to check</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SafeGetFindDataFromPath(SchwabenCode.QuickIO.Internal.InternalPath)">
            
            <summary>
            Returns the <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from specified <paramref name="path"/>
            </summary>
            <param name="internalPath">Path to the file system entry</param>
            <returns><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.EnumerateShares``1(SchwabenCode.QuickIO.QuickIOShareApiReadLevel,System.String)">
            <summary>
            Enumerate shares of specific machine. If no machine is specified, local machine is used
            </summary>
            <returns>Collection of <see cref="T:SchwabenCode.QuickIO.QuickIOShareInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon">
            <summary>
            Provides several methods for internal purposes.
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon.Constants">
            <summary>
            Common Constants
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon.Constants.InvalidFileAttributes">
            <summary>
            Represents return value of invalid request of get the file attributes of a system entry.
            Is equal to UInt32.MaxValue
            See http://msdn.microsoft.com/en-us/library/windows/desktop/aa364944(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon.DetermineFileSystemEntry(SchwabenCode.QuickIO.Internal.InternalPath)">
            <summary>
            Determines the type based on the attributes of the path
            </summary>
            <param name="internalPath"><see cref="T:SchwabenCode.QuickIO.Internal.InternalPath"/></param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon.DetermineFileSystemEntry(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Determines the type based on the attributes of the handle
            </summary>
            <param name="findData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon.NativeExceptionMapping(System.String,System.Int32)">
            <summary>
            Exception Mapping
            </summary>
            <param name="path"></param>
            <param name="errorCode">errorCode</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Internal.InternalRawDataHelpers">
            <summary>
            Various internal methods for the treatment of raw data
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalRawDataHelpers.ConvertDateTime(System.UInt32,System.UInt32)">
            <summary>
            Converts the PInvoke information into <see cref="T:System.DateTime"/>
            </summary>
            <param name="high"><see cref="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwHighDateTime"/> of <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
            <param name="low"><see cref="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwLowDateTime"/> of <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalRawDataHelpers.CombineHighLowInts(System.UInt32,System.UInt32)">
            <summary>
            Merges the PInvoke information
            </summary>
            <param name="high"><see cref="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwHighDateTime"/> of <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
            <param name="low"><see cref="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwLowDateTime"/> of <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalRawDataHelpers.IsSystemDirectoryEntry(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Checks whether a directory supplied by PINvoke is relevant
            </summary>
            <param name="win32FindData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
            <returns>true if is relevant; otherwise false</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalRawDataHelpers.DateTimeToFiletime(System.DateTime)">
            <summary>
            Converts DateTime to Win32 FileTime format
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods">
            <summary>
            Native Methods - take a look on www.pinvoke.net
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.SetAllFileTimes(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Sets the last all times for files or directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.SetCreationFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int64@,System.IntPtr,System.IntPtr)">
            <summary>
            Sets the last creation time for files or directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.SetLastAccessFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr,System.Int64@,System.IntPtr)">
            <summary>
            Sets the last acess time for files or directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.SetLastWriteFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr,System.IntPtr,System.Int64@)">
            <summary>
            Sets the last write time for files or directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.CreateDirectory(System.String,System.IntPtr)">
            <summary>
            Create directory
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.CreateFile(System.String,System.IO.FileAccess,System.IO.FileShare,System.IntPtr,System.IO.FileMode,System.IO.FileAttributes,System.IntPtr)">
            <summary>
            Creates a file / directory or opens an handle for an existing file.
            <b>If you want to get an handle for an existing folder use <see cref="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.OpenReadWriteFileSystemEntryHandle(System.String,System.UInt32,System.IO.FileShare,System.IntPtr,System.IO.FileMode,System.UInt32,System.IntPtr)"/> with ( 0x02000000 ) as attribute and FileMode ( 0x40000000 | 0x80000000 )</b>
            Otherwise it you'll get an invalid handle
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.OpenReadWriteFileSystemEntryHandle(System.String,System.UInt32,System.IO.FileShare,System.IntPtr,System.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Use this to open an handle for an existing file or directory to change for example the timestamps
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.CreateFileForAppend(System.String,System.UInt32,System.IO.FileShare,System.IntPtr,System.IO.FileMode,System.IO.FileAttributes,System.IntPtr)">
            <summary>
            Open handle for appending
            <br/>
            FileMode has to be 0x0004 for internal appending mode
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.FindFirstFile(System.String,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Finds first file of given path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.FindNextFile(SchwabenCode.QuickIO.Win32.Win32FileHandle,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Finds next file of current handle
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.MoveFile(System.String,System.String)">
            <summary>
            Moves a directory
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copy file
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.DeleteFile(System.String)">
            <summary>
            Removes a file.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.RemoveDirectory(System.String)">
            <summary>
            Removes a file.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.SetFileAttributes(System.String,System.UInt32)">
            <summary>
            Set File Attributes
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.GetFileAttributes(System.String)">
            <summary>
            Gets Attributes of given path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.FindClose(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Close Hnalde
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.LocalFree(System.IntPtr)">
            <summary>
            Free unmanaged memory
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.GetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)">
            <summary>
            QuickIOShareInfo information
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.NetShareEnum(System.String,System.Int32,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Enumerate shares (NT)
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/windows/desktop/bb525387(v=vs.85).aspx</remarks>
        </member>
        <member name="T:SchwabenCode.QuickIO.PInvoke.Win32SecurityObjectType">
            <summary>
            Win32 Security Object Type
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.SetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.SetAttributes(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.SetAttributes(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.GetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.GetAttributes(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.GetAttributes(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.RemoveAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.RemoveAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.RemoveAttribute(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.RemoveAttribute(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.AddAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.AddAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.AddAttribute(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.AddAttribute(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIODirectory">
            <summary>
            Provides static methods to access folders. For example creating, deleting and retrieving content and security information such as the owner.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Compress(System.String,System.String,System.Boolean,System.IO.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Compresses a directory by using <see>
                    <cref>ZipFile.CreateFromDirectory</cref>
                </see>
            </summary>
            <param name="directoryFullPath">Directory fullname to zip</param>
            <param name="zipFullPath">Zipfile fullname to save</param>
            <param name="overWriteExistingZip">true to overwrite existing zipfile</param>
            <param name="compressionLevel"><see cref="T:System.IO.Compression.CompressionLevel"/></param>
            <param name="includeBaseDirectory">True to include basedirectory</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">if <paramref name="directoryFullPath"/> does not exist.</exception>
            <exception cref="T:SchwabenCode.QuickIO.FileAlreadyExistsException">if <paramref name="zipFullPath"/> does exist and <paramref name="overWriteExistingZip"/> is <i>false</i>.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Compress(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.Boolean,System.IO.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Compresses a directory by using <see>
                    <cref>ZipFile.CreateFromDirectory</cref>
                </see>
            </summary>
            <param name="directory">Directory to zip</param>
            <param name="zipFullPath">Zipfile fullname to save</param>
            <param name="overWriteExistingZip">true to overwrite existing zipfile</param>
            <param name="compressionLevel"><see cref="T:System.IO.Compression.CompressionLevel"/></param>
            <param name="includeBaseDirectory">True to include basedirectory</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Copy(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Copies a directory and all contents
            </summary>
            <param name="source">Source directory</param>
            <param name="target">Target directory</param>
            <param name="overwrite">true to overwrite existing files</param>
            <param name="cancellationToken">Cancallation Token</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Copy(SchwabenCode.QuickIO.QuickIODirectoryInfo,SchwabenCode.QuickIO.QuickIOPathInfo,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Copies a directory and all contents
            </summary>
            <param name="source">Source directory</param>
            <param name="target">Target directory</param>
            <param name="overwrite">true to overwrite existing files</param>
            <param name="cancellationToken">Cancallation Token</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Create(System.String,System.Boolean)">
            <summary>
            Creates a new directory. If <paramref name="recursive"/> is false, the parent directory must exist.
            </summary>
            <param name="path">The path to the directory.</param>
            <param name="recursive">If <paramref name="recursive"/> is false, the parent directory must exist.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/54a0at6s(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
            <example>
            Creates directory structure
            <code>
                public static void Create_With_StringPath_Example()
                {
                    // Creates directory C:\temp\QuickIOTest\sub\folder\tree and all not existing parent folders
                    QuickIODirectory.Create( @"C:\temp\QuickIOTest\sub\folder\tree", recursive: true );
                }
            </code>
            </example>
            <example>
            Shows how to handle sample exception if parent directory does not exist.
            <code>
                public static void Create_With_StringPath_Example()
                {
                    try
                    {
                         QuickIODirectory.Create( @"C:\temp\QuickIOTest\sub\folder\tree", recursive: false );
                    }
                    catch ( PathNotFoundException pathNotFoundException )
                    {
                        // Parent directory does not exist.
                    }
                }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Create(SchwabenCode.QuickIO.QuickIOPathInfo,System.Boolean)">
            <summary>
            Creates a new directory. If <paramref name="recursive"/> is false, the parent directory must exist.
            </summary>
            <param name="path">The directory.</param>
            <param name="recursive">If <paramref name="recursive"/> is false, the parent directory must exist.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/54a0at6s(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
            <example>
            Creates directory structure
            <code>
                public static void Create_With_PathInfo_Example( );
                {
                    QuickIOPathInfo pathInfo = new QuickIOPathInfo( @"C:\temp\QuickIOTest\sub\folder\tree" );
            
                    // Creates directory C:\temp\QuickIOTest\sub\folder\tree and all not existing parent folders
                    QuickIODirectory.Create( pathInfo, recursive: true );
                }
            </code>
            </example>
            <example>
            Shows how to handle sample exception if parent directory does not exist.
            <code>
                public static void Create_With_StringPath_Example()
                {
                    QuickIOPathInfo pathInfo = new QuickIOPathInfo( @"C:\temp\QuickIOTest\sub\folder\tree" );
            
                    try
                    {
                         QuickIODirectory.Create( pathInfo, recursive: false );
                    }
                    catch ( PathNotFoundException pathNotFoundException )
                    {
                        // Parent directory does not exist.
                    }
                }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory. 
            </summary>
            <param name="path">The name of the directory to remove. </param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false. </param>
            <remarks>http://msdn.microsoft.com/en-us/library/fxeahc5f(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
            <exception cref="T:SchwabenCode.QuickIO.DirectoryNotEmptyException">The directory is not empty.</exception>
            <example>
            Creates directory structure
            <code>
                public static void Create_With_StringPath_Example()
                {
                    // Deletes directory C:\temp\QuickIOTest\sub\folder\tree and subfolders and files
                    QuickIODirectory.Delete( @"C:\temp\QuickIOTest\sub\folder\tree", recursive: true );
                }
            </code>
            </example>
            <example>
            Shows how to handle sample exception if directory is not empty
            <code>
                public static void Create_With_StringPath_Example()
                {
                    try
                    {
                         QuickIODirectory.Delete( @"C:\temp\QuickIOTest\sub\folder\tree", recursive: false );
                    }
                    catch ( DirectoryNotEmptyException directoryNotEmptyException )
                    {
                        // Directoy is not empty
                    }
                }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Delete(SchwabenCode.QuickIO.QuickIOPathInfo,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory. 
            </summary>
            <param name="info">The name of the directory to remove. </param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false. </param>
            <remarks>http://msdn.microsoft.com/en-us/library/fxeahc5f(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
            <exception cref="T:SchwabenCode.QuickIO.DirectoryNotEmptyException">The directory is not empty.</exception>
            <example>
            Creates directory structure
            <code>
                public static void Create_With_StringPath_Example()
                {
                    QuickIOPathInfo pathInfo = new QuickIOPathInfo( @"C:\temp\QuickIOTest\sub\folder\tree" );
            
                    // Deletes directory C:\temp\QuickIOTest\sub\folder\tree and subfolders and files
                    QuickIODirectory.Delete( pathInfo, recursive: true );
                }
            </code>
            </example>
            <example>
            Shows how to handle sample exception if directory is not empty
            <code>
                public static void Create_With_StringPath_Example()
                {
                    QuickIOPathInfo pathInfo = new QuickIOPathInfo( @"C:\temp\QuickIOTest\sub\folder\tree" );
            
                    try
                    {
                         QuickIODirectory.Delete( pathInfo, recursive: false );
                    }
                    catch ( DirectoryNotEmptyException directoryNotEmptyException )
                    {
                        // Directoy is not empty
                    }
                }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectoryPaths(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directory names in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383304(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectoryPaths(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directory names in a specified path.
            </summary>
            <param name="info">The directory to search.</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383304(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directories in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383304(v=vs.110).aspx</remarks>
            <example>
            <code>
            // Get subfolders
            IEnumerable&gt;QuickIODirectoryInfo&lt; allSubFolders = QuickIODirectory.EnumerateDirectories( @"C:\temp\QuickIO", SearchOption.AllDirectories );
            
            foreach ( QuickIODirectoryInfo directoryInfo in allSubFolders )
            {
                Console.WriteLine( "Directory found: {0} Readonly: {1}", directoryInfo.FullName, directoryInfo.IsReadOnly );
            }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectories(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directories in a specified path.
            </summary>
            <param name="info">The directory to search.</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383304(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFilePaths(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names in a specified path.
            </summary>
            <param name="path">The directory to search. </param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383458(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFilePaths(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names in a specified path.
            </summary>
            <param name="info">The directory to search. </param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383458(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
             <summary>
             Returns an enumerable collection of files in a specified path.
             </summary>
             <param name="path">The directory to search. </param>
             <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
             <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
             <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
             <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
             <remarks>http://msdn.microsoft.com/en-us/library/dd383458(v=vs.110).aspx</remarks>
             <example>
             <code>
             // Get subfiles
             IEnumerable&lt;QuickIOFileInfo&gt; allSubFiles = QuickIODirectory.EnumerateFiles( @"C:\temp\QuickIO", SearchOption.AllDirectories );
             
             foreach ( QuickIOFileInfo fileInfo in allSubFiles )
             {
                 Console.WriteLine( "File found: {0} Readonly: {1}", fileInfo.FullName, fileInfo.IsReadOnly );
             }
            </code>
             </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFiles(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of files in a specified path.
            </summary>
            <param name="directoryInfo">The directory to search. </param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383458(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search. </param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is TopDirectoryOnly.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by path and that match the specified search pattern and option.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383459(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFileSystemEntries(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="directoryInfo">The directory to search. </param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is TopDirectoryOnly.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by path and that match the specified search pattern and option.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383459(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Exists(System.String)">
            <summary>
            Checks whether the given directory exists.
            </summary>
            <param name="path">The path to test. </param>
            <returns>true if exists; otherwise, false.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.exists(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Searched for file but found folder.</exception>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Exists(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Checks whether the given directory exists.
            </summary>
            <param name="pathInfo">The path to test. </param>
            <returns>true if exists; otherwise, false.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.exists(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Searched for file but found folder.</exception>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Exists(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Checks whether the given directory exists.
            </summary>
            <param name="directoryInfo">The path to test. </param>
            <returns>true if exists; otherwise, false.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.exists(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Searched for file but found folder.</exception>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectoryMetadata(System.String,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Receives <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/> of current directory
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectoryMetadata(SchwabenCode.QuickIO.QuickIODirectoryInfo,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Receives <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/> of current directory
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectoryMetadata(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Receives <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/> of current directory
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a directory
            </summary>
            <param name="from">Fullname to move</param>
            <param name="to">Full targetname</param>
            <param name="overwrite">true to overwrite target</param>
            <exception cref="T:SchwabenCode.QuickIO.DirectoryAlreadyExistsException">Target exists</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetStatistics(System.String)">
            <summary>
            Gets the directory statistics: total files, folders and bytes
            </summary>
            <param name="path"></param>
            <returns>A <see cref="T:SchwabenCode.QuickIO.QuickIOFolderStatisticResult"/> object that holds the folder statistics such as number of folders, files and total bytes</returns>
            <example>
            This example shows how to call <see>
                    <cref>GetStatistics</cref>
                </see>
                and write the result to the console.
            <code>
            public static void GetStatistics_With_StringPath_Example()
            {
               const string targetDirectoryPath = @"C:\temp\QuickIOTest";
            
               // Get statistics
               QuickIOFolderStatisticResult statsResult = QuickIODirectory.GetStatistics( targetDirectoryPath );
            
               // Output
               Console.WriteLine( "[Stats] Folders: '{0}' Files: '{1}' Total TotalBytes '{2}'", statsResult.FolderCount, statsResult.FileCount, statsResult.TotalBytes );
            }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetStatistics(SchwabenCode.QuickIO.QuickIOPathInfo)">
             <summary>
             Gets the directory statistics: total files, folders and bytes
             </summary>
             <param name="pathInfo"></param>
             <returns>A <see cref="T:SchwabenCode.QuickIO.QuickIOFolderStatisticResult"/> object that holds the folder statistics such as number of folders, files and total bytes</returns>
             <example>
             This example shows how to call <see>
                     <cref>GetStatistics</cref>
                 </see>
                 with <see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/> and write the result to the console.
             <code>
            public static void GetStatistics_With_PathInfo_Example()
            {
                QuickIOPathInfo targetDirectoryPathInfo = new QuickIOPathInfo( @"C:\temp\QuickIOTest" );
            
                // Get statistics
                QuickIOFolderStatisticResult stats = QuickIODirectory.GetStatistics( targetDirectoryPathInfo );
            
                // Output
                Console.WriteLine( "[Stats] Folders: '{0}' Files: '{1}' Total TotalBytes '{2}'", stats.FolderCount, stats.FileCount, stats.TotalBytes );
            }
             </code>
             </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetStatistics(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
             <summary>
             Gets the directory statistics: total files, folders and bytes
             </summary>
             <param name="directoryInfo"></param>
             <returns>A <see cref="T:SchwabenCode.QuickIO.QuickIOFolderStatisticResult"/> object that holds the folder statistics such as number of folders, files and total bytes</returns>
             <example>
             This example shows how to call <see>
                     <cref>GetStatistics</cref>
                 </see>
                 with <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/> and write the result to the console.
             <code>
            public static void GetStatistics_With_DirectoryInfo_Example()
            {
                QuickIODirectoryInfo targetDirectoryPathInfo = new QuickIODirectoryInfo( @"C:\temp\QuickIOTest" );
            
                // Get statistics
                QuickIOFolderStatisticResult stats = QuickIODirectory.GetStatistics( targetDirectoryPathInfo );
            
                // Output
                Console.WriteLine( "[Stats] Folders: '{0}' Files: '{1}' Total TotalBytes '{2}'", stats.FolderCount, stats.FileCount, stats.TotalBytes );
            }
             </code>
             </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAttributes(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetAttributes(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.RemoveAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.RemoveAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.RemoveAttribute(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.AddAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.AddAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.AddAttribute(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTime(System.String)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTime(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTime(System.String)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTime(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTime(System.String)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTime(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception> 
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception> 
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimes(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimes(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimes(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimesUtc(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimesUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimesUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTime(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTime(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTime(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="path">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetDirectoryRoot(System.String)">
            <summary>
            Returns the root information
            </summary>
            <param name="path">The path of a file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="path"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetDirectoryRoot(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the root information
            </summary>
            <param name="info">A file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="info"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetDirectoryRoot(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the root information
            </summary>
            <param name="info">A file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="info"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIODirectoryInfo">
            <summary>
            Provides properties and instance methods for directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.#ctor(System.String)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates the folder information on the basis of the path and the handles
            </summary>
            <param name="pathInfo"><see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/></param>
            <param name="win32FindData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.#ctor(System.String,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates the folder information on the basis of the path and the handles
            </summary>
            <param name="fullname">Full path to the directory</param>
            <param name="win32FindData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODirectoryInfo.IsRoot">
            <summary>
            Returns true if current path is root
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODirectoryInfo.Exists">
            <summary>
            Returns true if directory exists. Result starts a file system call and is not cached.
            </summary>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Path exists but it's a file..</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateDirectoryPaths(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directory names.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">Specifiy depth with <see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Type of return</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directories in a specified path.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">Specifiy depth with <see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options</param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateFilePaths(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names in a specified path.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">Specifiy depth with <see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="enumerateOptions">Options</param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of files in a specified path.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">Specifiy depth with <see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateFileSystemEntries(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">Specifiy depth with <see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <param name="pathFormatReturn">Type of return</param>
            <returns>An enumerable collection of file-system entries in the directory specified by path and that match the specified search pattern and option.</returns>
            <remarks><b>Requires .NET 4.0 or higher</b><br /><u>Warning:</u> parallel file system browsing on the same hard disk (HDD/SSD) will decrease performance. Use this only on stripped RAIDs or with network shares.</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateFileSystemEntryInfos(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is TopDirectoryOnly.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of file-system entries in the directory specified by path and that match the specified search pattern and option.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.AsDirectoryInfo">
            <summary>
            Returns a <see cref="T:System.IO.DirectoryInfo"/> of the current path of this folder
            </summary>
            <returns><see cref="T:System.IO.DirectoryInfo"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.op_Explicit(System.IO.DirectoryInfo)~SchwabenCode.QuickIO.QuickIODirectoryInfo">
            <summary>
            Explizit Cast
            </summary>
            <param name="directoryInfo"><see cref="T:System.IO.DirectoryInfo"/></param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata">
            <summary>
            Directory metadata information
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryMetadata.#ctor(System.String,SchwabenCode.QuickIO.Win32.Win32FindData,System.Collections.Generic.IList{SchwabenCode.QuickIO.QuickIODirectoryMetadata},System.Collections.Generic.IList{SchwabenCode.QuickIO.QuickIOFileMetadata})">
            <summary>
            Creates instance of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/>
            </summary>
            <param name="win32FindData">Win32FindData of current directory</param>
            <param name="subDirs">Directories in current directory</param>
            <param name="subFiles">Files in current directory</param>
            <param name="uncFullname">UNC Path of current directory</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODirectoryMetadata.Directories">
            <summary>
            Directories in current directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODirectoryMetadata.Files">
            <summary>
            Files in current directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODirectoryMetadata.Bytes">
            <summary>
            Size of the file. 
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryMetadata.ToDirectoryInfo">
            <summary>
            Returns a new instance of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/> of the current directory
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIODiskInformation">
            <summary>
            Disk metadata information
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODiskInformation.FreeBytes">
            <summary>
            Total available number of bytes for the user who executed the API call.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODiskInformation.TotalBytes">
            <summary>
            Total bytes of share
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODiskInformation.TotalFreeBytes">
            <summary>
            Total free bytes for all users
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileSystemEntry">
            <summary>
            Represents a file system entry type
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntry.#ctor(System.String,SchwabenCode.QuickIO.QuickIOFileSystemEntryType,System.IO.FileAttributes,System.UInt64)">
            <summary>
            Creates an instance of <see cref = "T:SchwabenCode.QuickIO.QuickIOFileSystemEntry"/>
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Path">
            <summary>
            Entry's fullname
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntry.GetPathUnc">
            <summary>
            Returns <see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Path"/> in unc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntry.GetPathRegular">
            <summary>
            Returns <see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Path"/> in regular.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Type">
            <summary>
            Entry type
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Attributes">
            <summary>
            Entry type
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Bytes">
            <summary>
            Entry type
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.IWin32ApiShareInfo.GetShareName">
            <summary>
            Returns the share name
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.IWin32ApiShareInfo.GetShareType">
            <summary>
            Returns the share name
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.IWin32ApiShareInfo.GetRemark">
            <summary>
            Returns the remark
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32ApiShareInfoAdmin">
            <summary>
            Gets the complete share information. Requires admin priviles.
            </summary>
            <remarks>See http://msdn.microsoft.com/en-us/library/windows/desktop/bb525408(v=vs.85).aspx</remarks>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32ApiShareInfoNormal">
            <summary>
            Use this Info bag if call with admin privilegs fails (fallback)
            </summary>
            <remarks>See http://msdn.microsoft.com/en-us/library/windows/desktop/bb525407(v=vs.85).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32ApiShareInfoNormal.GetShareName">
            <summary>
            Returns the share name
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32ErrorCodes">
            <summary>
            Win32 Error Code Collection
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32ErrorCodes.FormatMessage(System.Int32)">
            <summary>
            Formats <paramref name="errorCode"/> to a message
            </summary>
            <param name="errorCode">ErrorCode</param>
            <returns>Message or "Unknown" if <paramref name="errorCode"/> is not handles</returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32FileHandle">
            <summary>
            Provides a class for Win32 safe handle implementations
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandle.#ctor">
            <summary>
            Initializes a new instance of the Win32ApiFileHandle class, specifying whether the handle is to be reliably released.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the Win32ApiFileHandle class, specifying whether the handle is to be reliably released.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandle.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Win32ApiFileHandle class specifying whether to perform a normal dispose operation. 
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandleCollection.#ctor(System.String)">
            <summary>
            Creates an instance of with given directory path
            </summary>
            <param name="path">Directory</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator.Current">
            <summary>
            Returns current element
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns current element
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref = "T:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator"/>
            </summary>
            <param name = "directoryPath">UNC Path to directory</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator.MoveNext">
            <summary>
            Moves to next element
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator.Reset">
            <summary>
            You cannot reset this enumerator
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.Name">
            <summary>
            Returns name of entry (not fullname!)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.Attributes">
            <summary>
            Returns all <see cref="T:System.IO.FileAttributes"/> responding to this <see cref="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.FindData"/>
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.IsDirectory">
            <summary>
            Returns true if entry is a directory
            </summary>
            <remarks>Checks <see cref="F:System.IO.FileAttributes.Directory"/></remarks>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.IsFile">
            <summary>
            Returns true if entry is a file
            </summary>
            <remarks>Checks <see cref="F:System.IO.FileAttributes.Directory"/></remarks>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.Bytes">
            <summary>
            Returns total size of entry in Bytes
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.FileSystemEntryType">
            <summary>
            Returns type of entry
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32FileSystemEntrySecurityInformation">
            <summary>
            Win32 Security Information
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32FileTime">
            <summary>
            See http://www.pinvoke.net/default.aspx/Structures/FILETIME.html?diff=y
            Represents Win32 LongFileTime
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32FindData">
            <summary>
            Structure of File Data given by Win32 API
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FindData.IsDirectory">
            <summary>
            Returns true if entry is a directory
            </summary>
            <remarks>Checks <see cref="F:System.IO.FileAttributes.Directory"/></remarks>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FindData.IsFile">
            <summary>
            Returns true if entry is a file
            </summary>
            <remarks>Checks <see cref="F:System.IO.FileAttributes.Directory"/></remarks>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FindData.Bytes">
            <summary>
            Returns total size of entry in Bytes
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.dwFileAttributes">
            <summary>
            File Attributes
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftCreationTime_dwLowDateTime">
            <summary>
            Last Creation Time (Low DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftCreationTime_dwHighDateTime">
            <summary>
            Last Creation Time (High DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastAccessTime_dwLowDateTime">
            <summary>
            Last Access Time (Low DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastAccessTime_dwHighDateTime">
            <summary>
            Last Access Time (High DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwLowDateTime">
            <summary>
            Last Write Time (Low DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwHighDateTime">
            <summary>
            Last Write Time (High DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.nFileSizeHigh">
            <summary>
            File Size High
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.nFileSizeLow">
            <summary>
            File Size Low
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.dwReserved0">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.dwReserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.cFileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.cAlternateFileName">
            <summary>
            Alternate File Name
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FindData.FileSystemEntryType">
            <summary>
            Returns type of entry
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindData.CalculateBytes">
            <summary>
            Returns the total size in bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindData.GetLastWriteTimeUtc">
            <summary>
            Gets last write time based on UTC
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindData.GetLastAccessTimeUtc">
            <summary>
            Gets last access time based on UTC
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindData.GetCreationTimeUtc">
            <summary>
            Gets the creation time based on UTC
            </summary>
            <returns></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions">
            <summary>
            Options for enumerations
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOEnumerateOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOEnumerateOptions.SuppressAllExceptions">
            <summary>
            Suppresses all exceptions
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFile">
            <summary>
            Provides static methods to access files. For example creating, deleting and retrieving content and security information such as the owner.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines by using the specified encoding.
            If the file does not exist, it creates the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't exist.</param>
            <param name="contents">The lines to append.</param>
            <param name="encoding">The character encoding.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383356(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AppendAllLines(SchwabenCode.QuickIO.QuickIOPathInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines by using the specified encoding.
            If the file does not exist, it creates the file.
            </summary>
            <param name="pathInfo">The file to append the lines to. The file is created if it doesn't exist.</param>
            <param name="contents">The lines to append.</param>
            <param name="encoding">The character encoding.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383356(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string.
            If the file does not exist, it creates the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143356(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AppendAllText(SchwabenCode.QuickIO.QuickIOPathInfo,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string.
            If the file does not exist, it creates the file.
            </summary>
            <param name="pathInfo">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143356(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Create(System.String,System.IO.FileAccess,System.IO.FileShare,System.IO.FileMode,System.IO.FileAttributes)">
            <summary>
            Creates a new file.
            </summary>
            <param name="fullName">The path to the file. </param>
            <param name="fileAccess"><see cref="T:System.IO.FileAccess"/> - default <see cref="F:System.IO.FileAccess.Write"/></param>
            <param name="fileShare"><see cref="T:System.IO.FileShare"/> - default <see cref="F:System.IO.FileShare.None"/></param>
            <param name="fileMode"><see cref="T:System.IO.FileMode"/> - default <see cref="F:System.IO.FileMode.Create"/></param>
            <param name="fileAttributes"><see cref="T:System.IO.FileAttributes"/> - default 0 (none)</param>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Create(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAccess,System.IO.FileShare,System.IO.FileMode,System.IO.FileAttributes)">
            <summary>
            Creates a new file.
            </summary>
            <param name="pathInfo">The path to the file. </param>
            <param name="fileAccess"><see cref="T:System.IO.FileAccess"/> - default <see cref="F:System.IO.FileAccess.Write"/></param>
            <param name="fileShare"><see cref="T:System.IO.FileShare"/> - default <see cref="F:System.IO.FileShare.None"/></param>
            <param name="fileMode"><see cref="T:System.IO.FileMode"/> - default <see cref="F:System.IO.FileMode.Create"/></param>
            <param name="fileAttributes"><see cref="T:System.IO.FileAttributes"/> - default 0 (none)</param>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Create(System.String,System.Int32)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The name of the file. </param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
            <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in <i>path</i>.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/981h90e5(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Create(SchwabenCode.QuickIO.QuickIOPathInfo,System.Int32)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="pathInfo">The name of the file. </param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
            <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in <i>path</i>.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/981h90e5(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CreateText(System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">The file. </param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.createtext(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CreateText(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="pathInfo">The file.</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.createtext(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CopyToDirectory(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file. Overwrites an existing file if <paramref name="overwrite"/> is true
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="targetDirectory">Target directory</param>      
            <param name="newFileName">New File name. Null or empty to use <paramref name="sourceFileName"/>'s name</param>
            <param name="overwrite">true to overwrite existing file</param>
            <remarks>http://msdn.microsoft.com/en-us/library/c6cfw35a(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.FileSystemIsBusyException">Filesystem is busy</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CopyToDirectory(SchwabenCode.QuickIO.QuickIOFileInfo,SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.Boolean)">
            <summary>
            Copies an existing file. Overwrites an existing file if <paramref name="overwrite"/>  is true
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="targetDirectory">Target directory</param>
            <param name="newFileName">New File name. Null or empty to use <paramref name="sourceFileName"/>' name</param>
            <param name="overwrite">true to overwrite existing files</param>
            <remarks>http://msdn.microsoft.com/en-us/library/c6cfw35a(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.FileSystemIsBusyException">Filesystem is busy</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Copy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies an existing file. Overwrites an existing file if <paramref name="overwrite"/>  is true
            </summary>
            <param name="source">The file to copy.</param>
            <param name="target">Target file</param>      
            <param name="overwrite">true to overwrite existing files</param>
            <param name="createRecursive">Creates parent path if not exists. Decreases copy performance</param>
            <remarks>http://msdn.microsoft.com/en-us/library/c6cfw35a(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.FileSystemIsBusyException">Filesystem is busy</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Delete(System.String)">
            <summary>
            Deletes the file. 
            </summary>
            <param name="path">The fullname of the file to be deleted.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.delete(v=vs.110).aspx</remarks>
            <exception cref="T:System.IO.FileNotFoundException">File does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Exists(System.String)">
            <summary>
            Checks whether the specified file exists.
            </summary>
            <param name="path">The path to check.</param>
            <returns><b>true</b> if the caller has the required permissions and path contains the name of an existing file; otherwise, <b>false</b></returns>
            <remarks>The original Exists method returns also false on null! http://msdn.microsoft.com/en-us/library/system.io.file.exists(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Searched for file but found folder.</exception>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Exists(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Checks whether the specified file exists.
            </summary>
            <param name="fileInfo">The the file to check.</param>
            <returns><b>true</b> if the caller has the required permissions and path contains the name of an existing file; otherwise, <b>false</b></returns>
            <remarks>The original Exists method returns also false on null! http://msdn.microsoft.com/en-us/library/system.io.file.exists(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Searched for file but found folder.</exception>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to give a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move. </param>
            <param name="destinationFileName">The new path for the file. Parent directory must exist.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.move(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Move(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Moves a file, providing the option to give a new file name.
            </summary>
            <param name="sourceFileInfo">The file to move.</param>
            <param name="destinationFolder">Target directory to move the file.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.move(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Move(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Moves a file, providing the option to give a new file name.
            </summary>
            <param name="sourceFileInfo">The file to move.</param>
            <param name="destinationFolder">Target directory to move the file.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.move(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateHash(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.QuickIOHashImplementationType)">
            <summary>
            File content hash calculation
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateHash(System.Security.Cryptography.HashAlgorithm,System.IO.Stream)">
            <summary>
            File content hash calculation
            </summary>
            <example>
            <code>
            // Implementation of <see cref="M:SchwabenCode.QuickIO.QuickIOFile.CalculateSha256Hash(SchwabenCode.QuickIO.QuickIOPathInfo)"/>
            public static QuickIOHashResult CalculateSha256Hash( QuickIOPathInfo pathInfo )
            {
                using ( var fs = OpenRead( pathInfo ) )
                using ( var hashAlgorithm = SHA256.Create( ) )
                {
                    return CalculateHash( hashAlgorithm, fs );
                }
            }
            </code>
            </example>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateSha1Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File content hash calculation using SHA1
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha1Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateSha256Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File content hash calculation using SHA256
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
            <remarks>Not compatible with FIPS<br/>http://msdn.microsoft.com/de-de/library/hydyw22a(v=vs.110).aspx</remarks>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha256Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateSha384Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File content hash calculation using SHA384
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha384Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateSha512Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File content hash calculation using SHA512
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
            <remarks>Not compatible with FIPS<br/>http://msdn.microsoft.com/de-de/library/hydyw22a(v=vs.110).aspx</remarks>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha512Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateMD5Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File content hash calculation using MD5
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateMD5Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> 
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode"><see cref="T:System.IO.FileMode"/></param>
            <param name="access"><see cref="T:System.IO.FileAccess"/></param>
            <param name="share"><see cref="T:System.IO.FileShare"/> </param>
            <returns>A <see cref="T:System.IO.FileStream"/></returns>
            <remarks>http://msdn.microsoft.com/en-us/library/y973b725(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Open(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/>
            </summary>
            <param name="pathInfo">The file to open. </param>
            <param name="mode"><see cref="T:System.IO.FileMode"/> </param>
            <param name="access"><see cref="T:System.IO.FileAccess"/></param>
            <param name="share"><see cref="T:System.IO.FileShare"/></param>
            <returns><see cref="T:System.IO.FileStream"/></returns>
            <remarks>http://msdn.microsoft.com/en-us/library/y973b725(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading. </param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openread(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenRead(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="pathInfo">The file to be opened for reading. </param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openread(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenFileStream(System.String,System.IO.FileAccess,System.IO.FileMode,System.IO.FileShare,System.Int32)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> 
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenAppendFileStream(System.String,System.IO.FileAccess,System.IO.FileMode,System.IO.FileShare,System.Int32)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> 
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">The file to be opened for reading. </param>
            <returns>A <see cref="T:System.IO.StreamReader"/>.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.opentext(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenText(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="pathInfo">The file. </param>
            <returns>A <see cref="T:System.IO.StreamReader"/>.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.opentext(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenWrite(System.String)">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <param name="path">The file.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openwrite(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenWrite(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <param name="pathInfo">The file. </param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openwrite(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenAppend(System.String)">
            <summary>
            Opens an existing file or creates a new file for appending.
            </summary>
            <param name="path">The file.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openwrite(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenAppend(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Opens an existing file or creates a new file for appending.
            </summary>
            <param name="pathInfo">The file. </param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openwrite(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A byte array containing the contents of the file.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.readallbytes(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllBytes(SchwabenCode.QuickIO.QuickIOPathInfo,System.Int32)">
            <summary>
            Reads the contents of the file into a byte collection.
            </summary>
            <param name="pathInfo">The file. </param>
            <param name="readBuffer">Read buffer byte size</param>
            <returns>A byte collection containing the contents.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.readallbytes(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllLines(System.String)">
            <summary>
            Reads all lines.
            </summary>
            <param name="path">The file. </param>
            <returns>A string collection containing all lines.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/s2tte0y1(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllLines(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Reads all lines.
            </summary>
            <param name="pathInfo">The file. </param>
            <returns>A string collection containing all lines.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/s2tte0y1(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Reads all lines with the specified encoding
            </summary>
            <param name="path">The file. </param>
            <param name="encoding">The encoding applied to the contents. </param>
            <returns>A string collection containing all lines.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/bsy4fhsa(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllLines(SchwabenCode.QuickIO.QuickIOPathInfo,System.Text.Encoding)">
            <summary>
            Reads all lines with the specified encoding
            </summary>
            <param name="pathInfo">The file. </param>
            <param name="encoding">The encoding applied to the contents. </param>
            <returns>A string collection containing all lines.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/bsy4fhsa(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllText(System.String)">
            <summary>
            Reads all text.
            </summary>
            <param name="path">The file. </param>
            <returns>A string represents the content.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/s2tte0y1(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllText(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Reads all text.
            </summary>
            <param name="pathInfo">The file. </param>
            <returns>A string represents the content.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Reads all text with the specified encoding.
            </summary>
            <param name="path">The file. </param>
            <param name="encoding">The encoding applied to the content. </param>
            <returns>A string represents the content.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143369(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllText(SchwabenCode.QuickIO.QuickIOPathInfo,System.Text.Encoding)">
            <summary>
            Reads all text with the specified encoding.
            </summary>
            <param name="pathInfo">The file. </param>
            <param name="encoding">The encoding applied to the content. </param>
            <returns>A string represents the content.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143369(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes the specified byte array.
            If the file already exists, it is overwritten.
            </summary>
            <param name="path">The file. </param>
            <param name="bytes">The bytes to write. </param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.writeallbytes(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllBytes(SchwabenCode.QuickIO.QuickIOPathInfo,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes the specified byte array.
            If the file already exists, it is overwritten.
            </summary>
            <param name="pathInfo">The file. </param>
            <param name="bytes">The bytes to write. </param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.writeallbytes(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Writes a collection of strings.
            </summary>
            <param name="path">The file.</param>
            <param name="contents">The lines write to.</param>
            <param name="encoding">The character encoding to use.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383463(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllLines(SchwabenCode.QuickIO.QuickIOPathInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Writes a collection of strings.
            </summary>
            <param name="pathInfo">The file.</param>
            <param name="contents">The lines write to.</param>
            <param name="encoding">The character encoding to use.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383463(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file. </param>
            <param name="contents">The string to write to. </param>
            <param name="encoding">The encoding to apply to the string.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143376(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllText(SchwabenCode.QuickIO.QuickIOPathInfo,System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="pathInfo">The file. </param>
            <param name="contents">The string to write to. </param>
            <param name="encoding">The encoding to apply to the string.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143376(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAttributes(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetAttributes(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.RemoveAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.RemoveAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.RemoveAttribute(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AddAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>Refreshed <see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AddAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AddAttribute(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTime(System.String)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTime(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTime(System.String)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTime(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTime(System.String)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTime(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception> 
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception> 
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimes(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimes(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimes(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimesUtc(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimesUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimesUtc(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTime(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTime(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTime(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="path">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetDirectoryRoot(System.String)">
            <summary>
            Returns the root information
            </summary>
            <param name="path">The path of a file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="path"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetDirectoryRoot(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the root information
            </summary>
            <param name="info">A file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="info"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetDirectoryRoot(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the root information
            </summary>
            <param name="info">A file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="info"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileChunk">
            <summary>
            Represents a file chunk
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileChunk.Position">
            <summary>
            Start position
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileChunk.Bytes">
            <summary>
            Bytes
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.#ctor(System.UInt64,System.Byte[])">
            <summary>
            Represents a file chunk
            </summary>
            <param name="position">Start position</param>
            <param name="bytes">Bytes</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.ChunkEquals(SchwabenCode.QuickIO.QuickIOFileChunk)">
            <summary>
            First <see cref="M:SchwabenCode.QuickIO.QuickIOFileChunk.PositionEquals(SchwabenCode.QuickIO.QuickIOFileChunk)"/> then <see cref="M:SchwabenCode.QuickIO.QuickIOFileChunk.BytesEquals(SchwabenCode.QuickIO.QuickIOFileChunk)"/>.
            Does not overwrite default <see cref="M:SchwabenCode.QuickIO.QuickIOFileChunk.ChunkEquals(SchwabenCode.QuickIO.QuickIOFileChunk)"/> method!
            </summary>
            <param name="chunk">Chunks to verify with</param>
            <returns>Returns true if both executed methods are true</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.PositionEquals(SchwabenCode.QuickIO.QuickIOFileChunk)">
            <summary>
            Checks <see cref="P:SchwabenCode.QuickIO.QuickIOFileChunk.Position"/>
            </summary>
            <param name="chunk">Chunks to verify with</param>
            <returns>True if both position equals</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.InternalPositionEquals(SchwabenCode.QuickIO.QuickIOFileChunk)">
            <summary>
            Internal usage. Does not verify parameter.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.BytesEquals(SchwabenCode.QuickIO.QuickIOFileChunk)">
            <summary>
            Checks <see cref="P:SchwabenCode.QuickIO.QuickIOFileChunk.Bytes"/>
            </summary>
            <param name="chunk">Chunks to verify with</param>
            <returns>True if both bytes equals. Uses <see>
                    <cref>IEnumerable.SequenceEqual</cref>
                </see>
            </returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.InternalBytesEquals(SchwabenCode.QuickIO.QuickIOFileChunk)">
            <summary>
            Internal usage. Does not verify parameter.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateHash(SchwabenCode.QuickIO.QuickIOHashImplementationType)">
            <summary>
            File chunk hash calculation
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateHash(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateSha1Hash">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateSha256Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateSha384Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateSha512Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateMD5Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileCompareCriteria">
            <summary>
            Options for file compare. You can select multiple flags or use <see cref="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.All"/> for all options
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.All">
            <summary>
            PathMatchAll options will be verified
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.TimestampsAll">
            <summary>
            Compares all timestamps
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.TimestampCreated">
            <summary>
            Compares timestamp of file creation
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.TimestampLastWritten">
            <summary>
            Compares timestamp of file last written to
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.TimestampLastAccessed">
            <summary>
            Compares timestamp of file last accessed to
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.ByteLength">
            <summary>
            Compares length of file (without checking the content!)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.Content">
            <summary>
            Compares the contents. Requires read access.
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileInfo">
            <summary>
            Provides properties and instance methods for files
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.AppendAllLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file.
            Uses UTF-8 Encoding.
            </summary>
            <param name="contents">The lines to append.</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.AppendAllLines(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines by using the specified encoding.
            If the file does not exist, it creates the file.
            </summary>
            <param name="contents">The lines to append.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.AppendAllText(System.String)">
            <summary>
            Appends the specified string.
            If the file does not exist, it creates the file.
            Uses UTF-8 Encoding.
            </summary>
            <param name="contents">The string to append to the file.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143356(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.AppendAllText(System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string.
            If the file does not exist, it creates the file.
            </summary>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143356(v=vs.110).aspx</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileInfo.DefaultChunkSize">
            <summary>
            Default ChunkSize
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetFileChunks(System.Int32)">
            <summary>
            Returns the file chunks by given chunksize
            </summary>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns>Collection of chunks. On enumerator, the file gets read.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetFileChunksEqual(SchwabenCode.QuickIO.QuickIOFileInfo,System.Int32)">
            <summary>
            Returns the chunks of current file that are identical with the other file
            </summary>
            <param name="file">File to compare</param>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns>Returns the chunks of current file that are identical with the other file</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetFileChunksUnequal(SchwabenCode.QuickIO.QuickIOFileInfo,System.Int32)">
            <summary>
            Returns the chunks of current file that are NOT identical with the other file
            </summary>
            <param name="file">File to compare</param>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns>Returns the chunks of current file that are NOT identical with the other file</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetFileChunksEnumerator(System.Int32)">
            <summary>
            Returns the <see>
                    <cref>IEnumerator</cref></see>
              of <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetFileChunks(System.Int32)"/>
            </summary>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualContents(SchwabenCode.QuickIO.QuickIOFileInfo,System.Int32)">
            <summary>
            Checks if both file contents are equal.
            Opens both files for read and breaks on first unequal chunk.
            </summary>
            <param name="file">File to compare</param>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns>true if contents are equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.InternalEnumerateFileChunks(System.Int32)">
            <summary>
            Reads the file and returns containign chunks
            </summary>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns>Collection of chunks</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualByteLength(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Checks byte length (NOT CONTENTS!)
            </summary>
            <param name="file">File to compare with</param>
            <returns>Returns true if both <see cref="P:SchwabenCode.QuickIO.QuickIOFileInfo.Bytes"/> properties are equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestamps(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the if all timestamps are equal
            </summary>
            <param name="file">File to compare with</param>
            <returns>Returns the if all timestamps are equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CompareTimestamps(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Checks all timestamps.
            </summary>
            <param name="file">File to compare with</param>
            <returns>If collection is empty, all timestamps are equal. Otherwise unequal timestamp is returned.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampCreated(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the if timestamp 'created' is equal
            </summary>
            <param name="file">File to compare with</param>
            <returns>Returns the if timestamp 'created' is equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.InternalIsEqualTimestampCreated(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Same as <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampCreated(SchwabenCode.QuickIO.QuickIOFileInfo)"/> but does not check the param for null
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampLastAccessed(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the if timestamp 'last accessed' is equal
            </summary>
            <param name="file">File to compare with</param>
            <returns>Returns the if timestamp 'last accessed' is equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.InternalIsEqualTimestampLastAccessed(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Same as <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampLastAccessed(SchwabenCode.QuickIO.QuickIOFileInfo)"/> but does not check the param for null
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampsLastWritten(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the if timestamp 'last written to' is equal
            </summary>
            <param name="file">File to compare with</param>
            <returns>Returns the if timestamp 'last written to' is equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.InternalIsEqualTimestampsLastWritten(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Same as <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampsLastWritten(SchwabenCode.QuickIO.QuickIOFileInfo)"/> but does not check the param for null
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetCompressStream(System.Int32)">
            <summary>
            Compress all data of file and returns filled <see cref="T:System.IO.MemoryStream"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetDecompressStream(System.Int32)">
            <summary>
            Decompress all data of file and returns filled <see cref="T:System.IO.MemoryStream"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.InternalGetGZipStream(System.Int32,System.IO.Compression.CompressionMode)">
            <summary>
            Internal Usage only
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CompressData">
            <summary>
            Returns all bytes of <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetCompressStream(System.Int32)"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.DecompressData">
            <summary>
            Returns all bytes of <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetDecompressStream(System.Int32)"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.#ctor(System.String)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFileInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.#ctor(System.IO.FileInfo)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFileInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFileInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.#ctor(System.String,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates the file information on the basis of the path and <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/>
            </summary>
            <param name="fullName">Full path to the file</param>
            <param name="win32FindData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates the file information on the basis of the path and <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/>
            </summary>
            <param name="pathInfo">Full path to the file</param>
            <param name="win32FindData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileInfo.Exists">
            <summary>
            Returns true if file exists. Uncached.
            </summary>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Path exists but it's a directory.</exception>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileInfo.Bytes">
            <summary>
            Size of the file. Cached.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileInfo.Length">
            <summary>
            Size of the file (returns <see cref="P:SchwabenCode.QuickIO.QuickIOFileInfo.Bytes"/>).
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.RetriveDateTimeInformation(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Determines the time stamp of the given <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/>
            </summary>
            <param name="win32FindData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateSize(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Calculates the size of the file from the handle
            </summary>
            <param name="win32FindData"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateHash(SchwabenCode.QuickIO.QuickIOHashImplementationType)">
            <summary>
            File content hash calculation
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateHash(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            File content hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateSha1Hash">
            <summary>
            File content hash calculation using SHA1
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateSha256Hash">
            <summary>
            File content hash calculation using SHA256
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateSha384Hash">
            <summary>
            File content hash calculation using SHA384
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateSha512Hash">
            <summary>
            File content hash calculation using SHA512
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateMD5Hash">
            <summary>
            File content hash calculation using MD5
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetMetadata">
            <summary>
            Receives <see cref="T:SchwabenCode.QuickIO.QuickIOFileMetadata"/> of current file
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOFileMetadata"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/>
            </summary>
            <param name="mode"><see cref="T:System.IO.FileMode"/> </param>
            <param name="access"><see cref="T:System.IO.FileAccess"/></param>
            <param name="share"><see cref="T:System.IO.FileShare"/></param>
            <returns><see cref="T:System.IO.FileStream"/></returns>
            <remarks>http://msdn.microsoft.com/en-us/library/y973b725(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.OpenRead">
            <summary>
            Opens an existing file for reading.
            </summary>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.OpenText">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <returns>A <see cref="T:System.IO.StreamReader"/>.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.OpenWrite">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.OpenAppend">
            <summary>
            Opens an existing file or creates a new file for appending.
            </summary>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.AsFileInfo">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> of the current path of this file
            </summary>
            <returns><see cref="T:System.IO.DirectoryInfo"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.op_Explicit(System.IO.FileInfo)~SchwabenCode.QuickIO.QuickIOFileInfo">
            <summary>
            Explizit Cast
            </summary>
            <param name="fileInfo"><see cref="T:SchwabenCode.QuickIO.QuickIOFileInfo"/></param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.ReadAllBytes(System.Int32)">
            <summary>
            Reads the contents of the file into a byte collection.
            </summary>
            <returns>A byte collection containing the contents.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.ReadAllLines">
            <summary>
            Reads all lines.
            </summary>
            <returns>A string collection containing all lines.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.ReadAllLines(System.Text.Encoding)">
            <summary>
            Reads all lines with the specified encoding
            </summary>
            <param name="encoding">The encoding applied to the contents. </param>
            <returns>A string collection containing all lines.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.ReadAllText">
            <summary>
            Reads all text.
            </summary>
            <returns>A string represents the content.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.ReadAllText(System.Text.Encoding)">
            <summary>
            Reads all text with the specified encoding.
            </summary>
            <param name="encoding">The encoding applied to the content. </param>
            <returns>A string represents the content.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllBytes(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes the specified byte array.
            </summary>
            <param name="bytes">The bytes to write. </param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllBytes(System.Byte[])">
            <summary>
            Writes the specified byte array.
            </summary>
            <param name="bytes">The bytes to write. </param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a collection of strings.
            Uses UTF-8 without Emitted UTF-8 identifier.
            </summary>
            <param name="contents">The lines write to.</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllLines(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Writes a collection of strings.
            </summary>
            <param name="contents">The lines write to.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllText(System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string.
            </summary>
            <param name="contents">The string to write to. </param>
            <param name="encoding">The encoding to apply to the string.</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllText(System.String)">
            <summary>
            Writes the specified string.
            </summary>
            <param name="contents">The string to write to. </param>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileMetadata">
            <summary>
            File metadata information
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileMetadata.#ctor(System.String,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFileMetadata"/>
            </summary>
            <param name="uncResultPath">UNC Path of current file</param>
            <param name="win32FindData">Win32FindData of current file</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileMetadata.Bytes">
            <summary>
            Size of the file. 
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileMetadata.QuickIOFileInfo">
            <summary>
            Returns a new instance of <see cref="M:SchwabenCode.QuickIO.QuickIOFileMetadata.QuickIOFileInfo"/> of the current file
            </summary>
            <returns><see cref="M:SchwabenCode.QuickIO.QuickIOFileMetadata.QuickIOFileInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase">
            <summary>
            Provides properties and instance method for files and directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Initializes a new instance of the QuickIOAbstractBase class, which acts as a wrapper for a file path.
            </summary>
            <param name="pathInfo"><see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/></param>
            <param name="findData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.Exists">
            <summary>
            Returns true if exists
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.IsReadOnly">
            <summary>
            True if file is readonly. Cached.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.PathInfo">
            <summary>
            QuickIOPathInfo Container
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.SafeExists(System.Boolean,System.Boolean)">
            <summary>
            Returns true if exists and attends the FileSystemType
            </summary>
            <param name="throwExceptionIfFileSystemEntryTypeDiffers">Suppress error message if the path exists but the <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/> differs
            </param>
            <param name="exceptionValue">Default return value if <sparamref name="throwExceptionIfFileSystemEntryTypeDiffers"/> is true</param>
            <returns>True or <paramref name="exceptionValue"/> if <see cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException"/> thrown and <paramref name="throwExceptionIfFileSystemEntryTypeDiffers"/> is true</returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.Name">
            <summary>
            Name of file or directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.FullName">
            <summary>
            Full path of the directory or file.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.FullNameUnc">
            <summary>
            Full path of the directory or file (unc format)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.ParentFullName">
            <summary>
            Fullname of Parent.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.Parent">
            <summary>
            Parent. 
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.PathLocation">
            <summary>
            <see cref="T:SchwabenCode.QuickIO.QuickIOPathLocation"/> of current path
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.PathType">
            <summary>
            <see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.PathType"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.GetFileSystemSecurity">
            <summary>
            Returns current <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity"/>
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity"/></returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.RootFullName">
            <summary>
            Fullname of Root. null if current path is root.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.Root">
            <summary>
            Returns Root or null if current path is root
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.Attributes">
            <summary>
            Attributes (Cached Value)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.CreationTimeUtc">
            <summary>
            Gets the creation time (UTC)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.LastAccessTimeUtc">
            <summary>
            Gets the time (UTC) of last access. 
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.LastWriteTimeUtc">
            <summary>
            Gets the time (UTC) was last written to
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.CreationTime">
            <summary>
            Gets the creation time
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.LastAccessTime">
            <summary>
            Gets the time that the  file was last accessed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.LastWriteTime">
            <summary>
            Gets the time the file was last written to.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.ToString">
            <summary>
            Returns <see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.FullName"/>
            </summary>
            <returns><see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.FullName"/></returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.FindData">
            <summary>
            Win32ApiFindData bag
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.GetOwner">
            <summary>
            Determines the owner
            </summary>
            <returns><see cref="T:System.Security.Principal.NTAccount"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.GetOwnerIdentifier">
            <summary>
            Determines the owner
            </summary>
            <returns><see cref="T:System.Security.Principal.IdentityReference"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.SetOwner(System.Security.Principal.NTAccount)">
            <summary>
            Determines the owner
            </summary>
            <returns><see cref="T:System.Security.Principal.IdentityReference"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.SetOwner(System.Security.Principal.IdentityReference)">
            <summary>
            Sets the owner
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType">
            <summary>
            Represents type of path or handle
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileSystemEntryType.File">
            <summary>
            Represents a file (<see cref="T:System.IO.FileAttributes"/> does not contain directory flag)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileSystemEntryType.Directory">
            <summary>
            Represents a directory (<see cref="T:System.IO.FileAttributes"/>contains directory flag)
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase">
            <summary>
            Abstract class for file system entries such as files and directory.
            Just for meta data reprentation
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.#ctor(System.String,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Ctor
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.FullName">
            <summary>
            Path to file or directory (regular format)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.Name">
            <summary>
            Name of file or directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.FullNameUnc">
            <summary>
            Path to file or directory (unc format)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.CreationTimeUtc">
            <summary>
            Gets the creation time (UTC)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.CreationTime">
            <summary>
            Gets the creation time
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.LastAccessTimeUtc">
            <summary>
            Gets the time (UTC) of last access. 
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.LastAccessTime">
            <summary>
            Gets the time that the  file was last accessed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.LastWriteTimeUtc">
            <summary>
            Gets the time (UTC) was last written to
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.LastWriteTime">
            <summary>
            Gets the time the file was last written to.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.Attributes">
            <summary>
            File Attributes
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.ToPathInfo">
            <summary>
            Returns a new instance of <see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/> of the current path
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity">
            <summary>
            Provides methods for accessing the security information of files and folders, such as for example the getting and setting of the owner.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity"/> for specified path.
            Current Windows Identtiy is used.
            </summary>
            <param name="pathInfo"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo,System.Security.Principal.WindowsIdentity)">
            <summary>
            Supply the path to the file or directory and a user or group. 
            Access checks are done
            during instantiation to ensure we always have a valid object
            </summary>
            <param name="pathInfo"></param>
            <param name="principal"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.Refresh">
            <summary>
            Refreshes the Information
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.WindowsIdentity">
            <summary>
            Affected Windows IDentity
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.PathInfo">
            <summary>
            Affected path
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedAppendData">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedChangePermissions">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedCreateDirectories">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedCreateFiles">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedDelete">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedDeleteSubdirectoriesAndFiles">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedExecuteFile">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedFullControl">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedListDirectory">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedModify">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedRead">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedReadAndExecute">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedReadAttributes">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedReadData">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedReadExtendedAttributes">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedReadPermissions">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedSynchronize">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedTakeOwnership">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedTraverse">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedWrite">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedWriteAttributes">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedWriteData">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedWriteExtendedAttributes">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedAppendData">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedChangePermissions">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedCreateDirectories">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedCreateFiles">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedDelete">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedDeleteSubdirectoriesAndFiles">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedExecuteFile">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedFullControl">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedListDirectory">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedModify">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedRead">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedReadAndExecute">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedReadAttributes">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedReadData">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedReadExtendedAttributes">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedReadPermissions">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedSynchronize">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedTakeOwnership">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedTraverse">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedWrite">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedWriteAttributes">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedWriteData">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedWriteExtendedAttributes">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanAppendData">
            <summary>
            Ermittelt, ob etwas hinzugefügt werden kann (Dateien)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanChangePermissions">
            <summary>
            Ermittelt, ob die Rechte verändert werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanCreateDirectories">
            <summary>
            Ermittelt, ob neue Ordner hinzugefügt werden dürfen (Ordner)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanCreateFiles">
            <summary>
            Ermittelt, ob neue Dateien hinzugefügt werden dürfen (Ordner)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanDelete">
            <summary>
            Ermittelt, ob etwas gelöscht werden darf (Ordner)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanDeleteSubdirectoriesAndFiles">
            <summary>
            Ermittelt, ob darunterliegende Ordner und Dateien gelöscht werden dürfen (Ordner)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanExecuteFile">
            <summary>
            Ermittelt, ob eine Datei ausgeführt werden darf (Dateien)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanFullControl">
            <summary>
            Ermittelt, ob die vollständige Kontrolle gewährt ist
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanListDirectory">
            <summary>
            Ermittelt, ob die Ordner aufgelistet werden dürfen (Ordner)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanModify">
            <summary>
            Ermittelt, ob etwas verändert werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanRead">
            <summary>
            Ermittelt, ob etwas gelesen werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanReadAndExecute">
            <summary>
            Ermittelt, ob gelesen und ausgeführt werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanReadAttributes">
            <summary>
            Ermittelt, ob die Attribute gelesen werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanReadData">
            <summary>
            Ermittelt, ob Daten gelesen werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanReadExtendedAttributes">
            <summary>
            Ermittelt, ob die erweiterten Attribute gelesen werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanReadPermissions">
            <summary>
            Ermittelt, ob die Rechte gelesen werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanSynchronize">
            <summary>
            Ermittelt, ob synchronisiert werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanTakeOwnership">
            <summary>
            Ermittelt, ob der Besitzerstatus eingenommen werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanTraverse">
            <summary>
            Ermittelt, ob ???????
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanWrite">
            <summary>
            Ermittelt, ob geschrieben werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanWriteAttributes">
            <summary>
            Ermittelt, ob Attribute verändert werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanWriteData">
            <summary>
            Ermittelt, ob Daten geschrieben werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanWriteExtendedAttributes">
            <summary>
            Ermittelt, ob erweiterte Attribute geschrieben werden dürfen
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.ReadSecurityInformation">
            <summary>
            Reads the security information of <see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.FileSystemSecurityInformation"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.ReceivGroupIdentityRules(System.Security.AccessControl.AuthorizationRuleCollection)">
            <summary>
            Processes the authentication data of a Windows Group
            </summary>
            <param name="acl"><see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.HandleFileSystemAccessRule(System.Security.AccessControl.FileSystemAccessRule,System.Security.Principal.IdentityReference)">
            <summary>
            Processes the authentication data of a Windows identity
            </summary>
            <param name="rule">FileSystemAccessRule</param>
            <param name="identity"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.ReceiveUserIdentityRules(System.Security.AccessControl.AuthorizationRuleCollection)">
            <summary>
            Processes the authentication data of a Windows user
            </summary>
            <param name="acl"><see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.HandleAccessControlType(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Handles the access rights. Differentiates between allowed and denied rights
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.HandleAllowedAccessRule(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Processed the permitted rights
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.HandleDeniedAccessRule(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Processed the denied rights
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.Contains(System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Returs the if <paramref name="right"/> is in <sparamref name="rule"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.GetSecurityFromFileSystem">
            <summary>
            Get the File Information and set's the result to <see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.FileSystemSecurityInformation"/> on success.
            Also set's owner and owner's domain
            </summary>
            <returns>true on success. Use native win32 exception to get further error information</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.ReceiveFileSystemSecurityInformation(System.IntPtr@)">
            <summary>
            Gets the security information of specified handle from file system
            </summary>
            <param name="sidHandle">Handle to get file security information</param>
            <returns><see cref="T:System.Security.AccessControl.CommonObjectSecurity"/>Result</returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.FileSystemSecurityInformation">
            <summary>
            File System Security Information
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFolderStatisticResult">
            <summary>
            Folder Statistics
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFolderStatisticResult.FolderCount">
            <summary>
            Folder Count
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFolderStatisticResult.FileCount">
            <summary>
            File Count
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFolderStatisticResult.TotalBytes">
            <summary>
            Total TotalBytes
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFolderStatisticResult.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates new Instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFolderStatisticResult"/> - internal access only
            </summary>
            <param name="folderCount">Folder Count</param>
            <param name="fileCount">File Count</param>
            <param name="size"> Total TotalBytes</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOHashImplementationType">
            <summary>
            QuickIOHashImplementationType
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOHashImplementationType.SHA1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOHashImplementationType.SHA256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOHashImplementationType.SHA384">
            <summary>
            SHA384
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOHashImplementationType.SHA512">
            <summary>
            SHA512
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOHashImplementationType.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOHashResult">
            <summary>
            This class is used for hash calculations.
            Use <see>
                    <cref>Format</cref>
                </see>
                for human readable output.
            </summary>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha256Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOHashResult.HashBytes">
            <summary>
            The bytes that represents the calculation result
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOHashResult.#ctor(System.Byte[])">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/>
            </summary>
            <param name="hashBytes"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOHashResult.Format">
            <summary>
            Formats the <see cref="P:SchwabenCode.QuickIO.QuickIOHashResult.HashBytes"/> as a hexadecimal string using UTF8 encoding.
            </summary>
            <returns>Formated string</returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha256Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOHashResult.Format(System.Text.Encoding)">
            <summary>
            Formats the <see cref="P:SchwabenCode.QuickIO.QuickIOHashResult.HashBytes"/> as a hexadecimal string using specified encoding.
            </summary>
            <param name="encoding">Encoding for formatting</param>
            <returns>Formated string</returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha256Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8 );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOHashResult.Format(System.Text.Encoding,System.String,System.Threading.CancellationToken)">
            <summary>
            Formats the <see cref="P:SchwabenCode.QuickIO.QuickIOHashResult.HashBytes"/> using specified encoding and format.
            </summary>
            <param name="encoding">Encoding for formatting</param>
            <param name="format">Pattern for formatting. Use x2 for hexadecimal output.</param>
            <param name="cancellationToken">Cancel token</param>
            <returns>Formated string</returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha256Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOPath">
            <summary>
            Performs operations for files or directories and path information. 
            </summary>
            <summary>
            Performs operations for files or directories and path information. 
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxRegularPathLength">
            <summary>
            Maximum allowed length of a regular path
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxPathElementLength">
            <summary>
            Max allowed path element name like folder names or file names
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxFolderNameLength">
            <summary>
            Max allowed length of folder name
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxFileNameLength">
            <summary>
            Max allowed length of file name
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxSimpleDirectoryPathLength">
            <summary>
            Maximum allowed length of a regular folder path
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxUncPathLength">
            <summary>
            Maximum allowed length of an UNC Path
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.RegularLocalPathPrefix">
            <summary>
            Regular local path prefix
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.RegularSharePathPrefix">
            <summary>
            Path prefix for shares
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.RegularSharePathPrefixLength">
            <summary>
            Length of Path prefix for shares
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.UncLocalPathPrefix">
            <summary>
            UNC prefix for regular paths
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.UncSharePathPrefix">
            <summary>
            UNC prefix for shares
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.DirectorySeparatorChar">
            <summary>
            Directory Separator Char
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.WhiteSpace">
            <summary>
            WhiteSpace = ' '
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.InternalTrimTrailingSeparator(System.String)">
            <summary>
            Removes spaces end <see cref="F:SchwabenCode.QuickIO.QuickIOPath.DirectorySeparatorChar"/> at the end of a string
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.Combine(System.String[])">
            <summary>
            Combines given path elements
            </summary>
            <param name="pathElements">Path elements to combine</param>
            <returns>Combined Path</returns>
            <remarks>No validation</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetParentPath(System.String)">
            <summary>
            Returns the parent directory path
             </summary>
            <param name="path">Path to get the parent</param>
            <returns>Parent directory or null if parent is root</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.Clean(System.String)">
            <summary>
            Removes all spaces and trims backslahes at the end.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.Exists(System.String)">
            <summary>
            Checks if path exists
            </summary>
            <param name="path">Path to check</param>
            <returns>True on exists</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetRandomFileName">
            <summary>
            Returns <see cref="M:System.IO.Path.GetRandomFileName"/>
            </summary>
            <returns><see cref="M:System.IO.Path.GetRandomFileName"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetName(System.String)">
            <summary>
            Gets name of file or directory
            </summary>
            <param name="fullName">Path</param>
            <returns>Name of file or directory</returns>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetFullPath(System.String)">
            <summary>
            A wrapper for <see cref="M:System.IO.Path.GetFullPath(System.String)"/>
            </summary>
            <remarks>Calls <see cref="M:System.IO.Path.GetFullPath(System.String)"/></remarks>
            <returns>a regular path</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetFullPathInfo(System.String)">
            <summary>
            A wrapper for <see cref="M:SchwabenCode.QuickIO.QuickIOPath.GetFullPath(System.String)"/> that returns <see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetPathRoot(System.String)">
            <summary>
            Full path, no relative path allowed
            </summary>
            <remarks>Same return behavior like <see cref="M:System.IO.Path.GetPathRoot(System.String)"/></remarks>
            <returns>Null if <paramref name="path" /> is null, empty string if <paramref name="path" /> does not contain any root information or is invalid.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.TryGetLocalRootPath(System.String,System.String@)">
            <summary>
            Returns true if <paramref name="path" /> can be parsed and puts root information to <paramref name="root" />
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.TryGetLocalUncRootPath(System.String,System.String@)">
            <summary>
            Returns true if <paramref name="path" /> can be parsed and puts root information to <paramref name="root" />
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.TryGetShareRootPath(System.String,System.String@)">
            <summary>
            Returns true if <paramref name="path" /> can be parsed and puts root information to <paramref name="root" />
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.TryGetShareUncRootPath(System.String,System.String@)">
            <summary>
            Returns true if <paramref name="path" /> can be parsed and puts root information to <paramref name="root" />
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.TryGetServerAndShareNameFromLocation(System.String,SchwabenCode.QuickIO.QuickIOPathType,System.String@,System.String@)">
            <summary>
            Strips server and share from given path
            </summary>
            <remarks>Returns false if path is invalid for this operation</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRelative(System.String)">
            <summary>
            Checks if given path starts with a known root path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsPath(System.String)">
            <summary>
            Returns true if given path is <see cref="M:SchwabenCode.QuickIO.QuickIOPath.IsLocal(System.String)"/> or <see cref="M:SchwabenCode.QuickIO.QuickIOPath.IsShare(System.String)"/>
            </summary>
            <remarks>Will return true on C:\ but will return false on C:\folderName</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsLocal(System.String)">
            <summary>
            Checks if given path matches C:\ or X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsShare(System.String)">
            <summary>
            Checks if given path matches C:\ or X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsLocalRegular(System.String)">
            <summary>
            Checks if given path matches C:\ or X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsLocalUnc(System.String)">
            <summary>
            Checks if given path matches  \\?\C:\ or \\?\X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsShareRegular(System.String)">
            <summary>
            Checks if given path matches  \\s\s
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsUnc(System.String)">
            <summary>
            True if <param name="path" /> starts with <see cref="F:SchwabenCode.QuickIO.QuickIOPath.UncLocalPathPrefix"/> or <see cref="F:SchwabenCode.QuickIO.QuickIOPath.UncLocalPathPrefix"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsShareUnc(System.String)">
            <summary>
            Checks if given path matches \\?\UNC\server\name
            </summary>
            <remarks>Min length: \\?\UNC\s\s</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.InternalStartsWithExpected(System.String,System.String)">
            <summary>
            Checks if given path starts with expected prefix and has min length
            </summary>
            <remarks>Internal = no validation</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRoot(System.String)">
            <summary>
            Returns true if given path is <see cref="!:IsLocalRoot(string)"/> or <see cref="!:IsShareRoot(string)"/>
            </summary>
            <remarks>Will return true on C:\ but will return false on C:\folderName</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootLocal(System.String)">
            <summary>
            Checks if given path is local root
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootShare(System.String)">
            <summary>
            Checks if given path is share root
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootLocalRegular(System.String)">
            <summary>
            Checks if given path matches C:\ or X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootLocalUnc(System.String)">
            <summary>
            Checks if given path matches  \\?\C:\ or \\?\X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootShareRegular(System.String)">
            <summary>
            Checks if given path matches \\server\name
            </summary>
            <remarks>Min length: \\s\s</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootShareUnc(System.String)">
            <summary>
            Checks if given path matches \\?\UNC\server\name
            </summary>
            <remarks>Min length: \\?\UNC\s\s</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidFolderName(System.String)">
            <summary>
            Checks if given name is a valid server name
            </summary>
            <remarks>Ignores Unix File Systems</remarks>
            <param name="path">Path to check</param>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">If invalid character found</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidFolderChar(System.Char)">
            <summary>
            returns true if char is invalid for a folder name
            </summary>
            <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx#naming_conventions</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ThrowArgumentNullExceptionIfNull(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if passed value is null
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidDriveLetter(System.Char)">
            <summary>
            Checks if given char is a valid windows drive letter
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidServerName(System.String)">
            <summary>
            Verifies server name
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidServerNameChar(System.Char)">
            <summary>
            returns true if char is valid for a server name
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidShareName(System.String)">
            <summary>
            Returns true if share name is valid
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidShareNameChar(System.Char)">
            <summary>
            Returns true if char is valid for a share name
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToPathRegular(System.String)">
            <summary>
            Converts unc path to regular path
            </summary>
            <exception cref="T:System.InvalidOperationException">If path is invalid or cannot be identified</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToPathUnc(System.String)">
            <summary>
            Converts regular path to unc path
            </summary>
            <exception cref="T:System.InvalidOperationException">If path is invalid or cannot be identified</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.InternalFormatPathByType(SchwabenCode.QuickIO.QuickIOPathType,System.String)">
            <summary>
            Formats a path 
            </summary>
            <param name="pathFormatReturn">Target format type</param>
            <param name="uncPath">Path to format</param>
            <returns>Formatted path</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToLocalPathRegular(System.String)">
            <summary>
            Converts an unc path to a local regular path
            </summary>
            <param name="uncLocalPath">Unc Path</param>
            <example>\\?\C:\temp\file.txt >> C:\temp\file.txt</example>
            <returns>Local Regular Path</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToSharePathRegular(System.String)">
            <summary>
            Converts an unc path to a share regular path
            </summary>
            <param name="uncSharePath">Unc Path</param>
            <example>\\?\UNC\server\share >> \\server\share</example>
            <returns>QuickIOShareInfo Regular Path</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToLocalPathUnc(System.String)">
            <summary>
            Converts a regular local path to an unc path
            </summary>
            <param name="regularLocalPath">Regular Path</param>
            <example>C:\temp\file.txt >> \\?\C:\temp\file.txt</example>
            <returns>Local Unc Path</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToSharePathUnc(System.String)">
            <summary>
            Converts a regular share path to an unc path
            </summary>
            <param name="regularSharePath">Regular Path</param>
            <example>\\server\share\file.txt >> \\?\UNC\server\share\file.txt</example>
            <returns>QuickIOShareInfo Unc Path</returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOPathInfo">
            <summary>
            Provides properties and instance method for paths
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.#ctor(System.String)">
            <summary>
            Creates the path information container
            </summary>
            <param name="path">Full path to the file or directory (regular or unc)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.#ctor(SchwabenCode.QuickIO.Internal.InternalPath)">
            <summary>
            Creates the path information container
            </summary>
            <param name="internalPath">Full path to the file or directory (regular or unc)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.#ctor(SchwabenCode.QuickIO.Internal.InternalPath,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates the path information container
            </summary>
            <param name="internalPath">Full path to the file or directory (regular or unc)</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.FullName">
            <summary>
            Path to file or directory (regular format)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.FullNameUnc">
            <summary>
            Path to file or directory (unc format)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.Name">
            <summary>
            Name of file or directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.PathType">
            <summary>
            <see cref="P:SchwabenCode.QuickIO.QuickIOPathInfo.PathType"/>
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.RootFullName">
            <summary>
            Fullname of Root. null if current path is root.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.ParentFullName">
            <summary>
            Fullname of Parent. null if current path is root.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.Parent">
            <summary>
            Parent Directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.PathLocation">
            <summary>
            <see cref="T:SchwabenCode.QuickIO.QuickIOPathLocation"/> of current path
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.FindData">
            <summary>
            FindData
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.Attributes">
            <summary>
            Attributes. Cached.
            </summary>
            <exception cref="T:System.NotSupportedException">if path is root</exception>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.IsRoot">
            <summary>
            Returns true if current path is root
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.Root">
            <summary>
            Returns Root or null if current path is root
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.Exists">
            <summary>
            Returns true if path exists. Checks <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.SystemEntryType">
            <summary>
            Returns true if path exists. Checks <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/> against the file system
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.GetFileSystemSecurity">
            <summary>
            Returns current <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity"/>
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.GetOwner">
            <summary>
            Determines the owner
            </summary>
            <returns><see cref="T:System.Security.Principal.NTAccount"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.GetOwnerIdentifier">
            <summary>
            Determines the owner
            </summary>
            <returns><see cref="T:System.Security.Principal.IdentityReference"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.SetOwner(System.Security.Principal.NTAccount)">
            <summary>
            Sets the owner
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.SetOwner(System.Security.Principal.IdentityReference)">
            <summary>
            Sets the owner
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOPathLocation">
            <summary>
            Path Location (Local, QuickIOShareInfo)
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/aa365247(VS.85).aspx</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPathLocation.Local">
            <summary>
            Represents Local Path
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPathLocation.Share">
            <summary>
            Represents Network QuickIOShareInfo
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOPathType">
            <summary>
            Path Types (Regular or UNC )
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/aa365247(VS.85).aspx</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPathType.Regular">
            <summary>
            Regular
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPathType.UNC">
            <summary>
            UNC
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOPatterns">
            <summary>
            Pattern Collection
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.PathMatchAll">
            <summary>
            Matches all. No filtering.
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.IPv6Pattern">
            <summary>
            Pattern to match IPv6
            </summary>
            <remarks>([\da-fA-F]{1,4}(\:[\da-fA-F]{1,4}){7})|(([\da-fA-F]{1,4}:){0,5}::([\da-fA-F]{1,4}:){0,5}[\da-fA-F]{1,4})</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.IPv4Pattern">
            <summary>
            Pattern to match IPv4
            </summary>
            <remarks>(((([1]?\d)?\d|2[0-4]\d|25[0-5])\.){3}(([1]?\d)?\d|2[0-4]\d|25[0-5]))</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.IPv4v6Pattern">
            <summary>
            Pattern to match IPv4 and IPv6
            </summary>
            <remarks>([\da-fA-F]{1,4}(\:[\da-fA-F]{1,4}){7})|(([\da-fA-F]{1,4}:){0,5}::([\da-fA-F]{1,4}:){0,5}[\da-fA-F]{1,4})|(((([1]?\d)?\d|2[0-4]\d|25[0-5])\.){3}(([1]?\d)?\d|2[0-4]\d|25[0-5]))</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.ServerNamePattern">
            <summary>
            Matching Server Name
            </summary>
            <remarks>[a-zA-Z0-9_]+</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.ShareNamePattern">
            <summary>
            Matching QuickIOShareInfo Name
            </summary>
            <remarks>[a-zA-Z0-9_]+</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.FolderNamePattern">
            <summary>
            Matching Folder Name
            </summary>
            <remarks>[a-zA-Z0-9_]+</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.OptionalSperatorPattern">
            <summary>
            Optional UNC Separator
            </summary>
            <remarks>\\{0,1}</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.RegularShareRootPattern">
            <summary>
            Pattern matching share root
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.RegularSharePattern">
            <summary>
            Pattern matching share path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPatterns.GetStrict(System.String)">
            <summary>
            Returns ^<paramref name="pattern"/>$
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIORecommendedValues">
            <summary>
            Various default and recommended values for different operations, connections and API calls
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIORecommendedValues.DefaultReadBufferBytes">
            <summary>
            Recommended buffer byte size for default read operations
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIORecommendedValues.TCPMaxPackageBytes">
            <summary>
            Recommended size of Byte packages for TCP connections
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIORecommendedValues.MTUMaxPackageBytes">
            <summary>
            Recommended size of Byte packages for local ethernet connections
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIORecommendedValues.SMBMaxPackageBytes">
            <summary>
            Recommended size of Byte packages for SMB connections
            </summary>
            <remarks>See http://support.microsoft.com/kb/223140</remarks>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOShare">
            <summary>
            Provides static methods to access network shares.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShare.GetDiskInformation(System.String)">
            <summary>
            Receives <see cref="T:SchwabenCode.QuickIO.QuickIODiskInformation"/> of specifies share path
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODiskInformation"/></returns>
            <remarks>See http://support.microsoft.com/kb/231497</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShare.EnumerateShares(System.String,SchwabenCode.QuickIO.QuickIOShareApiReadLevel)">
            <summary>
            Enumerate shares of specific machine. If no machine is specified, local machine is used
            </summary>
            <returns>Collection of <see cref="T:SchwabenCode.QuickIO.QuickIOShareInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOShareApiReadLevel">
            <summary>
            Read level indicator for share access
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareApiReadLevel.Admin">
            <summary>
            Requests all information and required admin privilegs
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareApiReadLevel.Normal">
            <summary>
            Default call type
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOShareInfo">
            <summary>
            Information about a local share
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShareInfo.#ctor(System.String,System.String,SchwabenCode.QuickIO.QuickIOShareType,System.String)">
            <summary>
            Called by enumeration
            </summary>
            <param name="server">Servername</param>
            <param name="shareName">Name of Share</param>
            <param name="shareType">Type of share</param>
            <param name="remark">Comment or smth</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOShareInfo.Server">
            <summary>
            The name of the computer that this share belongs to
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOShareInfo.ShareName">
            <summary>
            QuickIOShareInfo name
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOShareInfo.ShareType">
            <summary>
            QuickIOShareInfo type
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOShareInfo.Remark">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOShareInfo.IsFileSystem">
            <summary>
            Returns true if this is a file system share
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShareInfo.ToString">
            <summary>
            Returns the path to this share
            </summary>
            <returns></returns>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareInfo._fullName">
            <summary>
            Returns the path in regular format (\\server\share\)
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShareInfo.GetDiskInformation">
            <summary>
            Returns <see cref="T:SchwabenCode.QuickIO.QuickIODiskInformation"/> of this instance.
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODiskInformation"/></returns>
            <remarks>Only supported for <see cref="F:SchwabenCode.QuickIO.QuickIOShareType.Disk"/></remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnsupportedShareTypeException">Metadata not supported for this Sharetype. Only available for <see cref="F:SchwabenCode.QuickIO.QuickIOShareType.Disk"/></exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShareInfo.AsDirectoryInfo">
            <summary>
            Returns a <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/> of the current path of this file
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOShareType">
            <summary>
            Enum collection of available shares types
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareType.Disk">
            <summary>
            Disk or network share share
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareType.Printer">
            <summary>
            Printer share
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareType.Device">
            <summary>
            Device share
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareType.IPC">
            <summary>
            IPC share</summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareType.Special">
            <summary>
            Special share
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob">
            <summary>
            Interface for transfer jobs
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob.Token">
            <summary>
            Cancellation Token
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob.Observer">
            <summary>
            Observer for Condition Monitoring
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob.CurrentRetryCount">
            <summary>
            Retry count before firing broken exception
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob.PriorityLevel">
            <summary>
            Prority level. Higher priority = higher value. 0 = default
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob.Run">
            <summary>
            Run implementation
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.IQuickIOTransferJobContract">
            <summary>
            Contract for <see cref="T:SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob"/>
            </summary>  
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver">
            <summary>
            Implementation requirements for central observer.
            </summary>
            <remarks>See <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver"/> for custom observer implementation example.</remarks>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.DirectoryCreating">
            <summary>
            This event is raised before an upcoming directory creation operation is performed
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.DirectoryCreated">
            <summary>
            This event is raised when a directory was created
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.DirectoryCreationError">
            <summary>
            This event is raised if directory creation operation fails
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnDirectoryCreating(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatingEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.DirectoryCreating"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnDirectoryCreated(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.DirectoryCreated"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnDirectoryCreationError(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationErrorEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.DirectoryCreationError"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.FileCreationError">
            <summary>
            This event is raised if file creation fails
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.FileCreationStarted">
            <summary>
            This event is triggered at the beginning of the file copy operation.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.FileCreationFinished">
            <summary>
            This event is raised at the end of the file copy operation.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.FileCreationProgress">
            <summary>
            This event is raised at the end of the file copy operation.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnFileCreationError(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationErrorEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCreationError"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnFileCreationProgress(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCreationProgress"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnFileCreationStarted(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationStartedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCreationStarted"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnFileCreationFinished(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCreationFinished"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.FileCopyError">
            <summary>
            This event is raised if file copy operation fails
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.FileCopyProgress">
            <summary>
            This event is raised during a copy of a file. It provides current information such as progress, speed and estimated time.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.FileCopyStarted">
            <summary>
            This event is triggered at the beginning of the file copy operation.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.FileCopyFinished">
            <summary>
            This event is raised at the end of the file copy operation.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnFileCopyError(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyErrorEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.FileCopyError"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnFileCopyProgress(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyProgress"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnFileCopyStarted(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyStartedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyStarted"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnFileCopyFinished(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyFinished"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.CompletedAddingRequested">
            <summary>
            This event is raised if the service has been made known that no new elements will be added.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.CancellationRequested">
            <summary>
            This event is raised if the service has been made known that he should cancel the processing
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnCompletedAddingRequested(System.EventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.CompletedAddingRequested"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnCancellationRequested(System.EventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.CancellationRequested"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.WorkerIsWaiting">
            <summary>
            This event is raised when a processing thread is waiting for new items
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.WorkerWokeUp">
            <summary>
            This event is raised when a processing thread, which so far has been waiting for, was notified of a new item in the queue.
            It may be that he gets no element from the queue, because another thread was faster. He would sleep lie down again, if no more items available.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.WorkerPickedJob">
            <summary>
            This event is raised when a processing thread has taken a new item from the queue 
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.WorkerCreated">
            <summary>
            This event is raised when a new processing thread was created
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.WorkerStarted">
            <summary>
            This event is raised when a processing thread started
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.WorkerShutdown">
            <summary>
            This event is raised when a processing thread was shutdown
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnWorkerWokeUp(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerWokeUpEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerWokeUp"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnWorkerIsWaiting(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerIsSleepingEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerPickedJob"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnWorkerPickedJob(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerPickedJobEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerPickedJob"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnWorkerCreated(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerCreatedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerCreated"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnWorkerStarted(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerStartedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerStarted"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnWorkerShutdown(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerShutdownEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerShutdown"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.JobRun">
            <summary>
            This event is raised when <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Run"/> is called
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.JobError">
            <summary>
            This event is triggered if <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Run"/> has an error
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.JobEnd">
            <summary>
            This event is raised at the end <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Run"/>
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.JobEnqueued">
            <summary>
            This event is raised if the job of a queue has been added.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.JobDequeued">
            <summary>
            This event is raised if the job was taken from of a queue.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.JobRequeued">
            <summary>
            This event is raised if the job was re-added to a queue.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.JobRetryMaxReached">
            <summary>
            This event is raised if the max retry count is reached.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnJobRun(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRunEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobRun"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnJobError(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobErrorEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobError"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnJobEnd(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEndEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobEnd"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnJobEnqueued(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEnqueuedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobEnqueued"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnJobDequeued(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobDequeuedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobDequeued"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnJobRequeued(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRequeuedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.JobRequeued"/>
            </summary>      
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver.OnJobRetryMaxReached(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobReatryMaxReachedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobRetryMaxReached"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract">
            <summary>
            Contract implementation
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnDirectoryCreating(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatingEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnDirectoryCreated(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatedEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnDirectoryCreationError(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationErrorEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnFileCreationProgress(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnFileCreationStarted(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationStartedEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnFileCreationFinished(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnFileCopyProgress(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnFileCopyStarted(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyStartedEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnFileCopyFinished(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnCompletedAddingRequested(System.EventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnCancellationRequested(System.EventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnWorkerIsWaiting(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerIsSleepingEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnWorkerCreated(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerCreatedEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnWorkerStarted(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerStartedEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnWorkerShutdown(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerShutdownEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnJobError(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobErrorEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnJobEnd(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEndEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnJobEnqueued(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEnqueuedEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnJobDequeued(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobDequeuedEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnJobRequeued(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRequeuedEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserverContract.OnJobRetryMaxReached(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobReatryMaxReachedEventArgs)">
            <summary>
            Contract implementation
            </summary>
            <param name="args">Cannot be null</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.IQuickIOTransferWriteJob">
            <summary>
            Implements <see cref="T:SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob"/> with Overwrite option
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.IQuickIOTransferWriteJob.MaxBufferSize">
            <summary>
            Max Buffer Size for Transfer
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.IQuickIOTransferWriteJob.ParentExistanceCheck">
            <summary>
            True to check parent folder existance. False is much faster, but you have to be sure that the parent exists.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.IQuickIOTransferWriteJob.Overwrite">
            <summary>
            true to overwrite existing element
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.IQuickIOTransferWriteJobContract">
            <summary>
            Contract implementation
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferBackgroundService">
            <summary>
            Instance for the continuous transfer of files; for example as a service.
            </summary>
            <example>
            Sort incoming files by an always watching file service
            
            <code>
            <![CDATA[
            class Program
            {
                const string dropDirectory = @"C:\transfer_test\dropfolder";
                const string pictureFolder = @"C:\transfer_test\pictures";
                const string movieFolder = @"C:\transfer_test\movies";
            
            
                protected static QuickIOTransferBackgroundService TransferBackgroundService = new QuickIOTransferBackgroundService( workerCount: 2, maxFileRetry: 5 );
                protected static FileSystemWatcher PictureWatcher = new FileSystemWatcher( dropDirectory, "*.png" );
                protected static FileSystemWatcher MovieWatcher = new FileSystemWatcher( dropDirectory, "*.mp4" );
            
                static void Main( string[ ] args )
                {
                    PictureWatcher.Created += OnCreated_Picture;
                    MovieWatcher.Created += OnCreated_MovieFile;
            
                    TransferBackgroundService.Enqueued += OnJobEnqueued;
                    TransferBackgroundService.Dequeued += OnJobDequeued;
                    TransferBackgroundService.Requeued += JobRequeued;
                    TransferBackgroundService.WorkerPickedJob += OnServiceWorkerPickedJob;
            
                    TransferBackgroundService.WorkerCreated += OnServiceWorkerCreated;
                    TransferBackgroundService.WorkerStarted += OnServiceWorkerStarted;
                    TransferBackgroundService.WorkerPickedJob += OnServiceWorkerPickedJob;
            
                    TransferBackgroundService.Started += OnFileCopyStarted;
                    TransferBackgroundService.Progress += OnFileCopyProgress;
                    TransferBackgroundService.Finished += OnFileCopyFinished;
            
                    TransferBackgroundService.StartWorking( );
            
                    Console.WriteLine( "Service is running." );
                    Console.ReadKey( );
            
                    // Ends on key input
                }
            
                /// <summary>
                /// worker started
                /// </summary>
                private static void OnServiceWorkerStarted( object sender, QuickIOTransferWorkerStartedEventArgs e )
                {
                    Console.WriteLine( "[!] Worker Started. ID: " + e.WorkerID );
                }
            
                /// <summary>
                /// new worker
                /// </summary>
                static void OnServiceWorkerCreated( object sender, QuickIOTransferWorkerCreatedEventArgs e )
                {
                    Console.WriteLine( "[!] New Worker. ID: " + e.WorkerID );
                }
            
                /// <summary>
                /// worker catched a job
                /// </summary>
                static void OnServiceWorkerPickedJob( object sender, QuickIOTransferWorkerPickedJobEventArgs e )
                {
                    Console.WriteLine( "[!] Worker ID# " + e.WorkerID + " picked job: " + e.GetType( ) );
                }
            
                /// <summary>
                /// job was broken by an exception, but requred
                /// </summary>
                static void JobRequeued( object sender, QuickIOTransferJobRequeuedArgs e )
                {
                    Console.WriteLine( "[JOB REQUEUED] Try: #" + e.Job.CurrentRetryCount + " - " + e.Job.GetType( ) + " failed: " + e.Exception.Message );
                }
            
                /// <summary>
                /// Report of job was taken from queue
                /// </summary>
                static void OnJobDequeued( object sender, QuickIOTransferJobDequeuedArgs e )
                {
                    Console.WriteLine( "[JOB DEQUEUED] " + e.Job.GetType( ) );
                }
            
                /// <summary>
                /// Report for new jobs
                /// </summary>
                static void OnJobEnqueued( object sender, QuickIOTransferJobEnqueuedArgs e )
                {
                    Console.WriteLine( "[NEW JOB] " + e.Job.GetType( ) );
                }
            
                /// <summary>
                /// Progress Report
                /// </summary>
                static void OnFileCopyStarted( object sender, QuickIOTransferFileCopyStartedArgs args )
                {
                    Console.WriteLine( ">>>>>> STARTED " + args.SourcePath + " to " + args.TargetPath );
                }
            
                /// <summary>
                /// Progress Report
                /// </summary>
                static void OnFileCopyFinished( object sender, QuickIOTransferFileCopyFinishedArgs args )
                {
                    Console.WriteLine( ">>>>>> FINISHED " + args.SourcePath + " to " + args.TargetPath + " - MB/s: " + ( args.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                }
                /// <summary>
                /// Progress Report
                /// </summary>
                static void OnFileCopyProgress( object sender, QuickIOTransferFileCopyProgressArgs args )
                {
                    Console.WriteLine( "Transfering " + args.SourcePath + " to " + args.TargetPath + " - %: " + args.Percentage + " MB/s: " + ( args.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                }
            
                /// <summary>
                /// Copy movie file from drop folder to internal movie folder
                /// </summary>
                static void OnCreated_MovieFile( object sender, FileSystemEventArgs e )
                {
                    var queueItem = new QuickIOTransferFileCopyJob( e.FullPath, movieFolder, overwrite: true );
                    TransferBackgroundService.Add( queueItem );
                }
            
                /// <summary>
                /// Copy picture file from drop folder to internal picture folder
                /// </summary>
                static void OnCreated_Picture( object sender, FileSystemEventArgs e )
                {
                    var queueItem = new QuickIOTransferFileCopyJob( e.FullPath, pictureFolder, overwrite: true, parentExistanceCheck: false );
                    TransferBackgroundService.Add( queueItem );
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferBackgroundService.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates an instance for <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferBackgroundService"/> with default observer
            </summary>
            <param name="workerCount"></param>
            <param name="maxFileRetry"></param>
            <param name="autostart">true to auto start. false to start service by using <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.StartWorking"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferBackgroundService.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates an instance for <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferBackgroundService"/> with specified observer
            </summary>
            <param name="observer">Observer for monitoring</param>
            <param name="workerCount"></param>
            <param name="maxFileRetry"></param>
            <param name="autostart">true to auto start. false to start service by using <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.StartWorking"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferBackgroundService.Start">
            <summary>
            Starts the service if not started yet
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferBackgroundService.Add(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob)">
            <summary>
            Adds an item to the queue. null will not be insered and returns false.
            If <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.CompleteAdding"/> is called the return value is false, too
            </summary>
            <param name="queueItem">Item to add</param>
            <returns>true on add; false if not</returns>
            <exception cref="T:System.OperationCanceledException">Queue is already cancelled.</exception>
            <exception cref="T:System.OperationCanceledException">Adding is completed.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferBackgroundService.AddWorker(System.Int32)">
            <summary>
            Adds a new worker to the service. Worker will be created and started instantly.
            </summary>
            <param name="count">Must be 1 or greater</param>
            <remarks>It's not recommended to use more workers than the count of useable CPU cores.</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferBackgroundService.RemoveWorker(System.Int32)">
            <summary>
            Remove workers from the service.
            </summary>
            <param name="count">Must be 1 or greater</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferBackgroundService.WaitForFinish">
            <summary>
            Joins all threads and blocks until all threads and queue items are completed.
            Queue has to be completed.
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService">
            <summary>
            Copy directory with progress monitoring
            </summary>
            <example>
            Copy complete directory
            <code>
            <![CDATA[
            static void Main( string[ ] args )
            {
                const string sourceDirectory = @"C:\transfer_test\source";
                const string targetDirectory = @"C:\transfer_test\to";
            
            
                // With observer
                IQuickIOTransferObserver observer = new QuickIOTransferObserver( );
                var service = new QuickIOTransferDirectoryCopyService( observer, new QuickIODirectoryInfo( sourceDirectory ), targetDirectory, threadCount: 1, retryCount: 3, searchOption: SearchOption.AllDirectories, overwrite: true );
                // or without overload, to use default internal observer
                // var service = new QuickIOTransferDirectoryCopyService( new QuickIODirectoryInfo( sourceDirectory ), targetDirectory, threadCount: 1, retryCount: 3, searchOption: SearchOption.AllDirectories, overwrite: true );
            
                //  Progress information
                service.Observer.DirectoryCreationError += ObserverOnDirectoryCreationError;
                service.Observer.FileCopyStarted += OnFileCopyStarted;
                service.Observer.FileCopyProgress += OnFileCopyProgress;
                service.Observer.FileCopyFinished += OnFileCopyFinished;
                service.Observer.FileCopyError += ObserverOnFileCopyError;
                // Same as (observer events are called first!):
                service.FileCopyStarted += OnFileCopyStarted;
                service.FileCopyProgress += OnFileCopyProgress;
                service.FileCopyFinished += OnFileCopyFinished;
                service.FileCopyError += ObserverOnFileCopyError;
            
                // Start progress
                service.Start( ); // Blocks thread until finished
            
                Console.WriteLine( "Finished" );
                Console.ReadKey( );
            }
            
            private static void ObserverOnDirectoryCreationError( object sender, QuickIOTransferDirectoryCreationErrorEventArgs e )
            {
                Console.WriteLine( "Error: Dir create '" + e.TargetPath + "' failed: " + e.Exception.Message );
            }
            
            private static void ObserverOnFileCopyError( object sender, QuickIOTransferFileCopyErrorEventArgs e )
            {
                Console.WriteLine( "Error: " + e.SourcePath + " to " + e.TargetPath + ": " + e.Exception.Message );
            }
            
            private static void OnFileCopyStarted( object sender, QuickIOTransferFileCopyStartedEventArgs e )
            {
                Console.WriteLine( "Started: " + e.SourcePath + " to " + e.TargetPath + " (Bytes: " + e.TotalBytes + ")" );
            }
            
            private static void OnFileCopyFinished( object sender, QuickIOTransferFileCopyFinishedEventArgs e )
            {
                Console.WriteLine( "Finished: " + e.SourcePath + " - MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
            }
            
            private static void OnFileCopyProgress( object sender, QuickIOTransferFileCopyProgressEventArgs e )
            {
                Console.WriteLine( "Progress: " + e.SourcePath + " - %: " + e.Percentage + " MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.SourceDirectoryInfo">
            <summary>
            Directory to copy
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.TargetFullName">
            <summary>
            Target fullname
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.SearchOption">
            <summary>
            Deepth to copy
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.Overwrite">
            <summary>
            true to overwrite existing content
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.#ctor(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.Int32,System.Int32,System.IO.SearchOption,System.Boolean)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService"/> with default observer
            </summary>
            <param name="sourceDirectoryInfo">Directory to copy</param>
            <param name="targetFullName">Target fullname</param>
            <param name="threadCount">Copy Worker Counts. Use 1 on local systems. Use >2 with SMB shares</param>
            <param name="retryCount">Count of retries before copy is broken</param>
            <param name="searchOption"><see cref="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.SearchOption"/>of deepth to copy</param>
            <param name="overwrite">true to overwrite existing files</param>
            <example>
            Copy complete directory
            <code>
            <![CDATA[
            static void Main( string[ ] args )
            {
                const string sourceDirectory = @"C:\transfer_test\source";
                const string targetDirectory = @"C:\transfer_test\to";
            
            
                // With observer
                IQuickIOTransferObserver observer = new QuickIOTransferObserver( );
                var service = new QuickIOTransferDirectoryCopyService( observer, new QuickIODirectoryInfo( sourceDirectory ), targetDirectory, threadCount: 1, retryCount: 3, searchOption: SearchOption.AllDirectories, overwrite: true );
                // or without overload, to use default internal observer
                // var service = new QuickIOTransferDirectoryCopyService( new QuickIODirectoryInfo( sourceDirectory ), targetDirectory, threadCount: 1, retryCount: 3, searchOption: SearchOption.AllDirectories, overwrite: true );
            
                //  Progress information
                service.Observer.DirectoryCreationError += ObserverOnDirectoryCreationError;
                service.Observer.FileCopyStarted += OnFileCopyStarted;
                service.Observer.FileCopyProgress += OnFileCopyProgress;
                service.Observer.FileCopyFinished += OnFileCopyFinished;
                service.Observer.FileCopyError += ObserverOnFileCopyError;
                // Same as (observer events are called first!):
                service.FileCopyStarted += OnFileCopyStarted;
                service.FileCopyProgress += OnFileCopyProgress;
                service.FileCopyFinished += OnFileCopyFinished;
                service.FileCopyError += ObserverOnFileCopyError;
            
                // Start progress
                service.Start( ); // Blocks thread until finished
            
                Console.WriteLine( "Finished" );
                Console.ReadKey( );
            }
            
            private static void ObserverOnDirectoryCreationError( object sender, QuickIOTransferDirectoryCreationErrorEventArgs e )
            {
                Console.WriteLine( "Error: Dir create '" + e.TargetPath + "' failed: " + e.Exception.Message );
            }
            
            private static void ObserverOnFileCopyError( object sender, QuickIOTransferFileCopyErrorEventArgs e )
            {
                Console.WriteLine( "Error: " + e.SourcePath + " to " + e.TargetPath + ": " + e.Exception.Message );
            }
            
            private static void OnFileCopyStarted( object sender, QuickIOTransferFileCopyStartedEventArgs e )
            {
                Console.WriteLine( "Started: " + e.SourcePath + " to " + e.TargetPath + " (Bytes: " + e.TotalBytes + ")" );
            }
            
            private static void OnFileCopyFinished( object sender, QuickIOTransferFileCopyFinishedEventArgs e )
            {
                Console.WriteLine( "Finished: " + e.SourcePath + " - MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
            }
            
            private static void OnFileCopyProgress( object sender, QuickIOTransferFileCopyProgressEventArgs e )
            {
                Console.WriteLine( "Progress: " + e.SourcePath + " - %: " + e.Percentage + " MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver,SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.Int32,System.Int32,System.IO.SearchOption,System.Boolean)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService"/> with specified observer
            </summary>
            <param name="observer">Observer</param>
            <param name="sourceDirectoryInfo">Directory to copy</param>
            <param name="targetFullName">Target fullname</param>
            <param name="threadCount">Copy Worker Counts. Use 1 on local systems. Use >2 with SMB shares</param>
            <param name="retryCount">Count of retries before copy is broken</param>
            <param name="searchOption"><see cref="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.SearchOption"/>of deepth to copy</param>
            <param name="overwrite">true to overwrite existing files</param>
            <example>
            Copy complete directory
            <code>
            <![CDATA[
            static void Main( string[ ] args )
            {
                const string sourceDirectory = @"C:\transfer_test\source";
                const string targetDirectory = @"C:\transfer_test\to";
            
            
                // With observer
                IQuickIOTransferObserver observer = new QuickIOTransferObserver( );
                var service = new QuickIOTransferDirectoryCopyService( observer, new QuickIODirectoryInfo( sourceDirectory ), targetDirectory, threadCount: 1, retryCount: 3, searchOption: SearchOption.AllDirectories, overwrite: true );
                // or without overload, to use default internal observer
                // var service = new QuickIOTransferDirectoryCopyService( new QuickIODirectoryInfo( sourceDirectory ), targetDirectory, threadCount: 1, retryCount: 3, searchOption: SearchOption.AllDirectories, overwrite: true );
            
                //  Progress information
                service.Observer.DirectoryCreationError += ObserverOnDirectoryCreationError;
                service.Observer.FileCopyStarted += OnFileCopyStarted;
                service.Observer.FileCopyProgress += OnFileCopyProgress;
                service.Observer.FileCopyFinished += OnFileCopyFinished;
                service.Observer.FileCopyError += ObserverOnFileCopyError;
                // Same as (observer events are called first!):
                service.FileCopyStarted += OnFileCopyStarted;
                service.FileCopyProgress += OnFileCopyProgress;
                service.FileCopyFinished += OnFileCopyFinished;
                service.FileCopyError += ObserverOnFileCopyError;
            
                // Start progress
                service.Start( ); // Blocks thread until finished
            
                Console.WriteLine( "Finished" );
                Console.ReadKey( );
            }
            
            private static void ObserverOnDirectoryCreationError( object sender, QuickIOTransferDirectoryCreationErrorEventArgs e )
            {
                Console.WriteLine( "Error: Dir create '" + e.TargetPath + "' failed: " + e.Exception.Message );
            }
            
            private static void ObserverOnFileCopyError( object sender, QuickIOTransferFileCopyErrorEventArgs e )
            {
                Console.WriteLine( "Error: " + e.SourcePath + " to " + e.TargetPath + ": " + e.Exception.Message );
            }
            
            private static void OnFileCopyStarted( object sender, QuickIOTransferFileCopyStartedEventArgs e )
            {
                Console.WriteLine( "Started: " + e.SourcePath + " to " + e.TargetPath + " (Bytes: " + e.TotalBytes + ")" );
            }
            
            private static void OnFileCopyFinished( object sender, QuickIOTransferFileCopyFinishedEventArgs e )
            {
                Console.WriteLine( "Finished: " + e.SourcePath + " - MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
            }
            
            private static void OnFileCopyProgress( object sender, QuickIOTransferFileCopyProgressEventArgs e )
            {
                Console.WriteLine( "Progress: " + e.SourcePath + " - %: " + e.Percentage + " MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService._running">
            <summary>
            thread safe indicator if copy is running
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.IsRunning">
            <summary>
            true if copy process is running
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.Start">
            <summary>
            Starts the copy process.
            First it determines all content information of source. Then the target directory structure will be created before transfer begins
            </summary>
            <exception cref="T:SchwabenCode.QuickIO.QuickIOTransferAlreadyRunningException">If already running.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.RegisterInternalEventHandling">
            <summary>
            Copy events from observer to current instance
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.DirectoryCreationError">
            <summary>
            This event is raised if directory creation operation fails
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.DirectoryCreating">
            <summary>
            This event is raised before an upcoming directory creation operation is performed
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.DirectoryCreated">
            <summary>
            This event is raised when a directory was created
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.OnDirectoryCreationError(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationErrorEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.DirectoryCreationError"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.OnDirectoryCreating(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatingEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.DirectoryCreating"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.OnDirectoryCreated(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.DirectoryCreated"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.FileCopyError">
            <summary>
            This event is raised if file copy operation fails
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.FileCopyProgress">
            <summary>
            This event is raised during a copy of a file. It provides current information such as progress, speed and estimated time.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.FileCopyStarted">
            <summary>
            This event is triggered at the beginning of the file copy operation.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.FileCopyFinished">
            <summary>
            This event is raised at the end of the file copy operation.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.OnFileCopyError(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyErrorEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.FileCopyError"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.OnFileCopyProgress(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.FileCopyProgress"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.OnFileCopyStarted(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyStartedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.FileCopyStarted"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.OnFileCopyFinished(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService.FileCopyFinished"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatedEventArgs">
            <summary>
            Contains information after a directory create operation was performed
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatedEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatedEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="targetPath">Directory fullname that was created</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatedEventArgs.TargetPath">
            <summary>
            Target path
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatingEventArgs">
            <summary>
            Contains information of an upcoming directory creation operation
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatingEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatingEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="targetPath">Directory fullname to create</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatingEventArgs.TargetPath">
            <summary>
            Target file path
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationErrorEventArgs">
            <summary>
            Contains further information when a directory creation process fails
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationErrorEventArgs.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationErrorEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String,System.Exception)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyErrorEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="target">Target path</param>
            <param name="e">Exception</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob">
            <summary>
            Job for creating directories
            </summary>
            <example>
            Directory Creation job with observer
            <code>
            <![CDATA[
            public void CreateJobWithObserver( IQuickIOTransferObserver observer, String path)
            {
                var createJob = new QuickIOTransferDirectoryCreationJob( observer, path );
            
                createJob.DirectoryCreating += OnDirectoryCreating;
                createJob.DirectoryCreated += OnDirectoryCreated;
            
                createJob.Run( );
            }
            ]]>
            </code>
            
            Directory Creation job
            <code>
            <![CDATA[
            public void CreateJob( String path )
            {
                var createJob = new QuickIOTransferDirectoryCreationJob( path );
            
                createJob.DirectoryCreating += OnDirectoryCreating;
                createJob.DirectoryCreated += OnDirectoryCreated;
            
                createJob.Run( );
            }
            ]]>
            </code>
            
            Event definitions for this example
            <code>
            <![CDATA[
            private static void OnDirectoryCreating( object sender, QuickIOTransferDirectoryCreatingArgs e )
            {
                Console.WriteLine( "TestDirectoryCreationJob: Creation started." );
            }
            
            
            private static void OnDirectoryCreated( object sender, QuickIOTransferDirectoryCreatedArgs e )
            {
                Console.WriteLine( "TestDirectoryCreationJob: Creation finished." );
            }
            ]]>
            </code>
            
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.Implementation">
            <summary>
            Creates the directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.DirectoryToCreatePath">
            <summary>
            Directory fullname to create
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Job for creating directories with default observer
            </summary>
            <param name="directoryToCreatePath">Directory fullname to create</param>
            <param name="overwrite">true to overwrite</param>
            <param name="prorityLevel">Priority level of directory creation should be higher than file creation without parent check</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver,System.String,System.Boolean,System.Int32)">
            <summary>
            Job for creating directories with default observer
            </summary>
            <param name="observer">Observer</param>
            <param name="directoryToCreatePath">Directory fullname to create</param>
            <param name="overwrite">true to overwrite</param>
            <param name="prorityLevel">Priority level of directory creation should be higher than file creation without parent check</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.Error">
            <summary>
            This event is raised if directory creation operation fails
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.DirectoryCreating">
            <summary>
            This event is raised before an upcoming directory creation operation is performed
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.DirectoryCreated">
            <summary>
            This event is raised when a directory was created
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.OnDirectoryCreating">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.DirectoryCreating"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.OnDirectoryCreated">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.DirectoryCreated"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.OnError(System.Exception)">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.Error"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.OnDirectoryCreating(System.String)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.DirectoryCreating"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.OnDirectoryCreated(System.String)">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationJob.DirectoryCreated"/>
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRunHandler">
            <summary>
            This event is raised when a job runs
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRunEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobErrorHandler">
            <summary>
            This event is raised when a job got an error
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRunEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEndHandler">
            <summary>
            This event is raised when a job ends
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRunEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEnqueuedHandler">
            <summary>
            This event is raised when a new job to the queue is added to
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEnqueuedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobDequeuedHandler">
            <summary>
            This event is raised when a job was taken from the queue
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobDequeuedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferUnknownJobHandler">
            <summary>
            This event is raised when a job was taken from the queue, whose type is unknown. This job can not be processed and will be discarded.
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEnqueuedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRequeuedHandler">
            <summary>
            This event is raised when a job triggered an error during processing. It will be re-added to the queue.
            It will be re-added to the queue if the maximum number of attempts <see>
                    <cref>MaxJobRetryAttempts</cref>
                </see>
                is not reached.
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRequeuedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRetryMaxReachedHandler">
            <summary>
            Max <see>
                    <cref>MaxJobRetryAttempts</cref>
                </see>
                of a job reached
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobReatryMaxReachedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressHandler">
            <summary>
            This event is raised during a Creation of a file. It provides current information such as progress, speed and estimated time.
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationErrorHandler">
            <summary>
            This event is raised if a file creation fails
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationErrorEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationStartedHandler">
            <summary>
            This event is triggered at the beginning of the file Creation operation.
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationStartedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedHandler">
            <summary>
            This event is raised at the end of the file Creation operation.
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressHandler">
            <summary>
            This event is raised during a copy of a file. It provides current information such as progress, speed and estimated time.
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyErrorHandler">
            <summary>
            This event is raised if a file copy fails
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationErrorEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyStartedHandler">
            <summary>
            This event is triggered at the beginning of the file copy operation.
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyStartedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedHandler">
            <summary>
            This event is raised at the end of the file copy operation.
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationErrorHandler">
            <summary>
            This event is raised if a directoy creation fails
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationErrorEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatingHandler">
            <summary>
            This event is raised before an upcoming directory creation operation is performed
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatingEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatedHandler">
            <summary>
            This event is raised when a directory was created
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferCompletedAddingRequestedHandler">
            <summary>
            This event is raised if the service has been made known that no new elements will be added.
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferCancellationRequestedHandler">
            <summary>
            This event is raised if the service has been made known that he should cancel the processing
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerIsWaitingHandler">
            <summary>
            This event is raised when a processing thread is waiting for new items
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerIsSleepingEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerWokeUpHandler">
            <summary>
            This event is raised when a processing thread, which so far has been waiting for, was notified of a new item in the queue.
            It may be that he gets no element from the queue, because another thread was faster. He would sleep lie down again, if no more items available.
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerWokeUpEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerPickedJobHandler">
            <summary>
            This event is raised when a processing thread has taken a new item from the queue 
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerPickedJobEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerCreatedHandler">
            <summary>
            This event is raised when a new processing thread was created
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerCreatedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerStartedHandler">
            <summary>
            This event is raised when a processing thread started
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerStartedEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerShutdownHandler">
            <summary>
            This event is raised when a processing thread was shutdown
            </summary>
            <param name="sender">Transfer Service or Job</param>
            <param name="e">Provides further event information. <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerShutdownEventArgs"/></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyErrorEventArgs">
            <summary>
            Contains further information when a file copy process fails
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyErrorEventArgs.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyErrorEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String,System.String,System.Exception)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyErrorEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="source">Source file path</param>
            <param name="target">Target file path</param>
            <param name="e">Exception</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs">
            <summary>
            Contains information when a file copy operation has been finished successfully
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs.TransferFinished">
            <summary>
            Estimated Timestamp when transfer is finished
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs.Duration">
            <summary>
            Live transfer duration
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs.BytesPerSecond">
            <summary>
            Live bytes per second
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs.TotalBytes">
            <summary>
            Total bytes of file
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs.TransferStarted">
            <summary>
            Time transfer of file started
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String,System.String,System.Int64,System.DateTime)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="sourcePath">Source file path</param>
            <param name="targetPath">Target file path</param>
            <param name="totalBytes">Total bytes to transfer</param>
            <param name="transferStarted"></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob">
            <summary>
            File Copy job implementation
            </summary>
            <example>
            File Copy job with observer
            <code>
            <![CDATA[
            public void CopyJobWithObserver( IQuickIOTransferObserver observer, String sourceFile, String targetDirectory, Int32 maxBufferSize )
            {
                var copyJob = new QuickIOTransferFileCopyJob( observer, sourceFile, targetDirectory, maxBufferSize, overwrite: true, parentExistanceCheck: true );
            
                copyJob.CopyStarted += OnCopyStarted;
                copyJob.CopyProgress += OnCopyProgress;
                copyJob.CopyFinished += OnFileCopyFinished;
            
                copyJob.Run( );
            }
            ]]>
            </code>
            
            File copy job
            <code>
            <![CDATA[
            public void CopyJob( String sourceFile, String targetDirectory, Int32 maxBufferSize )
            {
                var copyJob = new QuickIOTransferFileCopyJob( sourceFile, targetDirectory, maxBufferSize, overwrite: true, parentExistanceCheck: true );
            
                copyJob.CopyStarted += OnCopyStarted;
                copyJob.CopyProgress += OnCopyProgress;
                copyJob.CopyFinished += OnFileCopyFinished;
            
                copyJob.Run( );
            }
            ]]>
            </code>
            
            Event definitions for this example
            <code>
            <![CDATA[
            private static void OnFileCopyFinished( object sender, QuickIOTransferFileCopyFinishedArgs e )
            {
                Console.WriteLine( "TestFileCopyJob: Copy Finished." );
            }
            
            private static void OnCopyProgress( object sender, QuickIOTransferFileCopyProgressArgs e )
            {
                Console.WriteLine( "TestFileCopyJob: Copy progresss: " + e.Percentage.ToString( "0.00" ) );
            }
            
            private static void OnCopyStarted( object sender, QuickIOTransferFileCopyStartedArgs e )
            {
                Console.WriteLine( "TestFileCopyJob: Copy started." );
            }
            ]]>
            </code>
            
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.Implementation">
            <summary>
            Executes the Copy process
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.Source">
            <summary>
            Fullname source
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.Target">
            <summary>
            Fullname target
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new queue item
            </summary>
            <param name="source">Fullname source</param>
            <param name="target">Fullname target</param>
            <param name="maxBufferSize">Set max buffer size for copy transfer</param>
            <param name="overwrite">true overwrites existing files</param>
            <param name="parentExistanceCheck">true to verify parent existance</param>
            <param name="prorityLevel">Priority level of directory creation should be higher than file creation without parent check</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new queue item
            </summary>
            <param name="observer">Observer</param>
            <param name="source">Fullname source</param>
            <param name="target">Fullname target</param>
            <param name="maxBufferSize">Set max buffer size for copy transfer</param>
            <param name="overwrite">true overwrites existing files</param>
            <param name="parentExistanceCheck">true to verify parent existance</param>
            <param name="prorityLevel">Priority level of directory creation should be higher than file creation without parent check</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.TransferStarted">
            <summary>
            Transfer started
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.CopyTimestamps">
            <summary>
            true to copy all datetime information such as CreationTime, LastAccessTime and LastWriteTime.<br/>
            Default: false
            </summary>
            <remarks>Will reduce the processing speed, because a single physical access is required for each setting.</remarks>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.CopyAttributes">
            <summary>
            true to copy attribute information.<br/>
            Default: false
            </summary>
            <remarks>Will reduce the processing speed, because a single physical access is required for each setting.</remarks>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.Progress">
            <summary>
            This event is raised during a copy of a file. It provides current information such as progress, speed and estimated time.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.Started">
            <summary>
            This event is triggered at the beginning of the file copy operation.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.Error">
            <summary>
            This event is raised if file copy operation fails
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.Finished">
            <summary>
            This event is raised at the end of the file copy operation.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.DirectoryCreating">
            <summary>
            This event is raised before an upcoming directory creation operation is performed
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.DirectoryCreated">
            <summary>
            This event is raised when a directory was created
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.OnCopyProgress(System.Int64,System.UInt64)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.Progress"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.OnError(System.Exception)">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.Error"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.OnCopyStarted(System.Int64)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.Started"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.OnCopyFinished(System.Int64)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.Finished"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.OnDirectoryCreating(System.String)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.DirectoryCreating"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.OnDirectoryCreated(System.String)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyJob.DirectoryCreated"/>
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs">
            <summary>
            Live progress information during file transfer.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs.BytesTransfered">
            <summary>
            Total bytes of file transfered
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs.ProgressTimestamp">
            <summary>
            Time the progress event was fired
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs.EstimatedFinishTimestamp">
            <summary>
            Estimated Timestamp when transfer is finished
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs.EstimatedDuration">
            <summary>
            Estimated Duration
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs.Percentage">
            <summary>
            Total percentage
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs.Duration">
            <summary>
            Live transfer duration
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs.BytesPerSecond">
            <summary>
            Live bytes per second
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs.TotalBytes">
            <summary>
            Total bytes of file
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs.TransferStartedTimestamp">
            <summary>
            Time transfer of file started
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String,System.String,System.Int64,System.UInt64,System.DateTime)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="sourcePath">Source file path</param>
            <param name="targetPath">Target file path</param>
            <param name="totalBytes">Total bytes to transfer</param>
            <param name="bytesTransfered">Total bytes transfered</param>
            <param name="transferStarted"></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService">
             <summary>
             Copy directory with progress monitoring
             </summary>
             <example>
             Copy file
             
             <code>
             <![CDATA[
             class Program
             {
                 static void Main( string[ ] args )
                 {
                     const string sourceDirectory = @"C:\transfer_test\source";
                     const string targetDirectory = @"C:\transfer_test\to";
             
                     // search files
                     var files = QuickIODirectory.EnumerateFiles( sourceDirectory, "*", SearchOption.TopDirectoryOnly );
             
                     var observer = new QuickIOTransferObserver( );
                     var service = new QuickIOTransferFileCopyService( observer, files, targetDirectory, threadCount: 1, retryCount: 3, overwrite: true );
             
                     //  Progress information
                     service.Observer.FileCopyStarted += OnFileCopyStarted;
                     service.Observer.FileCopyProgress += OnFileCopyProgress;
                     service.Observer.FileCopyFinished += OnFileCopyFinished;
                     // Same as (observer events are called first!):
                     //service.FileCopyStarted += OnFileCopyStarted;
                     //service.FileCopyProgress += OnFileCopyProgress;
                     //service.FileCopyFinished += OnFileCopyFinished;
             
                     // Start progress
                     service.Start( ); // Blocks thread until finished
             
                     Console.WriteLine( "Finished" );
                     Console.ReadKey( );
                 }
             
                 private static void OnFileCopyStarted( object sender, QuickIOTransferFileCopyStartedEventArgs e )
                 {
                     Console.WriteLine( "Started: " + e.SourcePath + " to " + e.TargetPath + " (Bytes: " + e.TotalBytes + ")" );
                 }
             
                 private static void OnFileCopyFinished( object sender, QuickIOTransferFileCopyFinishedEventArgs e )
                 {
                     Console.WriteLine( "Finished: " + e.SourcePath + " - MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                 }
             
                 private static void OnFileCopyProgress( object sender, QuickIOTransferFileCopyProgressEventArgs e )
                 {
                     Console.WriteLine( "Progress: " + e.SourcePath + " - %: " + e.Percentage + " MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                 }
             }
             ]]>
             </code>
             </example>
            <example>
             Copy collection of files
             <code>
             <![CDATA[
             class Program
             {
                 static void Main( string[ ] args )
                 {
                    const string sourceDirectory = @"C:\transfer_test\source";
                    const string targetDirectory = @"C:\transfer_test\to";
             
                    // search files
                     var files = QuickIODirectory.EnumerateFiles( sourceDirectory, "*", SearchOption.TopDirectoryOnly );
             
                    var service = new QuickIOTransferFileCopyService( files, targetDirectory, threadCount: 1, retryCount: 3, overwrite: true );
                    
                    //  Progress information
                    service.Observer.FileCopyStarted += OnFileCopyStarted;
                    service.Observer.FileCopyProgress += OnFileCopyProgress;
                    service.Observer.FileCopyFinished += OnFileCopyFinished;
                    service.Observer.FileCopyError += ObserverOnFileCopyError;
                    // Same as (observer events are called first!):
                    //service.FileCopyStarted += OnFileCopyStarted;
                    //service.FileCopyProgress += OnFileCopyProgress;
                    //service.FileCopyFinished += OnFileCopyFinished;
                    //service.FileCopyError += ObserverOnFileCopyError;
                    
                    // Start progress
                    service.Start( ); // Blocks thread until finished
                    
                    Console.WriteLine( "Finished" );
                    Console.ReadKey( );
                 }
             
                 private static void ObserverOnFileCopyError( object sender, QuickIOTransferFileCopyErrorEventArgs e )
                 {
                    Console.WriteLine( "Error: " + e.SourcePath + " to " + e.TargetPath + ": " + e.Exception.Message );
                 }
             
                 private static void OnFileCopyStarted( object sender, QuickIOTransferFileCopyStartedEventArgs e )
                 {
                    Console.WriteLine( "Started: " + e.SourcePath + " to " + e.TargetPath + " (Bytes: " + e.TotalBytes + ")" );
                 }
             
                 private static void OnFileCopyFinished( object sender, QuickIOTransferFileCopyFinishedEventArgs e )
                 {
                    Console.WriteLine( "Finished: " + e.SourcePath + " - MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                 }
             
                 private static void OnFileCopyProgress( object sender, QuickIOTransferFileCopyProgressEventArgs e )
                 {
                    Console.WriteLine( "Progress: " + e.SourcePath + " - %: " + e.Percentage + " MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                 }
             }
             ]]></code>
             </example>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.SourceFileInfos">
            <summary>
            Directory to copy
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.TargetFullName">
            <summary>
            Target fullname
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.Overwrite">
            <summary>
            true to overwrite existing content
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver,SchwabenCode.QuickIO.QuickIOFileInfo,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService"/>
            </summary>
            <param name="observer">Observer for monitoring</param>
            <param name="sourceFileInfo">File to copy</param>
            <param name="targetFullName">Target fullname</param>
            <param name="threadCount">Copy Worker Counts. Use 1 on local systems. Use >2 with SMB shares</param>
            <param name="retryCount">Count of retries before copy is broken</param>
            <param name="overwrite">true to overwrite existing files</param>
            <example>
            Copy file
            
            <code>
            <![CDATA[
            class Program
            {
                static void Main( string[ ] args )
                {
                   const string sourceDirectory = @"C:\transfer_test\source";
                   const string targetDirectory = @"C:\transfer_test\to";
            
                   // search files
                   var file = new QuickIOFileInfo( "file" );
            
                   var observer = new QuickIOTransferObserver( );
                   var service = new QuickIOTransferFileCopyService(observer,  file, targetDirectory, threadCount: 1, retryCount: 3, overwrite: true );
                   
                   //  Progress information
                   service.Observer.FileCopyStarted += OnFileCopyStarted;
                   service.Observer.FileCopyProgress += OnFileCopyProgress;
                   service.Observer.FileCopyFinished += OnFileCopyFinished;
                   service.Observer.FileCopyError += ObserverOnFileCopyError;
                   // Same as (observer events are called first!):
                   //service.FileCopyStarted += OnFileCopyStarted;
                   //service.FileCopyProgress += OnFileCopyProgress;
                   //service.FileCopyFinished += OnFileCopyFinished;
                   //service.FileCopyError += ObserverOnFileCopyError;
                   
                   // Start progress
                   service.Start( ); // Blocks thread until finished
                   
                   Console.WriteLine( "Finished" );
                   Console.ReadKey( );
                }
            
                private static void ObserverOnFileCopyError( object sender, QuickIOTransferFileCopyErrorEventArgs e )
                {
                   Console.WriteLine( "Error: " + e.SourcePath + " to " + e.TargetPath + ": " + e.Exception.Message );
                }
            
                private static void OnFileCopyStarted( object sender, QuickIOTransferFileCopyStartedEventArgs e )
                {
                   Console.WriteLine( "Started: " + e.SourcePath + " to " + e.TargetPath + " (Bytes: " + e.TotalBytes + ")" );
                }
            
                private static void OnFileCopyFinished( object sender, QuickIOTransferFileCopyFinishedEventArgs e )
                {
                   Console.WriteLine( "Finished: " + e.SourcePath + " - MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                }
            
                private static void OnFileCopyProgress( object sender, QuickIOTransferFileCopyProgressEventArgs e )
                {
                   Console.WriteLine( "Progress: " + e.SourcePath + " - %: " + e.Percentage + " MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.#ctor(SchwabenCode.QuickIO.QuickIOFileInfo,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService"/>
            </summary>
            <param name="sourceFileInfo">File to copy</param>
            <param name="targetFullName">Target fullname</param>
            <param name="threadCount">Copy Worker Counts. Use 1 on local systems. Use >2 with SMB shares</param>
            <param name="retryCount">Count of retries before copy is broken</param>
            <param name="overwrite">true to overwrite existing files</param>
            <example>
            Copy file
            
            <code>
            <![CDATA[
            class Program
            {
                static void Main( string[ ] args )
                {
                   const string sourceDirectory = @"C:\transfer_test\source";
                   const string targetDirectory = @"C:\transfer_test\to";
            
                   // search file
                   var file = new QuickIOFileInfo( "file" );
            
                   var service = new QuickIOTransferFileCopyService( file, targetDirectory, threadCount: 1, retryCount: 3, overwrite: true );
                   
                   //  Progress information
                   service.Observer.FileCopyStarted += OnFileCopyStarted;
                   service.Observer.FileCopyProgress += OnFileCopyProgress;
                   service.Observer.FileCopyFinished += OnFileCopyFinished;
                   service.Observer.FileCopyError += ObserverOnFileCopyError;
                   // Same as (observer events are called first!):
                   //service.FileCopyStarted += OnFileCopyStarted;
                   //service.FileCopyProgress += OnFileCopyProgress;
                   //service.FileCopyFinished += OnFileCopyFinished;
                   //service.FileCopyError += ObserverOnFileCopyError;
                   
                   // Start progress
                   service.Start( ); // Blocks thread until finished
                   
                   Console.WriteLine( "Finished" );
                   Console.ReadKey( );
                }
            
                private static void ObserverOnFileCopyError( object sender, QuickIOTransferFileCopyErrorEventArgs e )
                {
                   Console.WriteLine( "Error: " + e.SourcePath + " to " + e.TargetPath + ": " + e.Exception.Message );
                }
            
                private static void OnFileCopyStarted( object sender, QuickIOTransferFileCopyStartedEventArgs e )
                {
                   Console.WriteLine( "Started: " + e.SourcePath + " to " + e.TargetPath + " (Bytes: " + e.TotalBytes + ")" );
                }
            
                private static void OnFileCopyFinished( object sender, QuickIOTransferFileCopyFinishedEventArgs e )
                {
                   Console.WriteLine( "Finished: " + e.SourcePath + " - MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                }
            
                private static void OnFileCopyProgress( object sender, QuickIOTransferFileCopyProgressEventArgs e )
                {
                   Console.WriteLine( "Progress: " + e.SourcePath + " - %: " + e.Percentage + " MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.#ctor(System.Collections.Generic.IEnumerable{SchwabenCode.QuickIO.QuickIOFileInfo},System.String,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService"/>
             </summary>
            <param name="sourceFileInfos">Files to copy</param>
             <param name="targetFullName">Target fullname</param>
             <param name="threadCount">Copy Worker Counts. Use 1 on local systems. Use >2 with SMB shares</param>
             <param name="retryCount">Count of retries before copy is broken</param>
             <param name="overwrite">true to overwrite existing files</param>
            <example>
             Copy collection of files
             <code>
             <![CDATA[
            class Program
            {
                static void Main( string[ ] args )
                {
                   const string sourceDirectory = @"C:\transfer_test\source";
                   const string targetDirectory = @"C:\transfer_test\to";
            
                   // search files
                    var files = QuickIODirectory.EnumerateFiles( sourceDirectory, "*", SearchOption.TopDirectoryOnly );
            
                   var service = new QuickIOTransferFileCopyService( files, targetDirectory, threadCount: 1, retryCount: 3, overwrite: true );
                   
                   //  Progress information
                   service.Observer.FileCopyStarted += OnFileCopyStarted;
                   service.Observer.FileCopyProgress += OnFileCopyProgress;
                   service.Observer.FileCopyFinished += OnFileCopyFinished;
                   service.Observer.FileCopyError += ObserverOnFileCopyError;
                   // Same as (observer events are called first!):
                   //service.FileCopyStarted += OnFileCopyStarted;
                   //service.FileCopyProgress += OnFileCopyProgress;
                   //service.FileCopyFinished += OnFileCopyFinished;
                   //service.FileCopyError += ObserverOnFileCopyError;
                   
                   // Start progress
                   service.Start( ); // Blocks thread until finished
                   
                   Console.WriteLine( "Finished" );
                   Console.ReadKey( );
                }
            
                private static void ObserverOnFileCopyError( object sender, QuickIOTransferFileCopyErrorEventArgs e )
                {
                   Console.WriteLine( "Error: " + e.SourcePath + " to " + e.TargetPath + ": " + e.Exception.Message );
                }
            
                private static void OnFileCopyStarted( object sender, QuickIOTransferFileCopyStartedEventArgs e )
                {
                   Console.WriteLine( "Started: " + e.SourcePath + " to " + e.TargetPath + " (Bytes: " + e.TotalBytes + ")" );
                }
            
                private static void OnFileCopyFinished( object sender, QuickIOTransferFileCopyFinishedEventArgs e )
                {
                   Console.WriteLine( "Finished: " + e.SourcePath + " - MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                }
            
                private static void OnFileCopyProgress( object sender, QuickIOTransferFileCopyProgressEventArgs e )
                {
                   Console.WriteLine( "Progress: " + e.SourcePath + " - %: " + e.Percentage + " MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                }
            }
             ]]></code>
             </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver,System.Collections.Generic.IEnumerable{SchwabenCode.QuickIO.QuickIOFileInfo},System.String,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCopyService"/>
             </summary>
            <param name="observer">Observer for monitoring</param>
            <param name="sourceFileInfos">Files to copy</param>
             <param name="targetFullName">Target fullname</param>
             <param name="threadCount">Copy Worker Counts. Use 1 on local systems. Use >2 with SMB shares</param>
             <param name="retryCount">Count of retries before copy is broken</param>
             <param name="overwrite">true to overwrite existing files</param>
            <example>
             Copy collection of files
             <code>
             <![CDATA[
            class Program
            {
                static void Main( string[ ] args )
                {
                   const string sourceDirectory = @"C:\transfer_test\source";
                   const string targetDirectory = @"C:\transfer_test\to";
            
                   // search files
                   var files = QuickIODirectory.EnumerateFiles( sourceDirectory, "*", SearchOption.TopDirectoryOnly );
            
                   var observer = new QuickIOTransferObserver( );
                   var service = new QuickIOTransferFileCopyService( observer, files, targetDirectory, threadCount: 1, retryCount: 3, overwrite: true );
            
                   //  Progress information
                   service.Observer.FileCopyStarted += OnFileCopyStarted;
                   service.Observer.FileCopyProgress += OnFileCopyProgress;
                   service.Observer.FileCopyFinished += OnFileCopyFinished;
                   service.Observer.FileCopyError += ObserverOnFileCopyError;
                   // Same as (observer events are called first!):
                   //service.FileCopyStarted += OnFileCopyStarted;
                   //service.FileCopyProgress += OnFileCopyProgress;
                   //service.FileCopyFinished += OnFileCopyFinished;
                   //service.FileCopyError += ObserverOnFileCopyError;
                   
                   // Start progress
                   service.Start( ); // Blocks thread until finished
                   
                   Console.WriteLine( "Finished" );
                   Console.ReadKey( );
                }
            
                private static void ObserverOnFileCopyError( object sender, QuickIOTransferFileCopyErrorEventArgs e )
                {
                   Console.WriteLine( "Error: " + e.SourcePath + " to " + e.TargetPath + ": " + e.Exception.Message );
                }
            
                private static void OnFileCopyStarted( object sender, QuickIOTransferFileCopyStartedEventArgs e )
                {
                   Console.WriteLine( "Started: " + e.SourcePath + " to " + e.TargetPath + " (Bytes: " + e.TotalBytes + ")" );
                }
            
                private static void OnFileCopyFinished( object sender, QuickIOTransferFileCopyFinishedEventArgs e )
                {
                   Console.WriteLine( "Finished: " + e.SourcePath + " - MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                }
            
                private static void OnFileCopyProgress( object sender, QuickIOTransferFileCopyProgressEventArgs e )
                {
                   Console.WriteLine( "Progress: " + e.SourcePath + " - %: " + e.Percentage + " MB/s: " + ( e.BytesPerSecond / 1024.0 / 1024.0 ).ToString( "0.0" ) );
                }
            }
             ]]></code>
             </example>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.TotalBytes">
            <summary>
            Total bytes to transfer
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.TotalBytesTransfered">
            <summary>
            Total bytes transfered
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.TransferStarted">
            <summary>
            Null if not started
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.TransferFinished">
            <summary>
            Null if not finished
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.Duration">
            <summary>
            Total duration. If transfer is not finished the current timestamp is used for the calculation
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.BytesPerSecond">
            <summary>
            Bytes per second
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.Percentage">
            <summary>
            Bytes per second
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.Start">
            <summary>
            Starts the copy process.
            First it determines all content information of source. Then the target directory structure will be created before transfer begins
            </summary>
            <exception cref="T:System.InvalidOperationException">Service is already running.</exception>
            <exception cref="T:System.ObjectDisposedException">Fired if you try to start a same service multiple times.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.RegisterInternalEventHandling">
            <summary>
            Copy events from observer to current instance
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.FileCopyError">
            <summary>
            This event is raised if file copy operation fails
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.FileCopyProgress">
            <summary>
            This event is raised during a copy of a file. It provides current information such as progress, speed and estimated time.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.FileCopyStarted">
            <summary>
            This event is triggered at the beginning of the file copy operation.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.FileCopyFinished">
            <summary>
            This event is raised at the end of the file copy operation.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.OnFileCopyError(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyErrorEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.FileCopyError"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.OnFileCopyProgress(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.FileCopyProgress"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.OnFileCopyStarted(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyStartedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.FileCopyStarted"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.OnFileCopyFinished(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyService.FileCopyFinished"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyStartedEventArgs">
            <summary>
            Contains information when a file copy process has been started
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyStartedEventArgs.TotalBytes">
            <summary>
            Total bytes of file
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyStartedEventArgs.TransferStarted">
            <summary>
            Time transfer of file started
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyStartedEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String,System.String,System.Int64)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs"/>
            </summary>
            <param name="sourcePath">Affected job</param>
            <param name="targetPath">Source file path</param>
            <param name="job">Affected job</param>
            <param name="totalBytes">Total bytes to transfer</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationErrorEventArgs">
            <summary>
            Contains further information when a file creation process fails
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationErrorEventArgs.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationErrorEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String,System.Exception)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationErrorEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="targetPath">Target file path</param>
            <param name="e">Exception</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs">
            <summary>
            Contains information when a file creation operation has been finished successfully
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs.TransferFinished">
            <summary>
            Estimated Timestamp when transfer is finished
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs.Duration">
            <summary>
            Live transfer duration
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs.BytesPerSecond">
            <summary>
            Live bytes per second
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs.TotalBytes">
            <summary>
            Total bytes of file
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs.TransferStarted">
            <summary>
            Time transfer of file started
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String,System.Int64,System.DateTime)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="targetPath">Target file path</param>
            <param name="totalBytes">Total bytes to transfer</param>
            <param name="transferStarted"></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob">
            <summary>
            File Create job implementation
            </summary>
            <example>
            File Create job with observer
            <code>
            <![CDATA[
            public void CreateJobWithObserver( IQuickIOTransferObserver observer, String sourceFile, String targetDirectory )
            {
                var createJob = new QuickIOTransferFileCreationJob( observer, sourceFile, targetDirectory, GenerateDummyContent( ) );
            
                createJob.CreationStarted += OnCreationStarted;
                createJob.CreationProgress += OnCreationProgress;
                createJob.CreationFinished += OnCreationFinished;
            
                createJob.Run( );
            }
            ]]>
            </code>
            
            File create job
            <code>
            <![CDATA[
            public void CreateJob( String sourceFile, String targetDirectory, Int32 maxBufferSize )
            {
                var createJob = new QuickIOTransferFileCreationJob( sourceFile, targetDirectory, GenerateDummyContent( ) );
            
                createJob.CreationStarted += OnCreationStarted;
                createJob.CreationProgress += OnCreationProgress;
                createJob.CreationFinished += OnCreationFinished;
            
                createJob.Run( );
            }
            ]]>
            </code>
            
            Event definitions for this example
            <code>
            <![CDATA[
            private byte[ ] GenerateDummyContent()
            {
                return System.Text.Encoding.UTF8.GetBytes( "Hello. THis is file creation" );
            }
            
            private static void OnCreationFinished( object sender, QuickIOTransferFileCreationFinishedArgs e )
            {
                Console.WriteLine( "TestFileCreationJob: Creation Finished." );
            }
            
            private static void OnCreationProgress( object sender, QuickIOTransferFileCreationProgressArgs e )
            {
                Console.WriteLine( "TestFileCreationJob: Creation progresss: " + e.Percentage.ToString( "0.00" ) );
            }
            
            private static void OnCreationStarted( object sender, QuickIOTransferFileCreationStartedArgs e )
            {
                Console.WriteLine( "TestFileCreationJob: Creation started." );
            }
            ]]>
            </code>
            
            </example>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.MaxJobRetryAttempts">
            <summary>
            Count of max retries per job
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.Implementation">
            <summary>
            Starts the creation process
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.#ctor(System.String,System.String,System.Byte[],System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a new instance if <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob"/>
            </summary>
            <param name="contents">Contents to write</param>
            <param name="maxBufferSize">Set max buffer size for copy transfer</param>
            <param name="overwrite">true to overwrite existing elements</param>
            <param name="targetDirectory">Target directory fullname</param>
            <param name="fileName">Target filename</param>
            <param name="parentExistanceCheck">true to verify parent existance</param>
            <param name="prorityLevel">Priority level of directory creation should be higher than file creation without parent check</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver,System.String,System.String,System.Byte[],System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a new instance if <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob"/>
            </summary>
            <param name="contents">Contents to write</param>
            <param name="overwrite">true to overwrite existing elements</param>
            <param name="maxBufferSize">Set max buffer size for copy transfer</param>
            <param name="observer">Observer</param>
            <param name="targetDirectory">Target directory fullname</param>
            <param name="fileName">Target filename</param>
            <param name="parentExistanceCheck">true to verify parent existance</param>
            <param name="prorityLevel">Priority level of directory creation should be higher than file creation without parent check</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.TargetDirectory">
            <summary>
            Target directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.TargetFullName">
            <summary>
            Target directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.FileName">
            <summary>
            Filename with extension
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.Contents">
            <summary>
            Contents to write
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.TransferStarted">
            <summary>
            Transfer started
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.Progress">
            <summary>
            This event is raised during a creation of a file. It provides current information such as progress, speed and estimated time.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.Started">
            <summary>
            This event is triggered at the beginning of the file creation operation.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.Finished">
            <summary>
            This event is raised at the end of the file creation operation.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.Error">
            <summary>
            This event is raised if file creation fails
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.DirectoryCreating">
            <summary>
            This event is raised before an upcoming directory creation operation is performed
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.DirectoryCreated">
            <summary>
            This event is raised when a directory was created
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.OnCreationProgress(System.Int64,System.UInt64)">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.Progress"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.OnCreationStarted(System.Int64)">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.Progress"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.OnCreationFinished(System.Int64)">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.Finished"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.OnError(System.Exception)">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.Error"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.OnDirectoryCreating(System.String)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.DirectoryCreating"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.OnDirectoryCreated(System.String)">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationJob.DirectoryCreated"/>
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs">
            <summary>
            Live progress information during file transfer.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs.BytesTransfered">
            <summary>
            Total bytes of file transfered
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs.ProgressTimestamp">
            <summary>
            Time the progress event was fired
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs.EstimatedFinishTimestamp">
            <summary>
            Estimated Timestamp when transfer is finished
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs.EstimatedDuration">
            <summary>
            Estimated Duration
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs.Percentage">
            <summary>
            Total percentage
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs.Duration">
            <summary>
            Live transfer duration
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs.BytesPerSecond">
            <summary>
            Live bytes per second
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs.TotalBytes">
            <summary>
            Total bytes of file
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs.TransferStartedTimestamp">
            <summary>
            Time transfer of file started
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String,System.Int64,System.UInt64,System.DateTime)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="targetPath">Target file path</param>
            <param name="totalBytes">Total bytes to transfer</param>
            <param name="bytesTransfered">Total bytes transfered</param>
            <param name="transferStarted"></param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationStartedEventArgs">
            <summary>
            Contains information when a file creation process has been started
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationStartedEventArgs.TotalBytes">
            <summary>
            Total bytes of file
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationStartedEventArgs.TransferStarted">
            <summary>
            Time transfer of file started
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationStartedEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String,System.Int64)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationStartedEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="targetPath">Target file path</param>
            <param name="totalBytes">Total bytes to transfer</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob">
            <summary>
            A job is a defined task  is performed by the method <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Run"/>
            Here, you can define the content of the task itself.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Token">
            <summary>
            Cancellation Token
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.ThrowIfCancellationRequested">
            <summary>
            Checks state of <see cref="!:Token.IsCancellationRequested"/>
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Observer">
            <summary>
            Central observer
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob"/>
            </summary>
            <param name="observer">Observer for file monitoring by service</param>
            <param name="priorityLevel">Default priority</param>
            <param name="cancellationToken">Cancellation Token</param>
            <remarks>Thread-safe</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.#ctor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob"/>
            </summary>
            <param name="priorityLevel">Default priority</param>
            <param name="cancellationToken">Cancellation Token</param>
            <remarks>Thread-safe</remarks>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.CurrentRetryCount">
            <summary>
            Retry count before firing broken exception
            </summary>
            <remarks>Thread-safe</remarks>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.PriorityLevel">
            <summary>
            Prority level. Higher priority = higher value. 0 = default
            </summary>
            <remarks>Thread-safe</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Implementation">
            <summary>
            Implementation. <br/>
            It is executed by default without a background thread.
            The method can block.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Run">
            <summary>
            Executes <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Implementation"/>
            </summary>
            <example>
            Contains following content
            
            <code>
            <![CDATA[
            public void Run( )
            {
                var started = DateTime.Now;
                OnRun( started );
                try
                {
                    Implementation( );
                }
                catch ( Exception e )
                {
                    OnError( e );
                    throw;
                }
                OnEnd( started, DateTime.Now );
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.RunRaised">
            <summary>
            This event is raised when <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Run"/> is called
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Error">
            <summary>
            This event is triggered if <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Run"/> has an error
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.End">
            <summary>
            This event is raised at the end <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Run"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.OnRun(System.DateTime)">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.RunRaised"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.OnError(System.Exception)">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Error"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.OnEnd(System.DateTime,System.DateTime)">
            <summary>
            Fires <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.RunRaised"/>
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobDequeuedEventArgs">
            <summary>
            Contains information of a dequeued job
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobDequeuedEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobDequeuedEventArgs"/>
            </summary>
            <param name="job">Enqueued Job</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobDequeuedEventArgs.Job">
            <summary>
            Dequeued Job
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEndEventArgs">
            <summary>
            provides information for job run
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEndEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.DateTime,System.DateTime)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEndEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="jobStart">Time of job start</param>
            <param name="jobEnd">Time of job end</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEndEventArgs.StartTime">
            <summary>
            Time of job start
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEndEventArgs.EndTime">
            <summary>
            Time of job end
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEnqueuedEventArgs">
            <summary>
            Contains information of an enqueued job
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEnqueuedEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEnqueuedEventArgs"/>
            </summary>
            <param name="job">Enqueued Job</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEnqueuedEventArgs.Job">
            <summary>
            Enqueued Job
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobErrorEventArgs">
            <summary>
            provides information for job error
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobErrorEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobErrorEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="e">Exception</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobErrorEventArgs.Exception">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEventArgs">
            <summary>
            Abstract base class for job event arguments
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEventArgs.Job">
            <summary>
            Target file path
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobPriorityComparer">
            <summary>
            Job Priority Implementation
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobPriorityComparer.Compare(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob)">
            <summary>
            Comparer Implementation - descending
            </summary>
            <param name="leftJob">Left Job</param>
            <param name="rightJob">Right Job</param>
            <returns>Higher Prio</returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobQueuedEventArgs">
            <summary>
            Contains information of an queued job
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobQueuedEventArgs.AddedToQueue">
            <summary>
            Timestamp when the item has been added to the queue
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobQueuedEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobQueuedEventArgs"/>. Sets <see cref="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobQueuedEventArgs.AddedToQueue"/> to DateTime.Now
            </summary>
            <param name="job">Affected job</param>
            <param name="sourcePath">Source file path</param>
            <param name="targetPath">Target file path</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobReatryMaxReachedEventArgs">
            <summary>
            Contains information if the max retry amount of a job has been reached
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobReatryMaxReachedEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobReatryMaxReachedEventArgs"/>
            </summary>
            <param name="job">Enqueued Job</param>
            <param name="lastException">Last Exception occured</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobReatryMaxReachedEventArgs.Job">
            <summary>
            Requeued Job
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobReatryMaxReachedEventArgs.LastException">
            <summary>
            Raised exception caused the requeue
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRequeuedEventArgs">
            <summary>
            Contains information of a job that is re-queued.
            A re-queue happens when a job execution failes and the service retries the operation 
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRequeuedEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRequeuedEventArgs"/>
            </summary>
            <param name="job">Enqueued Job</param>
            <param name="e">Exception of last error</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRequeuedEventArgs.Job">
            <summary>
            Requeued Job
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRequeuedEventArgs.Exception">
            <summary>
            Raised exception caused the requeue
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRunEventArgs">
            <summary>
            provides information for job run
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRunEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.DateTime)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRunEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="jobStart">Time of job start</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRunEventArgs.StartTime">
            <summary>
            Time of job start
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteEventArgs">
            <summary>
            Abstract base class for file transfer event arguments
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="targetPath">Target file path</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteEventArgs.TargetPath">
            <summary>
            Target file path
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteJob">
            <summary>
            Base class for transfer write jobs
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteJob.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob"/>
            </summary>
            <param name="observer">Observer for file monitoring by service</param>
            <param name="priorityLevel">Default priority</param>
            <param name="overwrite">true to overwrite existing elements</param>
            <param name="cancellationToken">Cancel token</param>
            <remarks>Thread-safe</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteJob.#ctor(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob"/>
            </summary>
            <param name="priorityLevel">Default priority</param>
            <param name="overwrite">true to overwrite existing elements</param>
            <param name="cancellationToken">Cancel token</param>
            <remarks>Thread-safe</remarks>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteJob.Overwrite">
            <summary>
            True to overwrite existing elements
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteJob.MaxBufferSize">
            <summary>
            Max Buffer Size for Transfer
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteJob.ParentExistanceCheck">
            <summary>
            True to check parent folder existance. False is much faster, but you have to be sure that the parent exists.
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteWithSourceEventArgs">
            <summary>
            Abstract class for other event argument implementaions
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteWithSourceEventArgs.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteWithSourceEventArgs"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="sourcePath">Source path</param>
            <param name="targetPath">target path</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobWriteWithSourceEventArgs.SourcePath">
            <summary>
            Source file path
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver">
            <summary>
             A QuickIO observer is a central contact point and allows the condition monitoring of QuickIO services and QuickIO jobs.<br />
             It is possible to create an own observer by inherit from IQuickIOTransferObserver and QuickIOTransferObserver to monitor your own services and jobs at a central point and gather all information.
            
            If you define your own jobs you can create your own observer class that derives from <see cref="T:SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob"/>, too.
            
            <example>
            Own observer example
            <code>
            <![CDATA[
            /// <summary>
            /// My observer interface
            /// </summary>
            public interface IMyExampleObserver : IQuickIOTransferObserver
            {
                /// <summary>
                /// Description of MyEvent
                /// </summary>
                event MyExampleObserver.MyCustomEventHandler MyEvent;
            
                /// <summary>
                /// Fire <see cref="MyExampleObserver.MyEvent"/>
                /// </summary>
                void OnMyEvent( );
            }
            
            /// <summary>
            /// my observer implementation
            /// </summary>
            public class MyExampleObserver : QuickIOTransferObserver, IMyExampleObserver
            {
                /// <summary>
                /// Delegate for <see cref="MyEvent"/>
                /// </summary>
                public delegate void MyCustomEventHandler( object sender, EventArgs e );
            
                /// <summary>
                /// Description of MyEvent
                /// </summary>
                public event MyCustomEventHandler MyEvent;
            
                /// <summary>
                /// Fire <see cref="MyEvent"/>
                /// </summary>
                public virtual void OnMyEvent( )
                {
                    if ( MyEvent != null )
                    {
                        MyEvent( this, EventArgs.Empty );
                    }
                }
            
                /// <summary>
                /// For example we want to log each worker creation, but  the keep the default behavior
                /// </summary>
                public override void OnWorkerCreated( QuickIOTransferWorkerCreatedEventArgs args )
                {
                    base.OnWorkerCreated( args );
            
                    QuickIOFile.AppendAllText( "Log_WorkerCreation.log", String.Format( "[{0}] NEW WORKER: {1} ", DateTime.Now, args.WorkerID ) );
                }
            }
            
            /// <summary>
            /// Example usage of own observer
            /// </summary>
            public class Program
            {
                /// <summary>
                /// Program implementation
                /// </summary>
                public static void OwnObserverExample( )
                {
                    var myObserver = new MyExampleObserver( );
            
                    var service1 = new QuickIOTransferBackgroundService( myObserver, workerCount: 1 );
                    var service2 = new QuickIOTransferBackgroundService( myObserver, workerCount: 4 );
                    var directoryCopyService = new QuickIOTransferDirectoryCopyService( myObserver, new QuickIODirectoryInfo( @"C:\temp" ), @"C:\temp_testtarget" );
            
                    // service usage here
                }
            }
            ]]></code>
            </example>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.#ctor">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver"/>
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.DirectoryCreationError">
            <summary>
            This event is raised if directory creation operation fails
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.DirectoryCreating">
            <summary>
            This event is raised before an upcoming directory creation operation is performed
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.DirectoryCreated">
            <summary>
            This event is raised when a directory was created
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnDirectoryCreationError(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreationErrorEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.DirectoryCreationError"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnDirectoryCreating(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatingEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.DirectoryCreating"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnDirectoryCreated(SchwabenCode.QuickIO.Transfer.QuickIOTransferDirectoryCreatedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.DirectoryCreated"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCreationError">
            <summary>
            This event is raised if file creation fails
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCreationProgress">
            <summary>
            This event is raised during a creation of a file. It provides current information such as progress, speed and estimated time.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCreationStarted">
            <summary>
            This event is triggered at the beginning of the file creation operation.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCreationFinished">
            <summary>
            This event is raised at the end of the file creation operation.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnFileCreationError(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationErrorEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCreationError"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnFileCreationProgress(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationProgressEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCreationProgress"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnFileCreationStarted(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationStartedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCreationStarted"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnFileCreationFinished(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCreationFinishedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyFinished"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyError">
            <summary>
            This event is raised if file copy operation fails
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyProgress">
            <summary>
            This event is raised during a copy of a file. It provides current information such as progress, speed and estimated time.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyStarted">
            <summary>
            This event is triggered at the beginning of the file copy operation.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyFinished">
            <summary>
            This event is raised at the end of the file copy operation.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnFileCopyError(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyErrorEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyError"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnFileCopyProgress(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyProgressEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyProgress"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnFileCopyStarted(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyStartedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyStarted"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnFileCopyFinished(SchwabenCode.QuickIO.Transfer.QuickIOTransferFileCopyFinishedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.FileCopyFinished"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.CompletedAddingRequested">
            <summary>
            This event is raised if the service has been made known that no new elements will be added.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.CancellationRequested">
            <summary>
            This event is raised if the service has been made known that he should cancel the processing
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnCompletedAddingRequested(System.EventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.CompletedAddingRequested"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnCancellationRequested(System.EventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.CancellationRequested"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerIsWaiting">
            <summary>
            This event is raised when a processing thread is waiting for new items
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerWokeUp">
            <summary>
            This event is raised when a processing thread, which so far has been waiting for, was notified of a new item in the queue.
            It may be that he gets no element from the queue, because another thread was faster. He would sleep lie down again, if no more items available.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerPickedJob">
            <summary>
            This event is raised when a processing thread has taken a new item from the queue 
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerCreated">
            <summary>
            This event is raised when a new processing thread was created
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerStarted">
            <summary>
            This event is raised when a processing thread started
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerShutdown">
            <summary>
            This event is raised when a processing thread was shutdown
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnWorkerWokeUp(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerWokeUpEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerWokeUp"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnWorkerIsWaiting(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerIsSleepingEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerPickedJob"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnWorkerPickedJob(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerPickedJobEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerPickedJob"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnWorkerCreated(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerCreatedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerCreated"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnWorkerStarted(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerStartedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerStarted"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnWorkerShutdown(SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerShutdownEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.WorkerShutdown"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobRun">
            <summary>
            This event is raised when <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Run"/> is called
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobError">
            <summary>
            This event is triggered if <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Run"/> has an error
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobEnd">
            <summary>
            This event is raised at the end <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferJob.Run"/>
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobEnqueued">
            <summary>
            This event is raised if the job of a queue has been added.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobDequeued">
            <summary>
            This event is raised if the job was taken from of a queue.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobRequeued">
            <summary>
            This event is raised if the job was re-added to a queue.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobRetryMaxReached">
            <summary>
            This event is raised if the max retry count is reached.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnJobRun(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRunEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobRun"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnJobError(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobErrorEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobError"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnJobEnd(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEndEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobEnd"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnJobEnqueued(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobEnqueuedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobEnqueued"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnJobDequeued(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobDequeuedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobDequeued"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnJobRequeued(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobRequeuedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobRequeued"/>
            </summary>      
            <param name="args">Holds further event information</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.OnJobRetryMaxReached(SchwabenCode.QuickIO.Transfer.QuickIOTransferJobReatryMaxReachedEventArgs)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferObserver.JobRetryMaxReached"/>
            </summary>
            <param name="args">Holds further event information</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase">
            <summary>
            Base Class for transfer service implementations.<br/>
            <br/>
            A QuickIO service is an instance for processing multiple jobs. QuickIO services offer multiple workers (one worker = one <see cref="T:System.Threading.Thread"/>), to enable parallel processing for jobs.<br />
            By default the priority that a job has, is observed during the processing with <see cref="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.PriorityComparer"/>.
            </summary>
            <remarks>PathMatchAll methods and properties are thread-safe</remarks>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.Observer">
            <summary>
            Provides Events and Settings for transfer monitoring
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.MaxWorkerCount">
            <summary>
            Max count of active workers
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.MaxBufferSize">
            <summary>
            Size of Buffer
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.MaxJobRetryAttempts">
            <summary>
            Max Job Retry Count
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerCount">
            <summary>
            Count of active workers
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.IsWorking">
            <summary>
            True if service is running
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.StartWorking">
            <summary>
            Starts the service
            </summary>
            <returns>false if service is already started</returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.CancelRequested">
            <summary>
            true is cancel is requested
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.AddingCompleted">
            <summary>
            true if queue adding is completed. No more items will be added.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.Cancel">
            <summary>
            Cancels the file provider and all transfers
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.CompleteAdding">
            <summary>
            Marks the queue as completed. No more items can be added.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.PriorityComparer">
            <summary>
            Comparer for job sorting. By default it's <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferJobPriorityComparer"/>.
            FIFO if comparer is null.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.InternalReSortLockedQueue">
            <summary>
            Resorts the Queue
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase._jobQueue">
            <summary>
            Queue
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase"/> and sets required properties
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.#ctor(SchwabenCode.QuickIO.Transfer.IQuickIOTransferObserver,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase"/>
            </summary>
            <param name="observer">Required server. Can be null to create default observer</param>
            <param name="maxWorkerCount">Count of parallel workers to transfer the files</param>
            <param name="maxFileRetry">Max retry on transfer failure</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.CreateWorkers">
            <summary>
            Creates the amount of workers
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.InternalCreateNewWorker">
            <summary>
            Creates a new worker
            </summary>
            <returns>Created thread</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.StartWorkers">
            <summary>
            Creates the amount of workers
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.InternalStartWorker(System.Threading.Thread)">
            <summary>
            Starts the given worker by ID
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.AddWorker(System.Int32)">
            <summary>
            Adds a new worker to the service. Worker will be created and started instantly.
            </summary>
            <param name="count">Must be 1 or greater</param>
            <remarks>It's not recommended to use more workers than the count of useable CPU cores.</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.RemoveWorker(System.Int32)">
            <summary>
            Remove workers from the service.
            </summary>
            <param name="count">Must be 1 or greater</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WakeUpSleepingWorkers">
            <summary>
            Wakes sleeping workers up
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.InternalWaitForNewQueueItems">
            <summary>
            waits for queue items
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.InternalAdd(SchwabenCode.QuickIO.Transfer.QuickIOTransferJob)">
            <summary>
            Locks the queue and adds the element.
            </summary>
            <param name="queueItem">Item to add </param>
            <remarks>The service will inject his observer to the job. If the job already has an observer, it will be overwritten.</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.InternalAdd(System.Collections.Generic.IEnumerable{SchwabenCode.QuickIO.Transfer.QuickIOTransferJob})">
            <summary>
            Locks the queue and adds the collection to the queue.
            </summary>
            <param name="queueItems">Collection of items to add</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.Clear">
            <summary>
            Clears the queue and returns all queued elements
            </summary>
            <returns>Collection of <see cref="T:SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WaitForFinish">
            <summary>
            Joins all threads and blocks until all threads and queue items are completed.
            Queue has to be completed.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.RemoveThread(System.Int32)">
            <summary>
            Removes a Thread from <see cref="F:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase._workerThreads"/> and raises <see cref="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnWorkerShutdown(System.Int32)"/>
            </summary>
            <param name="threadId">Affcted Thread ID</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.CompletedAddingRequested">
            <summary>
            This event is raised if the service has been made known that no new elements will be added.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.CancellationRequested">
            <summary>
            This event is raised if the service has been made known that he should cancel the processing
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnCompletedAddingRequested">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.CompletedAddingRequested"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnCancellationRequested">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.CancellationRequested"/>
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerIsWaiting">
            <summary>
            This event is raised when a processing thread is waiting for new items
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerWokeUp">
            <summary>
            This event is raised when a processing thread, which so far has been waiting for, was notified of a new item in the queue.
            It may be that he gets no element from the queue, because another thread was faster. He would sleep lie down again, if no more items available.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerPickedJob">
            <summary>
            This event is raised when a processing thread has taken a new item from the queue 
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerCreated">
            <summary>
            This event is raised when a new processing thread was created
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerStarted">
            <summary>
            This event is raised when a processing thread started
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerShutdown">
            <summary>
            This event is raised when a processing thread was shutdown
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnWorkerWokeUp(System.Int32)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerWokeUp"/>
            </summary>
            <param name="threadId">affcted Worker Thread ID</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnWorkerIsWaiting(System.Int32)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerPickedJob"/>
            </summary>
            <param name="threadId">affcted Worker Thread ID</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnWorkerPickedJob(System.Int32,SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerPickedJob"/>
            </summary>
            <param name="threadId">affcted Worker Thread ID</param>
            <param name="job">picked job</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnWorkerCreated(System.Int32)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerCreated"/>
            </summary>
            <param name="threadId">affcted Worker Thread ID</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnWorkerStarted(System.Int32)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerStarted"/>
            </summary>
            <param name="threadId">affcted Worker Thread ID</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnWorkerShutdown(System.Int32)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.WorkerShutdown"/>
            </summary>
            <param name="threadId">affcted Worker Thread ID</param>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.JobEnqueued">
            <summary>
            This event is raised if the job of a queue has been added.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.JobDequeued">
            <summary>
            This event is raised if the job was taken from of a queue.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.JobRequeued">
            <summary>
            This event is raised if the job was re-added to a queue.
            </summary>
        </member>
        <member name="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.JobRetryMaxReached">
            <summary>
            This event is raised if the max retry count is reached.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnJobEnqueued(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.JobEnqueued"/>
            </summary>
            <param name="job">Affected job</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnJobDequeued(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.JobDequeued"/>
            </summary>
            <param name="job">Affected job</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnJobRequeued(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.Exception)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.JobRequeued"/> for this service and specified observer
            </summary>
            <param name="job">Affected job</param>
            <param name="e">Caused exception</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.OnJobRetryMaxReached(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob,System.Exception)">
            <summary>
            Fire <see cref="E:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.JobRetryMaxReached"/>
            </summary>
            <param name="job">Affected job</param>
            <param name="lastException">Last exception</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.StartConsuming(System.Object)">
            <summary>
            Element consuming. Breaks if element is null.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferServiceBase.JobExecuteSwitch(SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob)">
            <summary>
            Consuming - transfer file
            </summary>
            <param name="job">Queue Item</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferSetTimestampsJob">
            <summary>
            Job to set timestamps
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferSetTimestampsJob.Implementation">
            <summary>
             Implementation of this job
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferSetTimestampsJob.TargetPath">
            <summary>
            Targetpath
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferSetTimestampsJob.CreationTimeUtc">
            <summary>
            Gets the creation time (UTC)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferSetTimestampsJob.LastAccessTimeUtc">
            <summary>
            Gets the time (UTC) of last access. 
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferSetTimestampsJob.LastWriteTimeUtc">
            <summary>
            Gets the time (UTC) was last written to
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferSetTimestampsJob.CreationTime">
            <summary>
            Gets the creation time
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferSetTimestampsJob.LastAccessTime">
            <summary>
            Gets the time that the  file was last accessed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferSetTimestampsJob.LastWriteTime">
            <summary>
            Gets the time the file was last written to.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferSetTimestampsJob.#ctor(System.String,System.DateTime,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Job for creating directory paths
            </summary>
            <param name="targetPath">Affected fullname to set attributes</param>
            <param name="lastWriteTime">The time the file was last written to.</param>
            <param name="prorityLevel">Priority level of directory creation should be higher than file creation without parent check</param>
            <param name="creationTime">The creation time</param>
            <param name="lastAccessTime">The time that the  file was last accessed</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerCreatedEventArgs">
            <summary>
            Contains information when a new worker has been created
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerCreatedEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerCreatedEventArgs"/>
            </summary>
            <param name="workerID">Affected Worker ID</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerCreatedEventArgs.WorkerID">
            <summary>
            Affected Worker ID
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerIsSleepingEventArgs">
            <summary>
            Contains information if a workers wait for a new element in queue
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerIsSleepingEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerIsSleepingEventArgs"/>
            </summary>
            <param name="workerID">Affected Worker ID</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerIsSleepingEventArgs.WorkerID">
            <summary>
            Affected Worker ID
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerPickedJobEventArgs">
            <summary>
            Contains information when a worker picked up a new job from the queue
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerPickedJobEventArgs.#ctor(System.Int32,SchwabenCode.QuickIO.Transfer.IQuickIOTransferJob)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerWokeUpEventArgs"/>
            </summary>
            <param name="workerID">Affected Worker ID</param>
            <param name="job">Picked job</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerPickedJobEventArgs.WorkerID">
            <summary>
            Affected Worker ID
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerPickedJobEventArgs.Job">
            <summary>
            Picked Job
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerShutdownEventArgs">
            <summary>
            Contains information when a worker has stopped successfully
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerShutdownEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerShutdownEventArgs"/>
            </summary>
            <param name="workerID">Affected Worker ID</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerShutdownEventArgs.WorkerID">
            <summary>
            Affected Worker ID
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerStartedEventArgs">
            <summary>
            Contains information when a worker started
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerStartedEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerStartedEventArgs"/>
            </summary>
            <param name="workerID">Affected Worker ID</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerStartedEventArgs.WorkerID">
            <summary>
            Affected Worker ID
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerWokeUpEventArgs">
            <summary>
            Contains information when when a worker, which so far has been waiting for an item, was notified of a new item in the queue.
            It may be that he gets no element from the queue, because another thread was faster. He would sleep lie down again, if no more items available.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerWokeUpEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerWokeUpEventArgs"/>
            </summary>
            <param name="workerID">Affected Worker ID</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Transfer.QuickIOTransferWorkerWokeUpEventArgs.WorkerID">
            <summary>
            Affected Worker ID
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.DirectoryAlreadyExistsException">
            <summary>
            This error is raised if you want to create for example a folder which already exists.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.DirectoryAlreadyExistsException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.DirectoryAlreadyExistsException"/>
            </summary>
            <param name="message">Error message</param>
            <param name="path">Affected directory path</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.DirectoryNotEmptyException">
            <summary>
            This error is raised if a folder that is not empty should be deleted.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.DirectoryNotEmptyException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.DirectoryNotEmptyException"/>
            </summary>
            <param name="message">Error message</param>
            <param name="path">Affected directory path</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.FileAlreadyExistsException">
            <summary>
            This error is raised if a file should be created that already exists.
            </summary>   
        </member>
        <member name="M:SchwabenCode.QuickIO.FileAlreadyExistsException.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.FileAlreadyExistsException"/>
            </summary>
            <param name="path">Affected file path</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.FileAlreadyExistsException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.FileAlreadyExistsException"/>
            </summary>
            <param name="message">Error message</param>
            <param name="path">Affected file path</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.FileSystemIsBusyException">
            <summary>
            This error is raised if file system is busy and further operations are not able to execute
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.FileSystemIsBusyException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.FileSystemIsBusyException"/>
            </summary>
            <param name="message">Error message</param>
            <param name="path">Affected directory path</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.InvalidPathException">
            <summary>
            Invalid Path Exception
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.InvalidPathException.#ctor(System.String)">
            <summary>
            Invalid Path Exception
            </summary>
            <param name="path">Invalid Path</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.InvalidPathException.#ctor(System.String,System.String)">
            <summary>
            Invalid Path Exception
            </summary>
            <param name="message">Error Message</param>
            <param name="path">Invalid Path</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.PathAlreadyExistsException">
            <summary>
            Exception if path does not exist.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PathAlreadyExistsException.#ctor(System.String,System.String)">
            <summary>
            Exception if path does not exist.
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.PathNotFoundException">
            <summary>
            Exception if path does not exist.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PathNotFoundException.#ctor(System.String)">
            <summary>
            Exception if path does not exist.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PathNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Exception if path does not exist.
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOBaseException">
            <summary>
            Abstract base class for exceptions
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOBaseException.Path">
            <summary>
            Affected Path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOBaseException.#ctor(System.String,System.String)">
            <summary>
            Abstract base class for exceptions
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOBaseException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Abstract base class for exceptions
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOTransferAlreadyRunningException">
            <summary>
            Exception of already running transfer activity
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOTransferAlreadyRunningException.#ctor(System.String)">
            <summary>
            Creates a new exception of <see cref="T:SchwabenCode.QuickIO.QuickIOTransferAlreadyRunningException"/>
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">
            <summary>
            Exception if path returns another type as excepted
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException.Estimated">
            <summary>
            Estimated Type
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException.Found">
            <summary>
            Type found
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException.FullName">
            <summary>
            Affected full path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException.#ctor(SchwabenCode.QuickIO.QuickIOFileSystemEntryType,SchwabenCode.QuickIO.QuickIOFileSystemEntryType,System.String)">
            <summary>
            Exception if path returns another type as excepted
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.UnsupportedDriveTypeException">
            <summary>
            Represents an exception for unsuuported drive types
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.UnsupportedDriveTypeException.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.UnsupportedDriveTypeException"/>
            </summary>
            <param name="path">Unsupported drive</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.UnsupportedShareTypeException">
            <summary>
            Represents an exception for unsuuported drive types
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.UnsupportedShareTypeException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.UnsupportedShareTypeException"/>
            </summary>
            <param name="path">Unsupported drive</param>
            <param name="message">Error</param>
        </member>
    </members>
</doc>
