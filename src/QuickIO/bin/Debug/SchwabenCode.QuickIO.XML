<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SchwabenCode.QuickIO</name>
    </assembly>
    <members>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.ForceFileAttributesExistance(System.IO.FileAttributes,System.IO.FileAttributes,System.Boolean)">
            <summary>
            Adds another <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add or remove</param>
            <param name="existance">true to add, false to remove</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.TryForceFileAttributesExistance(System.IO.FileAttributes,System.IO.FileAttributes,System.Boolean,System.IO.FileAttributes@)">
            <summary>
            Checks whether an attribute is already in the collection; If not, it will be added.
            Returns true on add. False if the collection already contains that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add or remove</param>
            <param name="existance">true to add, false to remove</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if the collection <paramref name="source"/> has been updated <paramref name="updatedSource"/>.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.TryAddFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes,System.IO.FileAttributes@)">
            <summary>
            Adds a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            Returns true on add. False if the collection already contains that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if attributes updated</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.AddFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Adds a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.TryRemoveFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes,System.IO.FileAttributes@)">
            <summary>
            Removes a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            Returns true on remove. False if the collection does not contain that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to remove</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if attributes updated</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.RemoveFileAttribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Removes a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to remove</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.InternalHelpers.ContainsFileAttribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Checks whether the given attribute in the collection is included.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to check</param>
            <returns>True if exists, false if not</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateSystemPaths(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions,SchwabenCode.QuickIO.QuickIOPathType,System.Nullable{SchwabenCode.QuickIO.QuickIOFileSystemEntryType})">
            <summary>
            Search Exection
            </summary>
            <param name="uncDirectoryPath">Start directory path</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="filterType"><see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/></param>
            <returns>Collection of path</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined all sub system entries of a directory
            </summary>
            <param name="uncDirectoryPath">Path of the directory</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns>Collection of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateWin32FileSystemEntries(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined all sub system entries of a directory
            </summary>
            <param name="path">Path of the directory</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns>Collection of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateDirectoryMetadata(System.String,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined metadata of directory
            </summary>
            <param name="path">Path of the directory</param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/> started with the given directory</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateDirectoryMetadata(System.String,SchwabenCode.QuickIO.Win32.Win32FileSystemEntry,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined metadata of directory
            </summary>
            <param name="path">Path of the directory</param>
            <param name="fileSystemEntry"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/> started with the given directory</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateFiles(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined all files of a directory
            </summary>
            <param name="uncDirectoryPath">Path of the directory</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns>Collection of files</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateDirectories(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determined all subfolders of a directory
            </summary>
            <param name="uncDirectoryPath">Path of the directory</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">The enumeration options for exception handling</param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/> collection of subfolders</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalEnumerateFileSystem.EnumerateDirectoryStatistics(System.String)">
            <summary>
            Determines the statistics of the given directory. This includes the number of files, folders and the total size in bytes.        
            </summary>
            <param name="uncDirectoryPath">Path to the directory to generate the statistics.</param>
            <returns>Provides the statistics of the directory</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.ForceFileAttributesExistance(System.IO.FileAttributes,System.IO.FileAttributes,System.Boolean)">
            <summary>
            Adds another <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add or remove</param>
            <param name="existance">true to add, false to remove</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.TryForceFileAttributesExistance(System.IO.FileAttributes,System.IO.FileAttributes,System.Boolean,System.IO.FileAttributes@)">
            <summary>
            Checks whether an attribute is already in the collection; If not, it will be added.
            Returns true on add. False if the collection already contains that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add or remove</param>
            <param name="existance">true to add, false to remove</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if the collection <paramref name="source"/> has been updated <paramref name="updatedSource"/>.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.TryAddFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes,System.IO.FileAttributes@)">
            <summary>
            Adds a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            Returns true on add. False if the collection already contains that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if attributes updated</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.AddFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Adds a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to add</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.TryRemoveFileAttrribute(System.IO.FileAttributes,System.IO.FileAttributes,System.IO.FileAttributes@)">
            <summary>
            Removes a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            Returns true on remove. False if the collection does not contain that attribute.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to remove</param>
            <param name="updatedSource">FileAttributes after update</param>
            <returns>True if attributes updated</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.RemoveFileAttribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Removes a <see cref="T:System.IO.FileAttributes"/> <paramref name="attr"/> to the existing collection <paramref name="source"/>.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to remove</param>
            <returns><see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalHelpers.ContainsFileAttribute(System.IO.FileAttributes,System.IO.FileAttributes)">
            <summary>
            Checks whether the given attribute in the collection is included.
            </summary>
            <param name="source"><see cref="T:System.IO.FileAttributes"/> collection</param>
            <param name="attr">Attribute to check</param>
            <returns>True if exists, false if not</returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.Internal.InternalQuickIO">
            <summary>
            Provides internal methods. PathMatchAll IO operations are called from here.
            </summary>
            <summary>
            Provides internal methods. PathMatchAll IO operations are called from here.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.CreateDirectory(System.String,System.Boolean)">
            <summary>
            Creates a new directory. If <paramref name="recursive"/> is false, the parent directory must exists.
            </summary>
            <param name="uncDirectoryPath">Directory path</param>
            <param name="recursive">If <paramref name="recursive"/> is false, the parent directory must exist.</param>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the given directory. On request  all contents, too.
            </summary>
            <param name="uncDirectoryPath">Path of directory to delete</param>
            <param name="recursive">If <paramref name="recursive"/> is true then all subfolders are also deleted.</param>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
            <exception cref="T:SchwabenCode.QuickIO.DirectoryNotEmptyException">The directory is not empty.</exception>
            <remarks>Function loads every file and attribute. Alls read-only flags will be removed before removing.</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.GetDirectoryStatistics(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Determines the statistics of the given directory. This includes the number of files, folders and the total size in bytes.
            </summary>
            <param name="pathInfo">PathInfo of the directory to generate the statistics.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>Provides the statistics of the directory</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.GetDiskInformation(System.String)">
            <summary>
            Determines metadata of network shares
            </summary>
            <param name="rootPath">Share to check</param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODiskInformation"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.MoveFile(System.String,System.String)">
            <summary>
            Moves a file
            </summary>
            <param name="sourceFileName">Full source path</param>
            <param name="destFileName">Full target path</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.CreateSafeFileHandle(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> and fills <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from the passes path.
            </summary>
            <param name="pathInfo">Path to the file system entry</param>
            <returns><see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.CreateSafeFileHandle(System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> and fills <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from the passes path.
            </summary>
            <param name="path">Path to the file system entry</param>
            <returns><see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.OpenReadWriteFileSystemEntryHandle(System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> and fills <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from the passes path.
            </summary>
            <param name="path">Path to the file system entry</param>
            <returns><see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.CreateFile(System.String,System.IO.FileAccess,System.IO.FileShare,System.IO.FileMode,System.IO.FileAttributes)">
            <summary>
            Creates a new file.
            </summary>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.DeleteFile(System.String)">
            <summary>
            Removes a file.
            </summary>
            <param name="path">Path to the file to remove</param>
            <exception cref="T:System.IO.FileNotFoundException">This error is fired if the specified file to remove does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.DeleteFiles(System.String,System.Boolean)">
            <summary>
            Deletes all files in the given directory.
            </summary>
            <param name="directoryPath">Path of directory to clear</param>
            <param name="recursive">If true all files in all all subfolders included</param>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
            <exception cref="T:System.IO.FileNotFoundException">This error will be fired when attempting a file to delete, which does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.CopyFile(System.String,System.String,System.Int32@,System.Boolean)">
            <summary>
            Copies a file and overwrite existing files if desired.
            </summary>
            <param name="sourceFilePath">Full source path</param>
            <param name="targetFilePath">Full target path</param>
            <param name="win32Error">Last error occured</param>
            <param name="overwrite">true to overwrite existing files</param>
            <returns>True if copy succeeded, false if not. Check last Win32 Error to get further information.</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.AddAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Adds a file attribute
            </summary>
            <param name="path">Affected target</param>
            <param name="attribute">Attribute to add</param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.RemoveAllFileAttributes(System.String)">
            <summary>
            Sets all attributes to <see cref="F:System.IO.FileAttributes.Normal"/>
            </summary>
            <param name="path">Path to file or directory</param>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error will be fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.RemoveAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Remove a file attribute
            </summary>
            <param name="path">Affected target</param>
            <param name="attribute">Attribute to remove</param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the entry.
            </summary>
            <param name="uncPath">The path to the entry. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the entry.</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SafeGetAttributes(System.String,System.Int32@)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the entry.
            </summary>
            <param name="path">The path to the entry. </param>
            <param name="win32Error">Win32 Error Code</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the entry.</returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the entry on the specified path.
            </summary>
            <param name="path">The path to the entry.</param>
            <param name="attributes">A bitwise combination of the enumeration values.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Unmatched Exception</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SetAllFileTimes(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="pathInfo">Affected file or directory</param>     
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Sets the time at which the file or directory was created (UTC)
            </summary>
            <param name="pathInfo">Affected file or directory</param>     
            <param name="utcTime">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Sets the time at which the file or directory was last written to (UTC)
            </summary>
            <param name="pathInfo">Affected file or directory</param>     
            <param name="utcTime">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Sets the time at which the file or directory was last accessed to (UTC)
            </summary>
            <param name="pathInfo">Affected file or directory</param>     
            <param name="utcTime">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.TryGetFindDataFromPath(System.String,SchwabenCode.QuickIO.Win32.Win32FindData@)">
            <summary>
            Gets the <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from the passed path.
            </summary>
            <param name="fullpath">Path</param>
            <param name="win32FindData"><seealso cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/>. Will be null if path does not exist.</param>
            <returns>true if path is valid and <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> is set</returns>
            <remarks>
            <see>
                <cref>QuickIOCommon.NativeExceptionMapping</cref>
            </see> if invalid handle found.
            </remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.FindFirstSafeFileHandle(System.String,SchwabenCode.QuickIO.Win32.Win32FindData,System.Int32@)">
            <summary>
            Returns the <see cref="T:SchwabenCode.QuickIO.Win32.Win32FileHandle"/> and fills <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from the passes path.
            </summary>
            <param name="path">Path to the file system entry</param>
            <param name="win32FindData"></param>
            <param name="win32Error">Last error code. 0 if no error occurs</param>
            <returns><see cref="T:SchwabenCode.QuickIO.Win32.Win32FileHandle"/></returns>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">This error is fired if the specified path or a part of them does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.Exists(System.String)">
            <summary>
            Reurns true if passed path exists
            </summary>
            <param name="path">Path to check</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.SafeGetFindDataFromPath(System.String)">
            
            <summary>
            Returns the <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/> from specified <paramref name="fullpath"/>
            </summary>
            <param name="fullpath">Path to the file system entry</param>
            <returns><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIO.EnumerateShares``1(SchwabenCode.QuickIO.QuickIOShareApiReadLevel,System.String)">
            <summary>
            Enumerate shares of specific machine. If no machine is specified, local machine is used
            </summary>
            <returns>Collection of <see cref="T:SchwabenCode.QuickIO.QuickIOShareInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon">
            <summary>
            Provides several methods for internal purposes.
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon.Constants">
            <summary>
            Common Constants
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon.Constants.InvalidFileAttributes">
            <summary>
            Represents return value of invalid request of get the file attributes of a system entry.
            Is equal to UInt32.MaxValue
            See http://msdn.microsoft.com/en-us/library/windows/desktop/aa364944(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon.DetermineFileSystemEntry(System.String)">
            <summary>
            Determines the type based on the attributes of the path
            </summary>
            <param name="fullPath">Full path</param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon.DetermineFileSystemEntry(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Determines the type based on the attributes of the handle
            </summary>
            <param name="findData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Internal.InternalQuickIOCommon.NativeExceptionMapping(System.String,System.Int32)">
            <summary>
            Exception Mapping
            </summary>
            <param name="path"></param>
            <param name="errorCode">errorCode</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods">
            <summary>
            Native Methods - take a look on www.pinvoke.net
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.SetAllFileTimes(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Sets the last all times for files or directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.SetCreationFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int64@,System.IntPtr,System.IntPtr)">
            <summary>
            Sets the last creation time for files or directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.SetLastAccessFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr,System.Int64@,System.IntPtr)">
            <summary>
            Sets the last acess time for files or directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.SetLastWriteFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr,System.IntPtr,System.Int64@)">
            <summary>
            Sets the last write time for files or directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.CreateDirectory(System.String,System.IntPtr)">
            <summary>
            Create directory
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.CreateFile(System.String,System.IO.FileAccess,System.IO.FileShare,System.IntPtr,System.IO.FileMode,System.IO.FileAttributes,System.IntPtr)">
            <summary>
            Creates a file / directory or opens an handle for an existing file.
            <b>If you want to get an handle for an existing folder use <see cref="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.OpenReadWriteFileSystemEntryHandle(System.String,System.UInt32,System.IO.FileShare,System.IntPtr,System.IO.FileMode,System.UInt32,System.IntPtr)"/> with ( 0x02000000 ) as attribute and FileMode ( 0x40000000 | 0x80000000 )</b>
            Otherwise it you'll get an invalid handle
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.OpenReadWriteFileSystemEntryHandle(System.String,System.UInt32,System.IO.FileShare,System.IntPtr,System.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Use this to open an handle for an existing file or directory to change for example the timestamps
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.CreateFileForAppend(System.String,System.UInt32,System.IO.FileShare,System.IntPtr,System.IO.FileMode,System.IO.FileAttributes,System.IntPtr)">
            <summary>
            Open handle for appending
            <br/>
            FileMode has to be 0x0004 for internal appending mode
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.FindFirstFile(System.String,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Finds first file of given path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.FindNextFile(SchwabenCode.QuickIO.Win32.Win32FileHandle,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Finds next file of current handle
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.MoveFile(System.String,System.String)">
            <summary>
            Moves a directory
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copy file
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.DeleteFile(System.String)">
            <summary>
            Removes a file.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.RemoveDirectory(System.String)">
            <summary>
            Removes a file.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.SetFileAttributes(System.String,System.UInt32)">
            <summary>
            Set File Attributes
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.GetFileAttributes(System.String)">
            <summary>
            Gets Attributes of given path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.FindClose(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Close Hnalde
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.LocalFree(System.IntPtr)">
            <summary>
            Free unmanaged memory
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.GetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)">
            <summary>
            QuickIOShareInfo information
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.PInvoke.Win32SafeNativeMethods.NetShareEnum(System.String,System.Int32,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Enumerate shares (NT)
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/windows/desktop/bb525387(v=vs.85).aspx</remarks>
        </member>
        <member name="T:SchwabenCode.QuickIO.PInvoke.Win32SecurityObjectType">
            <summary>
            Win32 Security Object Type
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.SetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.SetAttributes(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.SetAttributes(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.GetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.GetAttributes(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.GetAttributes(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.RemoveAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.RemoveAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.RemoveAttribute(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.RemoveAttribute(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.AddAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.AddAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.AddAttribute(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIO.AddAttribute(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIODirectory">
            <summary>
            Provides static methods to access folders. For example creating, deleting and retrieving content and security information such as the owner.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Compress(System.String,System.String,System.Boolean,System.IO.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Compresses a directory by using <see>
                    <cref>ZipFile.CreateFromDirectory</cref>
                </see>
            </summary>
            <param name="directoryFullPath">Directory fullname to zip</param>
            <param name="zipFullPath">Zipfile fullname to save</param>
            <param name="overWriteExistingZip">true to overwrite existing zipfile</param>
            <param name="compressionLevel"><see cref="T:System.IO.Compression.CompressionLevel"/></param>
            <param name="includeBaseDirectory">True to include basedirectory</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">if <paramref name="directoryFullPath"/> does not exist.</exception>
            <exception cref="T:SchwabenCode.QuickIO.FileAlreadyExistsException">if <paramref name="zipFullPath"/> does exist and <paramref name="overWriteExistingZip"/> is <i>false</i>.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Compress(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.Boolean,System.IO.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Compresses a directory by using <see>
                    <cref>ZipFile.CreateFromDirectory</cref>
                </see>
            </summary>
            <param name="directory">Directory to zip</param>
            <param name="zipFullPath">Zipfile fullname to save</param>
            <param name="overWriteExistingZip">true to overwrite existing zipfile</param>
            <param name="compressionLevel"><see cref="T:System.IO.Compression.CompressionLevel"/></param>
            <param name="includeBaseDirectory">True to include basedirectory</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Copy(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Copies a directory and all contents
            </summary>
            <param name="source">Source directory</param>
            <param name="target">Target directory</param>
            <param name="overwrite">true to overwrite existing files</param>
            <param name="cancellationToken">Cancallation Token</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Copy(SchwabenCode.QuickIO.QuickIODirectoryInfo,SchwabenCode.QuickIO.QuickIOPathInfo,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Copies a directory and all contents
            </summary>
            <param name="source">Source directory</param>
            <param name="target">Target directory</param>
            <param name="overwrite">true to overwrite existing files</param>
            <param name="cancellationToken">Cancallation Token</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Create(System.String,System.Boolean)">
            <summary>
            Creates a new directory. If <paramref name="recursive"/> is false, the parent directory must exist.
            </summary>
            <param name="path">The path to the directory.</param>
            <param name="recursive">If <paramref name="recursive"/> is false, the parent directory must exist.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/54a0at6s(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
            <example>
            Creates directory structure
            <code>
                public static void Create_With_StringPath_Example()
                {
                    // Creates directory C:\temp\QuickIOTest\sub\folder\tree and all not existing parent folders
                    QuickIODirectory.Create( @"C:\temp\QuickIOTest\sub\folder\tree", recursive: true );
                }
            </code>
            </example>
            <example>
            Shows how to handle sample exception if parent directory does not exist.
            <code>
                public static void Create_With_StringPath_Example()
                {
                    try
                    {
                         QuickIODirectory.Create( @"C:\temp\QuickIOTest\sub\folder\tree", recursive: false );
                    }
                    catch ( PathNotFoundException pathNotFoundException )
                    {
                        // Parent directory does not exist.
                    }
                }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Create(SchwabenCode.QuickIO.QuickIOPathInfo,System.Boolean)">
            <summary>
            Creates a new directory. If <paramref name="recursive"/> is false, the parent directory must exist.
            </summary>
            <param name="path">The directory.</param>
            <param name="recursive">If <paramref name="recursive"/> is false, the parent directory must exist.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/54a0at6s(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
            <example>
            Creates directory structure
            <code>
                public static void Create_With_PathInfo_Example( );
                {
                    QuickIOPathInfo pathInfo = new QuickIOPathInfo( @"C:\temp\QuickIOTest\sub\folder\tree" );
            
                    // Creates directory C:\temp\QuickIOTest\sub\folder\tree and all not existing parent folders
                    QuickIODirectory.Create( pathInfo, recursive: true );
                }
            </code>
            </example>
            <example>
            Shows how to handle sample exception if parent directory does not exist.
            <code>
                public static void Create_With_StringPath_Example()
                {
                    QuickIOPathInfo pathInfo = new QuickIOPathInfo( @"C:\temp\QuickIOTest\sub\folder\tree" );
            
                    try
                    {
                         QuickIODirectory.Create( pathInfo, recursive: false );
                    }
                    catch ( PathNotFoundException pathNotFoundException )
                    {
                        // Parent directory does not exist.
                    }
                }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory. 
            </summary>
            <param name="path">The name of the directory to remove. </param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false. </param>
            <remarks>http://msdn.microsoft.com/en-us/library/fxeahc5f(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
            <exception cref="T:SchwabenCode.QuickIO.DirectoryNotEmptyException">The directory is not empty.</exception>
            <example>
            Creates directory structure
            <code>
                public static void Create_With_StringPath_Example()
                {
                    // Deletes directory C:\temp\QuickIOTest\sub\folder\tree and subfolders and files
                    QuickIODirectory.Delete( @"C:\temp\QuickIOTest\sub\folder\tree", recursive: true );
                }
            </code>
            </example>
            <example>
            Shows how to handle sample exception if directory is not empty
            <code>
                public static void Create_With_StringPath_Example()
                {
                    try
                    {
                         QuickIODirectory.Delete( @"C:\temp\QuickIOTest\sub\folder\tree", recursive: false );
                    }
                    catch ( DirectoryNotEmptyException directoryNotEmptyException )
                    {
                        // Directoy is not empty
                    }
                }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Delete(SchwabenCode.QuickIO.QuickIOPathInfo,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory. 
            </summary>
            <param name="info">The name of the directory to remove. </param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false. </param>
            <remarks>http://msdn.microsoft.com/en-us/library/fxeahc5f(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
            <exception cref="T:SchwabenCode.QuickIO.DirectoryNotEmptyException">The directory is not empty.</exception>
            <example>
            Creates directory structure
            <code>
                public static void Create_With_StringPath_Example()
                {
                    QuickIOPathInfo pathInfo = new QuickIOPathInfo( @"C:\temp\QuickIOTest\sub\folder\tree" );
            
                    // Deletes directory C:\temp\QuickIOTest\sub\folder\tree and subfolders and files
                    QuickIODirectory.Delete( pathInfo, recursive: true );
                }
            </code>
            </example>
            <example>
            Shows how to handle sample exception if directory is not empty
            <code>
                public static void Create_With_StringPath_Example()
                {
                    QuickIOPathInfo pathInfo = new QuickIOPathInfo( @"C:\temp\QuickIOTest\sub\folder\tree" );
            
                    try
                    {
                         QuickIODirectory.Delete( pathInfo, recursive: false );
                    }
                    catch ( DirectoryNotEmptyException directoryNotEmptyException )
                    {
                        // Directoy is not empty
                    }
                }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectoryPaths(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directory names in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383304(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectoryPaths(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directory names in a specified path.
            </summary>
            <param name="info">The directory to search.</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383304(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directories in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383304(v=vs.110).aspx</remarks>
            <example>
            <code>
            // Get subfolders
            IEnumerable&gt;QuickIODirectoryInfo&lt; allSubFolders = QuickIODirectory.EnumerateDirectories( @"C:\temp\QuickIO", SearchOption.AllDirectories );
            
            foreach ( QuickIODirectoryInfo directoryInfo in allSubFolders )
            {
                Console.WriteLine( "Directory found: {0} Readonly: {1}", directoryInfo.FullName, directoryInfo.IsReadOnly );
            }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectories(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directories in a specified path.
            </summary>
            <param name="info">The directory to search.</param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383304(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFilePaths(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names in a specified path.
            </summary>
            <param name="path">The directory to search. </param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383458(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFilePaths(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names in a specified path.
            </summary>
            <param name="info">The directory to search. </param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383458(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
             <summary>
             Returns an enumerable collection of files in a specified path.
             </summary>
             <param name="path">The directory to search. </param>
             <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
             <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
             <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
             <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
             <remarks>http://msdn.microsoft.com/en-us/library/dd383458(v=vs.110).aspx</remarks>
             <example>
             <code>
             // Get subfiles
             IEnumerable&lt;QuickIOFileInfo&gt; allSubFiles = QuickIODirectory.EnumerateFiles( @"C:\temp\QuickIO", SearchOption.AllDirectories );
             
             foreach ( QuickIOFileInfo fileInfo in allSubFiles )
             {
                 Console.WriteLine( "File found: {0} Readonly: {1}", fileInfo.FullName, fileInfo.IsReadOnly );
             }
            </code>
             </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFiles(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of files in a specified path.
            </summary>
            <param name="directoryInfo">The directory to search. </param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383458(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search. </param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is TopDirectoryOnly.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by path and that match the specified search pattern and option.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383459(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateFileSystemEntries(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="directoryInfo">The directory to search. </param>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is TopDirectoryOnly.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by path and that match the specified search pattern and option.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383459(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Exists(System.String)">
            <summary>
            Checks whether the given directory exists.
            </summary>
            <param name="path">The path to test. </param>
            <returns>true if exists; otherwise, false.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.exists(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Searched for file but found folder.</exception>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Exists(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Checks whether the given directory exists.
            </summary>
            <param name="pathInfo">The path to test. </param>
            <returns>true if exists; otherwise, false.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.exists(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Searched for file but found folder.</exception>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Exists(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Checks whether the given directory exists.
            </summary>
            <param name="directoryInfo">The path to test. </param>
            <returns>true if exists; otherwise, false.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.exists(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Searched for file but found folder.</exception>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectoryMetadata(System.String,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Receives <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/> of current directory
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectoryMetadata(SchwabenCode.QuickIO.QuickIODirectoryInfo,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Receives <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/> of current directory
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.EnumerateDirectoryMetadata(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Receives <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/> of current directory
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a directory
            </summary>
            <param name="from">Fullname to move</param>
            <param name="to">Full targetname</param>
            <param name="overwrite">true to overwrite target</param>
            <exception cref="T:SchwabenCode.QuickIO.DirectoryAlreadyExistsException">Target exists</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetStatistics(System.String)">
            <summary>
            Gets the directory statistics: total files, folders and bytes
            </summary>
            <param name="path"></param>
            <returns>A <see cref="T:SchwabenCode.QuickIO.QuickIOFolderStatisticResult"/> object that holds the folder statistics such as number of folders, files and total bytes</returns>
            <example>
            This example shows how to call <see>
                    <cref>GetStatistics</cref>
                </see>
                and write the result to the console.
            <code>
            public static void GetStatistics_With_StringPath_Example()
            {
               const string targetDirectoryPath = @"C:\temp\QuickIOTest";
            
               // Get statistics
               QuickIOFolderStatisticResult statsResult = QuickIODirectory.GetStatistics( targetDirectoryPath );
            
               // Output
               Console.WriteLine( "[Stats] Folders: '{0}' Files: '{1}' Total TotalBytes '{2}'", statsResult.FolderCount, statsResult.FileCount, statsResult.TotalBytes );
            }
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetStatistics(SchwabenCode.QuickIO.QuickIOPathInfo)">
             <summary>
             Gets the directory statistics: total files, folders and bytes
             </summary>
             <param name="pathInfo"></param>
             <returns>A <see cref="T:SchwabenCode.QuickIO.QuickIOFolderStatisticResult"/> object that holds the folder statistics such as number of folders, files and total bytes</returns>
             <example>
             This example shows how to call <see>
                     <cref>GetStatistics</cref>
                 </see>
                 with <see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/> and write the result to the console.
             <code>
            public static void GetStatistics_With_PathInfo_Example()
            {
                QuickIOPathInfo targetDirectoryPathInfo = new QuickIOPathInfo( @"C:\temp\QuickIOTest" );
            
                // Get statistics
                QuickIOFolderStatisticResult stats = QuickIODirectory.GetStatistics( targetDirectoryPathInfo );
            
                // Output
                Console.WriteLine( "[Stats] Folders: '{0}' Files: '{1}' Total TotalBytes '{2}'", stats.FolderCount, stats.FileCount, stats.TotalBytes );
            }
             </code>
             </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetStatistics(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
             <summary>
             Gets the directory statistics: total files, folders and bytes
             </summary>
             <param name="directoryInfo"></param>
             <returns>A <see cref="T:SchwabenCode.QuickIO.QuickIOFolderStatisticResult"/> object that holds the folder statistics such as number of folders, files and total bytes</returns>
             <example>
             This example shows how to call <see>
                     <cref>GetStatistics</cref>
                 </see>
                 with <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/> and write the result to the console.
             <code>
            public static void GetStatistics_With_DirectoryInfo_Example()
            {
                QuickIODirectoryInfo targetDirectoryPathInfo = new QuickIODirectoryInfo( @"C:\temp\QuickIOTest" );
            
                // Get statistics
                QuickIOFolderStatisticResult stats = QuickIODirectory.GetStatistics( targetDirectoryPathInfo );
            
                // Output
                Console.WriteLine( "[Stats] Folders: '{0}' Files: '{1}' Total TotalBytes '{2}'", stats.FolderCount, stats.FileCount, stats.TotalBytes );
            }
             </code>
             </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAttributes(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetAttributes(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.RemoveAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.RemoveAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.RemoveAttribute(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.AddAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.AddAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.AddAttribute(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTime(System.String)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTime(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetCreationTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTime(System.String)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTime(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTime(System.String)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTime(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception> 
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception> 
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimes(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimes(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimes(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimesUtc(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimesUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetAllFileTimesUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTime(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetCreationTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTime(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTime(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="path">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.SetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIODirectoryInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetDirectoryRoot(System.String)">
            <summary>
            Returns the root information
            </summary>
            <param name="path">The path of a file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="path"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetDirectoryRoot(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the root information
            </summary>
            <param name="info">A file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="info"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectory.GetDirectoryRoot(SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Returns the root information
            </summary>
            <param name="info">A file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="info"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIODirectoryInfo">
            <summary>
            Provides properties and instance methods for directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.#ctor(System.String)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates the folder information on the basis of the path and the handles
            </summary>
            <param name="pathInfo"><see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/></param>
            <param name="win32FindData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.#ctor(System.String,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates the folder information on the basis of the path and the handles
            </summary>
            <param name="fullname">Full path to the directory</param>
            <param name="win32FindData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODirectoryInfo.IsRoot">
            <summary>
            Returns true if current path is root
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODirectoryInfo.Exists">
            <summary>
            Returns true if directory exists. Result starts a file system call and is not cached.
            </summary>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Path exists but it's a file..</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateDirectoryPaths(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directory names.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">Specifiy depth with <see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Type of return</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of directories in a specified path.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">Specifiy depth with <see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options</param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateFilePaths(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOPathType,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names in a specified path.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">Specifiy depth with <see cref="T:System.IO.SearchOption"/></param>
            <param name="pathFormatReturn">Specifies the type of path to return.</param>
            <param name="enumerateOptions">Options</param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of files in a specified path.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">Specifiy depth with <see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateFileSystemEntries(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">Specifiy depth with <see cref="T:System.IO.SearchOption"/></param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <param name="pathFormatReturn">Type of return</param>
            <returns>An enumerable collection of file-system entries in the directory specified by path and that match the specified search pattern and option.</returns>
            <remarks><b>Requires .NET 4.0 or higher</b><br /><u>Warning:</u> parallel file system browsing on the same hard disk (HDD/SSD) will decrease performance. Use this only on stripped RAIDs or with network shares.</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.EnumerateFileSystemEntryInfos(System.String,System.IO.SearchOption,SchwabenCode.QuickIO.QuickIOEnumerateOptions)">
            <summary>
            Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="pattern">Search pattern. Uses Win32 native filtering.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is TopDirectoryOnly.</param>
            <param name="enumerateOptions">Options <see cref="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions"/></param>
            <returns>An enumerable collection of file-system entries in the directory specified by path and that match the specified search pattern and option.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.AsDirectoryInfo">
            <summary>
            Returns a <see cref="T:System.IO.DirectoryInfo"/> of the current path of this folder
            </summary>
            <returns><see cref="T:System.IO.DirectoryInfo"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryInfo.op_Explicit(System.IO.DirectoryInfo)~SchwabenCode.QuickIO.QuickIODirectoryInfo">
            <summary>
            Explizit Cast
            </summary>
            <param name="directoryInfo"><see cref="T:System.IO.DirectoryInfo"/></param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata">
            <summary>
            Directory metadata information
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryMetadata.#ctor(System.String,SchwabenCode.QuickIO.Win32.Win32FindData,System.Collections.Generic.IList{SchwabenCode.QuickIO.QuickIODirectoryMetadata},System.Collections.Generic.IList{SchwabenCode.QuickIO.QuickIOFileMetadata})">
            <summary>
            Creates instance of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryMetadata"/>
            </summary>
            <param name="win32FindData">Win32FindData of current directory</param>
            <param name="subDirs">Directories in current directory</param>
            <param name="subFiles">Files in current directory</param>
            <param name="uncFullname">UNC Path of current directory</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODirectoryMetadata.Directories">
            <summary>
            Directories in current directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODirectoryMetadata.Files">
            <summary>
            Files in current directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODirectoryMetadata.Bytes">
            <summary>
            Size of the file. 
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIODirectoryMetadata.ToDirectoryInfo">
            <summary>
            Returns a new instance of <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/> of the current directory
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIODiskInformation">
            <summary>
            Disk metadata information
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODiskInformation.FreeBytes">
            <summary>
            Total available number of bytes for the user who executed the API call.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODiskInformation.TotalBytes">
            <summary>
            Total bytes of share
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIODiskInformation.TotalFreeBytes">
            <summary>
            Total free bytes for all users
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileSystemEntry">
            <summary>
            Represents a file system entry type
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntry.#ctor(System.String,SchwabenCode.QuickIO.QuickIOFileSystemEntryType,System.IO.FileAttributes,System.UInt64)">
            <summary>
            Creates an instance of <see cref = "T:SchwabenCode.QuickIO.QuickIOFileSystemEntry"/>
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Path">
            <summary>
            Entry's fullname
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntry.GetPathUnc">
            <summary>
            Returns <see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Path"/> in unc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntry.GetPathRegular">
            <summary>
            Returns <see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Path"/> in regular.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Type">
            <summary>
            Entry type
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Attributes">
            <summary>
            Entry type
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntry.Bytes">
            <summary>
            Entry type
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.IWin32ApiShareInfo.GetShareName">
            <summary>
            Returns the share name
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.IWin32ApiShareInfo.GetShareType">
            <summary>
            Returns the share name
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.IWin32ApiShareInfo.GetRemark">
            <summary>
            Returns the remark
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindDataExtensions.IsDirectory(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Returns true if entry is a directory
            </summary>
            <remarks>Checks <see cref="F:System.IO.FileAttributes.Directory"/></remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindDataExtensions.IsFile(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Returns true if entry is a file
            </summary>
            <remarks>Checks <see cref="F:System.IO.FileAttributes.Directory"/></remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindDataExtensions.GetBytes(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Returns total size of entry in Bytes
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindDataExtensions.GetFileSystemEntryType(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Returns type of entry
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindDataExtensions.GetLastWriteTimeUtc(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Gets last write time based on UTC
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindDataExtensions.GetLastAccessTimeUtc(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Gets last access time based on UTC
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindDataExtensions.GetCreationTimeUtc(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Gets the creation time based on UTC
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindDataExtensions.ConvertDateTime(System.UInt32,System.UInt32)">
            <summary>
            Converts the PInvoke information into <see cref="T:System.DateTime"/>
            </summary>
            <param name="high"><see cref="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwHighDateTime"/> of <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
            <param name="low"><see cref="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwLowDateTime"/> of <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindDataExtensions.CombineHighLowInts(System.UInt32,System.UInt32)">
            <summary>
            Merges the PInvoke information
            </summary>
            <param name="high"><see cref="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwHighDateTime"/> of <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
            <param name="low"><see cref="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwLowDateTime"/> of <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindDataExtensions.DateTimeToFiletime(System.DateTime)">
            <summary>
            Converts DateTime to Win32 FileTime format
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FindDataExtensions.IsSystemDirectoryEntry(SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Checks whether a directory supplied by PINvoke is relevant
            </summary>
            <param name="win32FindData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
            <returns>true if is relevant; otherwise false</returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32ApiShareInfoAdmin">
            <summary>
            Gets the complete share information. Requires admin priviles.
            </summary>
            <remarks>See http://msdn.microsoft.com/en-us/library/windows/desktop/bb525408(v=vs.85).aspx</remarks>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32ApiShareInfoNormal">
            <summary>
            Use this Info bag if call with admin privilegs fails (fallback)
            </summary>
            <remarks>See http://msdn.microsoft.com/en-us/library/windows/desktop/bb525407(v=vs.85).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32ApiShareInfoNormal.GetShareName">
            <summary>
            Returns the share name
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32ErrorCodes">
            <summary>
            Win32 Error Code Collection
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32ErrorCodes.FormatMessage(System.Int32)">
            <summary>
            Formats <paramref name="errorCode"/> to a message
            </summary>
            <param name="errorCode">ErrorCode</param>
            <returns>Message or "Unknown" if <paramref name="errorCode"/> is not handles</returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32FileHandle">
            <summary>
            Provides a class for Win32 safe handle implementations
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandle.#ctor">
            <summary>
            Initializes a new instance of the Win32ApiFileHandle class, specifying whether the handle is to be reliably released.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the Win32ApiFileHandle class, specifying whether the handle is to be reliably released.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandle.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Win32ApiFileHandle class specifying whether to perform a normal dispose operation. 
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandleCollection.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an instance of with given directory path
            </summary>
            <param name="path">Directory</param>
            <param name="filterSystemEntries">Filters . and .. from system enumeration</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator.Current">
            <summary>
            Returns current element
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns current element
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an instance of <see cref = "T:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator"/>
            </summary>
            <param name = "directoryPath">UNC Path to directory</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator.MoveNext">
            <summary>
            Moves to next element
            </summary>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.Win32.Win32FileHandleEnumerator.Reset">
            <summary>
            You cannot reset this enumerator
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.Name">
            <summary>
            Returns name of entry (not fullname!)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.Attributes">
            <summary>
            Returns all <see cref="T:System.IO.FileAttributes"/> responding to this <see cref="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.FindData"/>
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.IsDirectory">
            <summary>
            Returns true if entry is a directory
            </summary>
            <remarks>Checks <see cref="F:System.IO.FileAttributes.Directory"/></remarks>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.IsFile">
            <summary>
            Returns true if entry is a file
            </summary>
            <remarks>Checks <see cref="F:System.IO.FileAttributes.Directory"/></remarks>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.Bytes">
            <summary>
            Returns total size of entry in Bytes
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.Win32.Win32FileSystemEntry.FileSystemEntryType">
            <summary>
            Returns type of entry
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32FileSystemEntrySecurityInformation">
            <summary>
            Win32 Security Information
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32FileTime">
            <summary>
            See http://www.pinvoke.net/default.aspx/Structures/FILETIME.html?diff=y
            Represents Win32 LongFileTime
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.Win32.Win32FindData">
            <summary>
            Structure of File Data given by Win32 API
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.dwFileAttributes">
            <summary>
            File Attributes
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftCreationTime_dwLowDateTime">
            <summary>
            Last Creation Time (Low DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftCreationTime_dwHighDateTime">
            <summary>
            Last Creation Time (High DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastAccessTime_dwLowDateTime">
            <summary>
            Last Access Time (Low DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastAccessTime_dwHighDateTime">
            <summary>
            Last Access Time (High DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwLowDateTime">
            <summary>
            Last Write Time (Low DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.ftLastWriteTime_dwHighDateTime">
            <summary>
            Last Write Time (High DateTime)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.nFileSizeHigh">
            <summary>
            File Size High
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.nFileSizeLow">
            <summary>
            File Size Low
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.dwReserved0">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.dwReserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.cFileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.Win32.Win32FindData.cAlternateFileName">
            <summary>
            Alternate File Name
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOEnumerateOptions">
            <summary>
            Options for enumerations
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOEnumerateOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOEnumerateOptions.SuppressAllExceptions">
            <summary>
            Suppresses all exceptions
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFile">
            <summary>
            Provides static methods to access files. For example creating, deleting and retrieving content and security information such as the owner.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines by using the specified encoding.
            If the file does not exist, it creates the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't exist.</param>
            <param name="contents">The lines to append.</param>
            <param name="encoding">The character encoding.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383356(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AppendAllLines(SchwabenCode.QuickIO.QuickIOPathInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines by using the specified encoding.
            If the file does not exist, it creates the file.
            </summary>
            <param name="pathInfo">The file to append the lines to. The file is created if it doesn't exist.</param>
            <param name="contents">The lines to append.</param>
            <param name="encoding">The character encoding.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383356(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string.
            If the file does not exist, it creates the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143356(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AppendAllText(SchwabenCode.QuickIO.QuickIOPathInfo,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string.
            If the file does not exist, it creates the file.
            </summary>
            <param name="pathInfo">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143356(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Create(System.String,System.IO.FileAccess,System.IO.FileShare,System.IO.FileMode,System.IO.FileAttributes)">
            <summary>
            Creates a new file.
            </summary>
            <param name="fullName">The path to the file. </param>
            <param name="fileAccess"><see cref="T:System.IO.FileAccess"/> - default <see cref="F:System.IO.FileAccess.Write"/></param>
            <param name="fileShare"><see cref="T:System.IO.FileShare"/> - default <see cref="F:System.IO.FileShare.None"/></param>
            <param name="fileMode"><see cref="T:System.IO.FileMode"/> - default <see cref="F:System.IO.FileMode.Create"/></param>
            <param name="fileAttributes"><see cref="T:System.IO.FileAttributes"/> - default 0 (none)</param>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Create(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAccess,System.IO.FileShare,System.IO.FileMode,System.IO.FileAttributes)">
            <summary>
            Creates a new file.
            </summary>
            <param name="pathInfo">The path to the file. </param>
            <param name="fileAccess"><see cref="T:System.IO.FileAccess"/> - default <see cref="F:System.IO.FileAccess.Write"/></param>
            <param name="fileShare"><see cref="T:System.IO.FileShare"/> - default <see cref="F:System.IO.FileShare.None"/></param>
            <param name="fileMode"><see cref="T:System.IO.FileMode"/> - default <see cref="F:System.IO.FileMode.Create"/></param>
            <param name="fileAttributes"><see cref="T:System.IO.FileAttributes"/> - default 0 (none)</param>
            <exception cref="T:SchwabenCode.QuickIO.PathAlreadyExistsException">The specified path already exists.</exception>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Create(System.String,System.Int32)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The name of the file. </param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
            <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in <i>path</i>.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/981h90e5(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Create(SchwabenCode.QuickIO.QuickIOPathInfo,System.Int32)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="pathInfo">The name of the file. </param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
            <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in <i>path</i>.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/981h90e5(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CreateText(System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">The file. </param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.createtext(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CreateText(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="pathInfo">The file.</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.createtext(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CopyToDirectory(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file. Overwrites an existing file if <paramref name="overwrite"/> is true
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="targetDirectory">Target directory</param>      
            <param name="newFileName">New File name. Null or empty to use <paramref name="sourceFileName"/>'s name</param>
            <param name="overwrite">true to overwrite existing file</param>
            <remarks>http://msdn.microsoft.com/en-us/library/c6cfw35a(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.FileSystemIsBusyException">Filesystem is busy</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CopyToDirectory(SchwabenCode.QuickIO.QuickIOFileInfo,SchwabenCode.QuickIO.QuickIODirectoryInfo,System.String,System.Boolean)">
            <summary>
            Copies an existing file. Overwrites an existing file if <paramref name="overwrite"/>  is true
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="targetDirectory">Target directory</param>
            <param name="newFileName">New File name. Null or empty to use <paramref name="sourceFileName"/>' name</param>
            <param name="overwrite">true to overwrite existing files</param>
            <remarks>http://msdn.microsoft.com/en-us/library/c6cfw35a(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.FileSystemIsBusyException">Filesystem is busy</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Copy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies an existing file. Overwrites an existing file if <paramref name="overwrite"/>  is true
            </summary>
            <param name="source">The file to copy.</param>
            <param name="target">Target file</param>      
            <param name="overwrite">true to overwrite existing files</param>
            <param name="createRecursive">Creates parent path if not exists. Decreases copy performance</param>
            <remarks>http://msdn.microsoft.com/en-us/library/c6cfw35a(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.FileSystemIsBusyException">Filesystem is busy</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Delete(System.String)">
            <summary>
            Deletes the file. 
            </summary>
            <param name="path">The fullname of the file to be deleted.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.delete(v=vs.110).aspx</remarks>
            <exception cref="T:System.IO.FileNotFoundException">File does not exist.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Exists(System.String)">
            <summary>
            Checks whether the specified file exists.
            </summary>
            <param name="path">The path to check.</param>
            <returns><b>true</b> if the caller has the required permissions and path contains the name of an existing file; otherwise, <b>false</b></returns>
            <remarks>The original Exists method returns also false on null! http://msdn.microsoft.com/en-us/library/system.io.file.exists(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Searched for file but found folder.</exception>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Exists(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Checks whether the specified file exists.
            </summary>
            <param name="fileInfo">The the file to check.</param>
            <returns><b>true</b> if the caller has the required permissions and path contains the name of an existing file; otherwise, <b>false</b></returns>
            <remarks>The original Exists method returns also false on null! http://msdn.microsoft.com/en-us/library/system.io.file.exists(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Searched for file but found folder.</exception>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid.</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to give a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move. </param>
            <param name="destinationFileName">The new path for the file. Parent directory must exist.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.move(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Move(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Moves a file, providing the option to give a new file name.
            </summary>
            <param name="sourceFileInfo">The file to move.</param>
            <param name="destinationFolder">Target directory to move the file.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.move(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Move(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.QuickIODirectoryInfo)">
            <summary>
            Moves a file, providing the option to give a new file name.
            </summary>
            <param name="sourceFileInfo">The file to move.</param>
            <param name="destinationFolder">Target directory to move the file.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.move(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateHash(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.QuickIOHashImplementationType)">
            <summary>
            File content hash calculation
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateHash(System.Security.Cryptography.HashAlgorithm,System.IO.Stream)">
            <summary>
            File content hash calculation
            </summary>
            <example>
            <code>
            // Implementation of <see cref="M:SchwabenCode.QuickIO.QuickIOFile.CalculateSha256Hash(SchwabenCode.QuickIO.QuickIOPathInfo)"/>
            public static QuickIOHashResult CalculateSha256Hash( QuickIOPathInfo pathInfo )
            {
                using ( var fs = OpenRead( pathInfo ) )
                using ( var hashAlgorithm = SHA256.Create( ) )
                {
                    return CalculateHash( hashAlgorithm, fs );
                }
            }
            </code>
            </example>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateSha1Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File content hash calculation using SHA1
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha1Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateSha256Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File content hash calculation using SHA256
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
            <remarks>Not compatible with FIPS<br/>http://msdn.microsoft.com/de-de/library/hydyw22a(v=vs.110).aspx</remarks>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha256Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateSha384Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File content hash calculation using SHA384
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha384Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateSha512Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File content hash calculation using SHA512
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
            <remarks>Not compatible with FIPS<br/>http://msdn.microsoft.com/de-de/library/hydyw22a(v=vs.110).aspx</remarks>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha512Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.CalculateMD5Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File content hash calculation using MD5
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateMD5Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> 
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode"><see cref="T:System.IO.FileMode"/></param>
            <param name="access"><see cref="T:System.IO.FileAccess"/></param>
            <param name="share"><see cref="T:System.IO.FileShare"/> </param>
            <returns>A <see cref="T:System.IO.FileStream"/></returns>
            <remarks>http://msdn.microsoft.com/en-us/library/y973b725(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.Open(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/>
            </summary>
            <param name="pathInfo">The file to open. </param>
            <param name="mode"><see cref="T:System.IO.FileMode"/> </param>
            <param name="access"><see cref="T:System.IO.FileAccess"/></param>
            <param name="share"><see cref="T:System.IO.FileShare"/></param>
            <returns><see cref="T:System.IO.FileStream"/></returns>
            <remarks>http://msdn.microsoft.com/en-us/library/y973b725(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading. </param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openread(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenRead(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="pathInfo">The file to be opened for reading. </param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openread(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenFileStream(System.String,System.IO.FileAccess,System.IO.FileMode,System.IO.FileShare,System.Int32)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> 
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenAppendFileStream(System.String,System.IO.FileAccess,System.IO.FileMode,System.IO.FileShare,System.Int32)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> 
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">The file to be opened for reading. </param>
            <returns>A <see cref="T:System.IO.StreamReader"/>.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.opentext(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenText(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="pathInfo">The file. </param>
            <returns>A <see cref="T:System.IO.StreamReader"/>.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.opentext(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenWrite(System.String)">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <param name="path">The file.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openwrite(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenWrite(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <param name="pathInfo">The file. </param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openwrite(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenAppend(System.String)">
            <summary>
            Opens an existing file or creates a new file for appending.
            </summary>
            <param name="path">The file.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openwrite(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.OpenAppend(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Opens an existing file or creates a new file for appending.
            </summary>
            <param name="pathInfo">The file. </param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.openwrite(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A byte array containing the contents of the file.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.readallbytes(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllBytes(SchwabenCode.QuickIO.QuickIOPathInfo,System.Int32)">
            <summary>
            Reads the contents of the file into a byte collection.
            </summary>
            <param name="pathInfo">The file. </param>
            <param name="readBuffer">Read buffer byte size</param>
            <returns>A byte collection containing the contents.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.readallbytes(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllLines(System.String)">
            <summary>
            Reads all lines.
            </summary>
            <param name="path">The file. </param>
            <returns>A string collection containing all lines.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/s2tte0y1(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllLines(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Reads all lines.
            </summary>
            <param name="pathInfo">The file. </param>
            <returns>A string collection containing all lines.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/s2tte0y1(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Reads all lines with the specified encoding
            </summary>
            <param name="path">The file. </param>
            <param name="encoding">The encoding applied to the contents. </param>
            <returns>A string collection containing all lines.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/bsy4fhsa(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllLines(SchwabenCode.QuickIO.QuickIOPathInfo,System.Text.Encoding)">
            <summary>
            Reads all lines with the specified encoding
            </summary>
            <param name="pathInfo">The file. </param>
            <param name="encoding">The encoding applied to the contents. </param>
            <returns>A string collection containing all lines.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/bsy4fhsa(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllText(System.String)">
            <summary>
            Reads all text.
            </summary>
            <param name="path">The file. </param>
            <returns>A string represents the content.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/s2tte0y1(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllText(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Reads all text.
            </summary>
            <param name="pathInfo">The file. </param>
            <returns>A string represents the content.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Reads all text with the specified encoding.
            </summary>
            <param name="path">The file. </param>
            <param name="encoding">The encoding applied to the content. </param>
            <returns>A string represents the content.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143369(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.ReadAllText(SchwabenCode.QuickIO.QuickIOPathInfo,System.Text.Encoding)">
            <summary>
            Reads all text with the specified encoding.
            </summary>
            <param name="pathInfo">The file. </param>
            <param name="encoding">The encoding applied to the content. </param>
            <returns>A string represents the content.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143369(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes the specified byte array.
            If the file already exists, it is overwritten.
            </summary>
            <param name="path">The file. </param>
            <param name="bytes">The bytes to write. </param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.writeallbytes(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllBytes(SchwabenCode.QuickIO.QuickIOPathInfo,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes the specified byte array.
            If the file already exists, it is overwritten.
            </summary>
            <param name="pathInfo">The file. </param>
            <param name="bytes">The bytes to write. </param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.writeallbytes(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Writes a collection of strings.
            </summary>
            <param name="path">The file.</param>
            <param name="contents">The lines write to.</param>
            <param name="encoding">The character encoding to use.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383463(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllLines(SchwabenCode.QuickIO.QuickIOPathInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Writes a collection of strings.
            </summary>
            <param name="pathInfo">The file.</param>
            <param name="contents">The lines write to.</param>
            <param name="encoding">The character encoding to use.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/dd383463(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file. </param>
            <param name="contents">The string to write to. </param>
            <param name="encoding">The encoding to apply to the string.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143376(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.WriteAllText(SchwabenCode.QuickIO.QuickIOPathInfo,System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="pathInfo">The file. </param>
            <param name="contents">The string to write to. </param>
            <param name="encoding">The encoding to apply to the string.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143376(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAttributes(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attributes">New attributes to set.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="path">The path to the directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetAttributes(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetAttributes(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory or file.
            </summary>
            <param name="info">A directory or file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory or file.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.RemoveAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.RemoveAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.RemoveAttribute(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Removes the specified attribute from file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to remove </param>
            <returns>true if removed. false if not exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AddAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="path">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>Refreshed <see cref="T:System.IO.FileAttributes"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AddAttribute(SchwabenCode.QuickIO.QuickIOPathInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.AddAttribute(SchwabenCode.QuickIO.QuickIOFileInfo,System.IO.FileAttributes)">
            <summary>
            Adds the specified attribute to file or directory
            </summary>
            <param name="info">A directory or file. </param>
            <param name="attribute">Attribute to add </param>
            <returns>true if added. false if already exists in attributes</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTime(System.String)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTime(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the creation time of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the creation time of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getcreationtimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTime(System.String)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTime(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the time of last access of the file or directory
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the time of last access of the file or directory (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTime(System.String)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTime(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTime(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the time of the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception>   
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception> 
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the time of the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <returns>A <see cref="T:System.DateTime"/> structure. (UTC)</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetimeutc(v=vs.110).aspx</remarks>
            <exception cref="T:SchwabenCode.QuickIO.PathNotFoundException">No entry found for passed path</exception> 
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimes(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimes(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimes(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time the file was created.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <param name="lastWriteTime">The time that is to be used</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimesUtc(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimesUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetAllFileTimesUtc(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the dates and times of given directory or file.
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTime(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetCreationTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was created (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="creationTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTime(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastAccessTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last accessed (UTC)
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastAccessTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="path">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTime(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTime(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written
            </summary>
            <param name="info">Affected file or directory</param>
            <param name="lastWriteTime">The time that is to be used</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetime(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="path">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOPathInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.SetLastWriteTimeUtc(SchwabenCode.QuickIO.QuickIOFileInfo,System.DateTime)">
            <summary>
            Defines the time at which the file or directory was last written (UTC)
            </summary>
            <param name="info">Affected file or directory</param>     
            <param name="lastWriteTimeUtc">The time that is to be used (UTC)</param>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetimeutc(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetDirectoryRoot(System.String)">
            <summary>
            Returns the root information
            </summary>
            <param name="path">The path of a file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="path"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetDirectoryRoot(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Returns the root information
            </summary>
            <param name="info">A file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="info"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFile.GetDirectoryRoot(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the root information
            </summary>
            <param name="info">A file or directory. </param>
            <returns>A QuickIOPathInfo that represents the root or null if <paramref name="info"/> is root.</returns>
            <remarks>http://msdn.microsoft.com/en-us/library/system.io.directory.getdirectoryroot(v=vs.110).aspx</remarks>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileChunk">
            <summary>
            Represents a file chunk
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileChunk.Position">
            <summary>
            Start position
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileChunk.Bytes">
            <summary>
            Bytes
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.#ctor(System.UInt64,System.Byte[])">
            <summary>
            Represents a file chunk
            </summary>
            <param name="position">Start position</param>
            <param name="bytes">Bytes</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.ChunkEquals(SchwabenCode.QuickIO.QuickIOFileChunk)">
            <summary>
            First <see cref="M:SchwabenCode.QuickIO.QuickIOFileChunk.PositionEquals(SchwabenCode.QuickIO.QuickIOFileChunk)"/> then <see cref="M:SchwabenCode.QuickIO.QuickIOFileChunk.BytesEquals(SchwabenCode.QuickIO.QuickIOFileChunk)"/>.
            Does not overwrite default <see cref="M:SchwabenCode.QuickIO.QuickIOFileChunk.ChunkEquals(SchwabenCode.QuickIO.QuickIOFileChunk)"/> method!
            </summary>
            <param name="chunk">Chunks to verify with</param>
            <returns>Returns true if both executed methods are true</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.PositionEquals(SchwabenCode.QuickIO.QuickIOFileChunk)">
            <summary>
            Checks <see cref="P:SchwabenCode.QuickIO.QuickIOFileChunk.Position"/>
            </summary>
            <param name="chunk">Chunks to verify with</param>
            <returns>True if both position equals</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.InternalPositionEquals(SchwabenCode.QuickIO.QuickIOFileChunk)">
            <summary>
            Internal usage. Does not verify parameter.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.BytesEquals(SchwabenCode.QuickIO.QuickIOFileChunk)">
            <summary>
            Checks <see cref="P:SchwabenCode.QuickIO.QuickIOFileChunk.Bytes"/>
            </summary>
            <param name="chunk">Chunks to verify with</param>
            <returns>True if both bytes equals. Uses <see>
                    <cref>IEnumerable.SequenceEqual</cref>
                </see>
            </returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.InternalBytesEquals(SchwabenCode.QuickIO.QuickIOFileChunk)">
            <summary>
            Internal usage. Does not verify parameter.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateHash(SchwabenCode.QuickIO.QuickIOHashImplementationType)">
            <summary>
            File chunk hash calculation
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateHash(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateSha1Hash">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateSha256Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateSha384Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateSha512Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileChunk.CalculateMD5Hash(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            File chunk hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileCompareCriteria">
            <summary>
            Options for file compare. You can select multiple flags or use <see cref="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.All"/> for all options
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.All">
            <summary>
            PathMatchAll options will be verified
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.TimestampsAll">
            <summary>
            Compares all timestamps
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.TimestampCreated">
            <summary>
            Compares timestamp of file creation
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.TimestampLastWritten">
            <summary>
            Compares timestamp of file last written to
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.TimestampLastAccessed">
            <summary>
            Compares timestamp of file last accessed to
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.ByteLength">
            <summary>
            Compares length of file (without checking the content!)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileCompareCriteria.Content">
            <summary>
            Compares the contents. Requires read access.
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileInfo">
            <summary>
            Provides properties and instance methods for files
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.AppendAllLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file.
            Uses UTF-8 Encoding.
            </summary>
            <param name="contents">The lines to append.</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.AppendAllLines(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines by using the specified encoding.
            If the file does not exist, it creates the file.
            </summary>
            <param name="contents">The lines to append.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.AppendAllText(System.String)">
            <summary>
            Appends the specified string.
            If the file does not exist, it creates the file.
            Uses UTF-8 Encoding.
            </summary>
            <param name="contents">The string to append to the file.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143356(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.AppendAllText(System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string.
            If the file does not exist, it creates the file.
            </summary>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding.</param>
            <remarks>http://msdn.microsoft.com/en-us/library/ms143356(v=vs.110).aspx</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileInfo.DefaultChunkSize">
            <summary>
            Default ChunkSize
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetFileChunks(System.Int32)">
            <summary>
            Returns the file chunks by given chunksize
            </summary>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns>Collection of chunks. On enumerator, the file gets read.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetFileChunksEqual(SchwabenCode.QuickIO.QuickIOFileInfo,System.Int32)">
            <summary>
            Returns the chunks of current file that are identical with the other file
            </summary>
            <param name="file">File to compare</param>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns>Returns the chunks of current file that are identical with the other file</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetFileChunksUnequal(SchwabenCode.QuickIO.QuickIOFileInfo,System.Int32)">
            <summary>
            Returns the chunks of current file that are NOT identical with the other file
            </summary>
            <param name="file">File to compare</param>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns>Returns the chunks of current file that are NOT identical with the other file</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetFileChunksEnumerator(System.Int32)">
            <summary>
            Returns the <see>
                    <cref>IEnumerator</cref></see>
              of <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetFileChunks(System.Int32)"/>
            </summary>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualContents(SchwabenCode.QuickIO.QuickIOFileInfo,System.Int32)">
            <summary>
            Checks if both file contents are equal.
            Opens both files for read and breaks on first unequal chunk.
            </summary>
            <param name="file">File to compare</param>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns>true if contents are equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.InternalEnumerateFileChunks(System.Int32)">
            <summary>
            Reads the file and returns containign chunks
            </summary>
            <param name="chunkSize">Chunk size (Bytes)</param>
            <returns>Collection of chunks</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualByteLength(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Checks byte length (NOT CONTENTS!)
            </summary>
            <param name="file">File to compare with</param>
            <returns>Returns true if both <see cref="P:SchwabenCode.QuickIO.QuickIOFileInfo.Bytes"/> properties are equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestamps(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the if all timestamps are equal
            </summary>
            <param name="file">File to compare with</param>
            <returns>Returns the if all timestamps are equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CompareTimestamps(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Checks all timestamps.
            </summary>
            <param name="file">File to compare with</param>
            <returns>If collection is empty, all timestamps are equal. Otherwise unequal timestamp is returned.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampCreated(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the if timestamp 'created' is equal
            </summary>
            <param name="file">File to compare with</param>
            <returns>Returns the if timestamp 'created' is equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.InternalIsEqualTimestampCreated(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Same as <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampCreated(SchwabenCode.QuickIO.QuickIOFileInfo)"/> but does not check the param for null
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampLastAccessed(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the if timestamp 'last accessed' is equal
            </summary>
            <param name="file">File to compare with</param>
            <returns>Returns the if timestamp 'last accessed' is equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.InternalIsEqualTimestampLastAccessed(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Same as <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampLastAccessed(SchwabenCode.QuickIO.QuickIOFileInfo)"/> but does not check the param for null
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampsLastWritten(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Returns the if timestamp 'last written to' is equal
            </summary>
            <param name="file">File to compare with</param>
            <returns>Returns the if timestamp 'last written to' is equal</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.InternalIsEqualTimestampsLastWritten(SchwabenCode.QuickIO.QuickIOFileInfo)">
            <summary>
            Same as <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.IsEqualTimestampsLastWritten(SchwabenCode.QuickIO.QuickIOFileInfo)"/> but does not check the param for null
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetCompressStream(System.Int32)">
            <summary>
            Compress all data of file and returns filled <see cref="T:System.IO.MemoryStream"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetDecompressStream(System.Int32)">
            <summary>
            Decompress all data of file and returns filled <see cref="T:System.IO.MemoryStream"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.InternalGetGZipStream(System.Int32,System.IO.Compression.CompressionMode)">
            <summary>
            Internal Usage only
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CompressData">
            <summary>
            Returns all bytes of <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetCompressStream(System.Int32)"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.DecompressData">
            <summary>
            Returns all bytes of <see cref="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetDecompressStream(System.Int32)"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.#ctor(System.String)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFileInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.#ctor(System.IO.FileInfo)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFileInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Create new instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFileInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.#ctor(System.String,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates the file information on the basis of the path and <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/>
            </summary>
            <param name="fullName">Full path to the file</param>
            <param name="win32FindData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates the file information on the basis of the path and <see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/>
            </summary>
            <param name="pathInfo">Full path to the file</param>
            <param name="win32FindData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileInfo.Exists">
            <summary>
            Returns true if file exists. Uncached.
            </summary>
            <exception cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">Path exists but it's a directory.</exception>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileInfo.Bytes">
            <summary>
            Size of the file. Cached.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileInfo.Length">
            <summary>
            Size of the file (returns <see cref="P:SchwabenCode.QuickIO.QuickIOFileInfo.Bytes"/>).
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateHash(SchwabenCode.QuickIO.QuickIOHashImplementationType)">
            <summary>
            File content hash calculation
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateHash(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            File content hash calculation
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateSha1Hash">
            <summary>
            File content hash calculation using SHA1
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateSha256Hash">
            <summary>
            File content hash calculation using SHA256
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateSha384Hash">
            <summary>
            File content hash calculation using SHA384
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateSha512Hash">
            <summary>
            File content hash calculation using SHA512
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.CalculateMD5Hash">
            <summary>
            File content hash calculation using MD5
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.GetMetadata">
            <summary>
            Receives <see cref="T:SchwabenCode.QuickIO.QuickIOFileMetadata"/> of current file
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOFileMetadata"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/>
            </summary>
            <param name="mode"><see cref="T:System.IO.FileMode"/> </param>
            <param name="access"><see cref="T:System.IO.FileAccess"/></param>
            <param name="share"><see cref="T:System.IO.FileShare"/></param>
            <returns><see cref="T:System.IO.FileStream"/></returns>
            <remarks>http://msdn.microsoft.com/en-us/library/y973b725(v=vs.110).aspx</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.OpenRead">
            <summary>
            Opens an existing file for reading.
            </summary>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.OpenText">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <returns>A <see cref="T:System.IO.StreamReader"/>.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.OpenWrite">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.OpenAppend">
            <summary>
            Opens an existing file or creates a new file for appending.
            </summary>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> with Write access.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.AsFileInfo">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> of the current path of this file
            </summary>
            <returns><see cref="T:System.IO.DirectoryInfo"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.op_Explicit(System.IO.FileInfo)~SchwabenCode.QuickIO.QuickIOFileInfo">
            <summary>
            Explizit Cast
            </summary>
            <param name="fileInfo"><see cref="T:SchwabenCode.QuickIO.QuickIOFileInfo"/></param>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.ReadAllBytes(System.Int32)">
            <summary>
            Reads the contents of the file into a byte collection.
            </summary>
            <returns>A byte collection containing the contents.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.ReadAllLines">
            <summary>
            Reads all lines.
            </summary>
            <returns>A string collection containing all lines.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.ReadAllLines(System.Text.Encoding)">
            <summary>
            Reads all lines with the specified encoding
            </summary>
            <param name="encoding">The encoding applied to the contents. </param>
            <returns>A string collection containing all lines.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.ReadAllText">
            <summary>
            Reads all text.
            </summary>
            <returns>A string represents the content.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.ReadAllText(System.Text.Encoding)">
            <summary>
            Reads all text with the specified encoding.
            </summary>
            <param name="encoding">The encoding applied to the content. </param>
            <returns>A string represents the content.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllBytes(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes the specified byte array.
            </summary>
            <param name="bytes">The bytes to write. </param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllBytes(System.Byte[])">
            <summary>
            Writes the specified byte array.
            </summary>
            <param name="bytes">The bytes to write. </param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a collection of strings.
            Uses UTF-8 without Emitted UTF-8 identifier.
            </summary>
            <param name="contents">The lines write to.</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllLines(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Writes a collection of strings.
            </summary>
            <param name="contents">The lines write to.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllText(System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string.
            </summary>
            <param name="contents">The string to write to. </param>
            <param name="encoding">The encoding to apply to the string.</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileInfo.WriteAllText(System.String)">
            <summary>
            Writes the specified string.
            </summary>
            <param name="contents">The string to write to. </param>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileMetadata">
            <summary>
            File metadata information
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileMetadata.#ctor(System.String,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFileMetadata"/>
            </summary>
            <param name="uncResultPath">UNC Path of current file</param>
            <param name="win32FindData">Win32FindData of current file</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileMetadata.Bytes">
            <summary>
            Size of the file. 
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileMetadata.QuickIOFileInfo">
            <summary>
            Returns a new instance of <see cref="M:SchwabenCode.QuickIO.QuickIOFileMetadata.QuickIOFileInfo"/> of the current file
            </summary>
            <returns><see cref="M:SchwabenCode.QuickIO.QuickIOFileMetadata.QuickIOFileInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase">
            <summary>
            Provides properties and instance method for files and directories
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Initializes a new instance of the QuickIOAbstractBase class, which acts as a wrapper for a file path.
            </summary>
            <param name="pathInfo"><see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/></param>
            <param name="findData"><see cref="T:SchwabenCode.QuickIO.Win32.Win32FindData"/></param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.Exists">
            <summary>
            Returns true if exists
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.IsReadOnly">
            <summary>
            True if file is readonly. Cached.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.PathInfo">
            <summary>
            QuickIOPathInfo Container
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.SafeExists(System.Boolean,System.Boolean)">
            <summary>
            Returns true if exists and attends the FileSystemType
            </summary>
            <param name="throwExceptionIfFileSystemEntryTypeDiffers">Suppress error message if the path exists but the <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/> differs
            </param>
            <param name="exceptionValue">Default return value if <sparamref name="throwExceptionIfFileSystemEntryTypeDiffers"/> is true</param>
            <returns>True or <paramref name="exceptionValue"/> if <see cref="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException"/> thrown and <paramref name="throwExceptionIfFileSystemEntryTypeDiffers"/> is true</returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.Name">
            <summary>
            Name of file or directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.FullName">
            <summary>
            Full path of the directory or file.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.FullNameUnc">
            <summary>
            Full path of the directory or file (unc format)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.Parent">
            <summary>
            Fullname of Parent.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.GetFileSystemSecurity">
            <summary>
            Returns current <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity"/>
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity"/></returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.Root">
            <summary>
            Returns Root or null if current path is root
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.Attributes">
            <summary>
            Attributes (Cached Value)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.CreationTimeUtc">
            <summary>
            Gets the creation time (UTC)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.LastAccessTimeUtc">
            <summary>
            Gets the time (UTC) of last access. 
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.LastWriteTimeUtc">
            <summary>
            Gets the time (UTC) was last written to
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.CreationTime">
            <summary>
            Gets the creation time
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.LastAccessTime">
            <summary>
            Gets the time that the  file was last accessed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.LastWriteTime">
            <summary>
            Gets the time the file was last written to.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.ToString">
            <summary>
            Returns <see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.FullName"/>
            </summary>
            <returns><see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.FullName"/></returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.FindData">
            <summary>
            Win32ApiFindData bag
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.GetOwner">
            <summary>
            Determines the owner
            </summary>
            <returns><see cref="T:System.Security.Principal.NTAccount"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.GetOwnerIdentifier">
            <summary>
            Determines the owner
            </summary>
            <returns><see cref="T:System.Security.Principal.IdentityReference"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.SetOwner(System.Security.Principal.NTAccount)">
            <summary>
            Determines the owner
            </summary>
            <returns><see cref="T:System.Security.Principal.IdentityReference"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemEntryBase.SetOwner(System.Security.Principal.IdentityReference)">
            <summary>
            Sets the owner
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType">
            <summary>
            Represents type of path or handle
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileSystemEntryType.File">
            <summary>
            Represents a file (<see cref="!:FileAttributes"/> does not contain directory flag)
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOFileSystemEntryType.Directory">
            <summary>
            Represents a directory (<see cref="!:FileAttributes"/>contains directory flag)
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase">
            <summary>
            Abstract class for file system entries such as files and directory.
            Just for meta data reprentation
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.FullName">
            <summary>
            Path to file or directory (regular format)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.Name">
            <summary>
            Name of file or directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.FullNameUnc">
            <summary>
            Path to file or directory (unc format)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.CreationTimeUtc">
            <summary>
            Gets the creation time (UTC)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.CreationTime">
            <summary>
            Gets the creation time
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.LastAccessTimeUtc">
            <summary>
            Gets the time (UTC) of last access. 
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.LastAccessTime">
            <summary>
            Gets the time that the  file was last accessed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.LastWriteTimeUtc">
            <summary>
            Gets the time (UTC) was last written to
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.LastWriteTime">
            <summary>
            Gets the time the file was last written to.
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.Attributes">
            <summary>
            File Attributes
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemMetadataBase.ToPathInfo">
            <summary>
            Returns a new instance of <see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/> of the current path
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity">
            <summary>
            Provides methods for accessing the security information of files and folders, such as for example the getting and setting of the owner.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo)">
            <summary>
            Creates new instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity"/> for specified path.
            Current Windows Identtiy is used.
            </summary>
            <param name="pathInfo"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.#ctor(SchwabenCode.QuickIO.QuickIOPathInfo,System.Security.Principal.WindowsIdentity)">
            <summary>
            Supply the path to the file or directory and a user or group. 
            Access checks are done
            during instantiation to ensure we always have a valid object
            </summary>
            <param name="pathInfo"></param>
            <param name="principal"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.Refresh">
            <summary>
            Refreshes the Information
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.WindowsIdentity">
            <summary>
            Affected Windows IDentity
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.PathInfo">
            <summary>
            Affected path
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedAppendData">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedChangePermissions">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedCreateDirectories">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedCreateFiles">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedDelete">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedDeleteSubdirectoriesAndFiles">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedExecuteFile">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedFullControl">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedListDirectory">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedModify">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedRead">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedReadAndExecute">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedReadAttributes">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedReadData">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedReadExtendedAttributes">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedReadPermissions">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedSynchronize">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedTakeOwnership">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedTraverse">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedWrite">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedWriteAttributes">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedWriteData">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsDeniedWriteExtendedAttributes">
            <summary>
            Returns true if specified right level is denied
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedAppendData">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedChangePermissions">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedCreateDirectories">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedCreateFiles">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedDelete">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedDeleteSubdirectoriesAndFiles">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedExecuteFile">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedFullControl">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedListDirectory">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedModify">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedRead">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedReadAndExecute">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedReadAttributes">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedReadData">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedReadExtendedAttributes">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedReadPermissions">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedSynchronize">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedTakeOwnership">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedTraverse">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedWrite">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedWriteAttributes">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedWriteData">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.IsAllowedWriteExtendedAttributes">
            <summary>
            Returns true if specified right level is explizit allowed
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanAppendData">
            <summary>
            Ermittelt, ob etwas hinzugefügt werden kann (Dateien)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanChangePermissions">
            <summary>
            Ermittelt, ob die Rechte verändert werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanCreateDirectories">
            <summary>
            Ermittelt, ob neue Ordner hinzugefügt werden dürfen (Ordner)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanCreateFiles">
            <summary>
            Ermittelt, ob neue Dateien hinzugefügt werden dürfen (Ordner)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanDelete">
            <summary>
            Ermittelt, ob etwas gelöscht werden darf (Ordner)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanDeleteSubdirectoriesAndFiles">
            <summary>
            Ermittelt, ob darunterliegende Ordner und Dateien gelöscht werden dürfen (Ordner)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanExecuteFile">
            <summary>
            Ermittelt, ob eine Datei ausgeführt werden darf (Dateien)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanFullControl">
            <summary>
            Ermittelt, ob die vollständige Kontrolle gewährt ist
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanListDirectory">
            <summary>
            Ermittelt, ob die Ordner aufgelistet werden dürfen (Ordner)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanModify">
            <summary>
            Ermittelt, ob etwas verändert werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanRead">
            <summary>
            Ermittelt, ob etwas gelesen werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanReadAndExecute">
            <summary>
            Ermittelt, ob gelesen und ausgeführt werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanReadAttributes">
            <summary>
            Ermittelt, ob die Attribute gelesen werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanReadData">
            <summary>
            Ermittelt, ob Daten gelesen werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanReadExtendedAttributes">
            <summary>
            Ermittelt, ob die erweiterten Attribute gelesen werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanReadPermissions">
            <summary>
            Ermittelt, ob die Rechte gelesen werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanSynchronize">
            <summary>
            Ermittelt, ob synchronisiert werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanTakeOwnership">
            <summary>
            Ermittelt, ob der Besitzerstatus eingenommen werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanTraverse">
            <summary>
            Ermittelt, ob ???????
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanWrite">
            <summary>
            Ermittelt, ob geschrieben werden darf
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanWriteAttributes">
            <summary>
            Ermittelt, ob Attribute verändert werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanWriteData">
            <summary>
            Ermittelt, ob Daten geschrieben werden dürfen
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.CanWriteExtendedAttributes">
            <summary>
            Ermittelt, ob erweiterte Attribute geschrieben werden dürfen
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.ReadSecurityInformation">
            <summary>
            Reads the security information of <see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.FileSystemSecurityInformation"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.ReceivGroupIdentityRules(System.Security.AccessControl.AuthorizationRuleCollection)">
            <summary>
            Processes the authentication data of a Windows Group
            </summary>
            <param name="acl"><see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.HandleFileSystemAccessRule(System.Security.AccessControl.FileSystemAccessRule,System.Security.Principal.IdentityReference)">
            <summary>
            Processes the authentication data of a Windows identity
            </summary>
            <param name="rule">FileSystemAccessRule</param>
            <param name="identity"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.ReceiveUserIdentityRules(System.Security.AccessControl.AuthorizationRuleCollection)">
            <summary>
            Processes the authentication data of a Windows user
            </summary>
            <param name="acl"><see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.HandleAccessControlType(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Handles the access rights. Differentiates between allowed and denied rights
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.HandleAllowedAccessRule(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Processed the permitted rights
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.HandleDeniedAccessRule(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Processed the denied rights
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.Contains(System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Returs the if <paramref name="right"/> is in <sparamref name="rule"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.GetSecurityFromFileSystem">
            <summary>
            Get the File Information and set's the result to <see cref="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.FileSystemSecurityInformation"/> on success.
            Also set's owner and owner's domain
            </summary>
            <returns>true on success. Use native win32 exception to get further error information</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.ReceiveFileSystemSecurityInformation(System.IntPtr@)">
            <summary>
            Gets the security information of specified handle from file system
            </summary>
            <param name="sidHandle">Handle to get file security information</param>
            <returns><see cref="T:System.Security.AccessControl.CommonObjectSecurity"/>Result</returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFileSystemSecurity.FileSystemSecurityInformation">
            <summary>
            File System Security Information
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOFolderStatisticResult">
            <summary>
            Folder Statistics
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFolderStatisticResult.FolderCount">
            <summary>
            Folder Count
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFolderStatisticResult.FileCount">
            <summary>
            File Count
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOFolderStatisticResult.TotalBytes">
            <summary>
            Total TotalBytes
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOFolderStatisticResult.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates new Instance of <see cref="T:SchwabenCode.QuickIO.QuickIOFolderStatisticResult"/> - internal access only
            </summary>
            <param name="folderCount">Folder Count</param>
            <param name="fileCount">File Count</param>
            <param name="size"> Total TotalBytes</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOHashImplementationType">
            <summary>
            QuickIOHashImplementationType
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOHashImplementationType.SHA1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOHashImplementationType.SHA256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOHashImplementationType.SHA384">
            <summary>
            SHA384
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOHashImplementationType.SHA512">
            <summary>
            SHA512
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOHashImplementationType.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOHashResult">
            <summary>
            This class is used for hash calculations.
            Use <see>
                    <cref>Format</cref>
                </see>
                for human readable output.
            </summary>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha256Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOHashResult.HashBytes">
            <summary>
            The bytes that represents the calculation result
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOHashResult.#ctor(System.Byte[])">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.QuickIOHashResult"/>
            </summary>
            <param name="hashBytes"></param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOHashResult.Format">
            <summary>
            Formats the <see cref="P:SchwabenCode.QuickIO.QuickIOHashResult.HashBytes"/> as a hexadecimal string using UTF8 encoding.
            </summary>
            <returns>Formated string</returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha256Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOHashResult.Format(System.Text.Encoding)">
            <summary>
            Formats the <see cref="P:SchwabenCode.QuickIO.QuickIOHashResult.HashBytes"/> as a hexadecimal string using specified encoding.
            </summary>
            <param name="encoding">Encoding for formatting</param>
            <returns>Formated string</returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha256Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8 );
            </code>
            </example>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOHashResult.Format(System.Text.Encoding,System.String,System.Threading.CancellationToken)">
            <summary>
            Formats the <see cref="P:SchwabenCode.QuickIO.QuickIOHashResult.HashBytes"/> using specified encoding and format.
            </summary>
            <param name="encoding">Encoding for formatting</param>
            <param name="format">Pattern for formatting. Use x2 for hexadecimal output.</param>
            <param name="cancellationToken">Cancel token</param>
            <returns>Formated string</returns>
            <example>
            <code>
            // Show human readable hash
            QuickIOHashResult hashResult = QuickIOFile.CalculateSha256Hash( "C:\temp\image.bin" );
            Console.WriteLine("Hash: {0}", hashResult.Format( Encoding.UTF8, "x2" );
            </code>
            </example>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOPath">
            <summary>
            Performs operations for files or directories and path information. 
            </summary>
            <summary>
            Performs operations for files or directories and path information. 
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxRegularPathLength">
            <summary>
            Maximum allowed length of a regular path
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxPathElementLength">
            <summary>
            Max allowed path element name like folder names or file names
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxFolderNameLength">
            <summary>
            Max allowed length of folder name
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxFileNameLength">
            <summary>
            Max allowed length of file name
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxSimpleDirectoryPathLength">
            <summary>
            Maximum allowed length of a regular folder path
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.MaxUncPathLength">
            <summary>
            Maximum allowed length of an UNC Path
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.RegularLocalPathPrefix">
            <summary>
            Regular local path prefix
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.RegularSharePathPrefix">
            <summary>
            Path prefix for shares
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.RegularSharePathPrefixLength">
            <summary>
            Length of Path prefix for shares
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.UncLocalPathPrefix">
            <summary>
            UNC prefix for regular paths
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.UncSharePathPrefix">
            <summary>
            UNC prefix for shares
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.DirectorySeparatorChar">
            <summary>
            Directory Separator Char
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPath.WhiteSpace">
            <summary>
            WhiteSpace = ' '
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.InternalTrimTrailingSeparator(System.String)">
            <summary>
            Removes spaces end <see cref="F:SchwabenCode.QuickIO.QuickIOPath.DirectorySeparatorChar"/> at the end of a string
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.Combine(System.String[])">
            <summary>
            Combines given path elements
            </summary>
            <param name="pathElements">Path elements to combine</param>
            <returns>Combined Path</returns>
            <remarks>No validation</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetParentPath(System.String)">
            <summary>
            Returns the parent directory path
             </summary>
            <param name="path">Path to get the parent</param>
            <returns>Parent directory or null if parent is root</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.Clean(System.String)">
            <summary>
            Removes all spaces and trims backslahes at the end.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.Exists(System.String)">
            <summary>
            Checks if path exists
            </summary>
            <param name="path">Path to check</param>
            <returns>True on exists</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetRandomFileName">
            <summary>
            Returns <see cref="M:System.IO.Path.GetRandomFileName"/>
            </summary>
            <returns><see cref="M:System.IO.Path.GetRandomFileName"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetName(System.String)">
            <summary>
            Gets name of file or directory
            </summary>
            <param name="fullName">Path</param>
            <returns>Name of file or directory</returns>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">Path is invalid</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetFullPath(System.String)">
            <summary>
            A wrapper for <see cref="M:System.IO.Path.GetFullPath(System.String)"/>
            </summary>
            <remarks>Calls <see cref="M:System.IO.Path.GetFullPath(System.String)"/></remarks>
            <returns>a regular path</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetFullPathInfo(System.String)">
            <summary>
            A wrapper for <see cref="M:SchwabenCode.QuickIO.QuickIOPath.GetFullPath(System.String)"/> that returns <see cref="T:SchwabenCode.QuickIO.QuickIOPathInfo"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.GetPathRoot(System.String)">
            <summary>
            Full path, no relative path allowed
            </summary>
            <remarks>Same return behavior like <see cref="M:System.IO.Path.GetPathRoot(System.String)"/></remarks>
            <returns>Null if <paramref name="path" /> is null, empty string if <paramref name="path" /> does not contain any root information or is invalid.</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.TryGetLocalRootPath(System.String,System.String@)">
            <summary>
            Returns true if <paramref name="path" /> can be parsed and puts root information to <paramref name="root" />
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.TryGetLocalUncRootPath(System.String,System.String@)">
            <summary>
            Returns true if <paramref name="path" /> can be parsed and puts root information to <paramref name="root" />
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.TryGetShareRootPath(System.String,System.String@)">
            <summary>
            Returns true if <paramref name="path" /> can be parsed and puts root information to <paramref name="root" />
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.TryGetShareUncRootPath(System.String,System.String@)">
            <summary>
            Returns true if <paramref name="path" /> can be parsed and puts root information to <paramref name="root" />
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.TryGetServerAndShareNameFromLocation(System.String,SchwabenCode.QuickIO.QuickIOPathType,System.String@,System.String@)">
            <summary>
            Strips server and share from given path
            </summary>
            <remarks>Returns false if path is invalid for this operation</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRelative(System.String)">
            <summary>
            Checks if given path starts with a known root path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsPath(System.String)">
            <summary>
            Returns true if given path is <see cref="M:SchwabenCode.QuickIO.QuickIOPath.IsLocal(System.String)"/> or <see cref="M:SchwabenCode.QuickIO.QuickIOPath.IsShare(System.String)"/>
            </summary>
            <remarks>Will return true on C:\ but will return false on C:\folderName</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsLocal(System.String)">
            <summary>
            Checks if given path matches C:\ or X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsShare(System.String)">
            <summary>
            Checks if given path matches C:\ or X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsLocalRegular(System.String)">
            <summary>
            Checks if given path matches C:\ or X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsLocalUnc(System.String)">
            <summary>
            Checks if given path matches  \\?\C:\ or \\?\X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsShareRegular(System.String)">
            <summary>
            Checks if given path matches  \\s\s
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsUnc(System.String)">
            <summary>
            True if <param name="path" /> starts with <see cref="F:SchwabenCode.QuickIO.QuickIOPath.UncLocalPathPrefix"/> or <see cref="F:SchwabenCode.QuickIO.QuickIOPath.UncLocalPathPrefix"/>
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsShareUnc(System.String)">
            <summary>
            Checks if given path matches \\?\UNC\server\name
            </summary>
            <remarks>Min length: \\?\UNC\s\s</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.InternalStartsWithExpected(System.String,System.String)">
            <summary>
            Checks if given path starts with expected prefix and has min length
            </summary>
            <remarks>Internal = no validation</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRoot(System.String)">
            <summary>
            Returns true if given path is <see cref="M:SchwabenCode.QuickIO.QuickIOPath.IsRootLocal(System.String)"/> or <see cref="M:SchwabenCode.QuickIO.QuickIOPath.IsRootLocalRegular(System.String)"/>
            </summary>
            <remarks>Will return true on C:\ but will return false on C:\folderName</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootLocal(System.String)">
            <summary>
            Checks if given path is local root
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootShare(System.String)">
            <summary>
            Checks if given path is share root
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootLocalRegular(System.String)">
            <summary>
            Checks if given path matches C:\ or X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootLocalUnc(System.String)">
            <summary>
            Checks if given path matches  \\?\C:\ or \\?\X:\ ...
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootShareRegular(System.String)">
            <summary>
            Checks if given path matches \\server\name
            </summary>
            <remarks>Min length: \\s\s</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsRootShareUnc(System.String)">
            <summary>
            Checks if given path matches \\?\UNC\server\name
            </summary>
            <remarks>Min length: \\?\UNC\s\s</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidFolderName(System.String)">
            <summary>
            Checks if given name is a valid server name
            </summary>
            <remarks>Ignores Unix File Systems</remarks>
            <param name="path">Path to check</param>
            <exception cref="T:SchwabenCode.QuickIO.InvalidPathException">If invalid character found</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidFolderChar(System.Char)">
            <summary>
            returns true if char is invalid for a folder name
            </summary>
            <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx#naming_conventions</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ThrowArgumentNullExceptionIfNull(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if passed value is null
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidDriveLetter(System.Char)">
            <summary>
            Checks if given char is a valid windows drive letter
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidServerName(System.String)">
            <summary>
            Verifies server name
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidServerNameChar(System.Char)">
            <summary>
            returns true if char is valid for a server name
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidShareName(System.String)">
            <summary>
            Returns true if share name is valid
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.IsValidShareNameChar(System.Char)">
            <summary>
            Returns true if char is valid for a share name
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToPathRegular(System.String)">
            <summary>
            Converts unc path to regular path
            </summary>
            <exception cref="T:System.InvalidOperationException">If path is invalid or cannot be identified</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToPathUnc(System.String)">
            <summary>
            Converts regular path to unc path
            </summary>
            <exception cref="T:System.InvalidOperationException">If path is invalid or cannot be identified</exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.InternalFormatPathByType(SchwabenCode.QuickIO.QuickIOPathType,System.String)">
            <summary>
            Formats a path 
            </summary>
            <param name="pathFormatReturn">Target format type</param>
            <param name="uncPath">Path to format</param>
            <returns>Formatted path</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToLocalPathRegular(System.String)">
            <summary>
            Converts an unc path to a local regular path
            </summary>
            <param name="uncLocalPath">Unc Path</param>
            <example>\\?\C:\temp\file.txt >> C:\temp\file.txt</example>
            <returns>Local Regular Path</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToSharePathRegular(System.String)">
            <summary>
            Converts an unc path to a share regular path
            </summary>
            <param name="uncSharePath">Unc Path</param>
            <example>\\?\UNC\server\share >> \\server\share</example>
            <returns>QuickIOShareInfo Regular Path</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToLocalPathUnc(System.String)">
            <summary>
            Converts a regular local path to an unc path
            </summary>
            <param name="regularLocalPath">Regular Path</param>
            <example>C:\temp\file.txt >> \\?\C:\temp\file.txt</example>
            <returns>Local Unc Path</returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPath.ToSharePathUnc(System.String)">
            <summary>
            Converts a regular share path to an unc path
            </summary>
            <param name="regularSharePath">Regular Path</param>
            <example>\\server\share\file.txt >> \\?\UNC\server\share\file.txt</example>
            <returns>QuickIOShareInfo Unc Path</returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOPathInfo">
            <summary>
            Provides properties and instance method for paths
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.#ctor(System.String)">
            <summary>
            Creates the path information container
            </summary>
            <param name="fullpath">Full path to the file or directory (regular or unc)</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.#ctor(System.String,SchwabenCode.QuickIO.Win32.Win32FindData)">
            <summary>
            Creates the path information container
            </summary>
            <param name="fullpath">Full path to the file or directory (regular or unc)</param>
            <param name="win32FindData">Win32 handle information</param>
            <param name="pathType">The pathtype</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.FullName">
            <summary>
            Path to file or directory (regular format)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.FullNameUnc">
            <summary>
            Path to file or directory (unc format)
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.Name">
            <summary>
            Name of file or directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.Parent">
            <summary>
            Parent Directory
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.FindData">
            <summary>
            FindData
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.Attributes">
            <summary>
            Attributes. Cached.
            </summary>
            <exception cref="T:System.NotSupportedException">if path is root</exception>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.IsRoot">
            <summary>
            Returns true if current path is root
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.Root">
            <summary>
            Returns Root or null if current path is root
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.Exists">
            <summary>
            Returns true if path exists. Checks <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOPathInfo.SystemEntryType">
            <summary>
            Returns true if path exists. Checks <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemEntryType"/> against the file system
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.GetFileSystemSecurity">
            <summary>
            Returns current <see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity"/>
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIOFileSystemSecurity"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.GetOwner">
            <summary>
            Determines the owner
            </summary>
            <returns><see cref="T:System.Security.Principal.NTAccount"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.GetOwnerIdentifier">
            <summary>
            Determines the owner
            </summary>
            <returns><see cref="T:System.Security.Principal.IdentityReference"/></returns>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.SetOwner(System.Security.Principal.NTAccount)">
            <summary>
            Sets the owner
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPathInfo.SetOwner(System.Security.Principal.IdentityReference)">
            <summary>
            Sets the owner
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOPathLocation">
            <summary>
            Path Location (Local, QuickIOShareInfo)
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/aa365247(VS.85).aspx</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPathLocation.Local">
            <summary>
            Represents Local Path
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPathLocation.Share">
            <summary>
            Represents Network QuickIOShareInfo
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOPathType">
            <summary>
            Path Types (Regular or UNC )
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/aa365247(VS.85).aspx</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPathType.Regular">
            <summary>
            Regular
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPathType.UNC">
            <summary>
            UNC
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOPatterns">
            <summary>
            Pattern Collection
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.PathMatchAll">
            <summary>
            Matches all. No filtering.
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.IPv6Pattern">
            <summary>
            Pattern to match IPv6
            </summary>
            <remarks>([\da-fA-F]{1,4}(\:[\da-fA-F]{1,4}){7})|(([\da-fA-F]{1,4}:){0,5}::([\da-fA-F]{1,4}:){0,5}[\da-fA-F]{1,4})</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.IPv4Pattern">
            <summary>
            Pattern to match IPv4
            </summary>
            <remarks>(((([1]?\d)?\d|2[0-4]\d|25[0-5])\.){3}(([1]?\d)?\d|2[0-4]\d|25[0-5]))</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.IPv4v6Pattern">
            <summary>
            Pattern to match IPv4 and IPv6
            </summary>
            <remarks>([\da-fA-F]{1,4}(\:[\da-fA-F]{1,4}){7})|(([\da-fA-F]{1,4}:){0,5}::([\da-fA-F]{1,4}:){0,5}[\da-fA-F]{1,4})|(((([1]?\d)?\d|2[0-4]\d|25[0-5])\.){3}(([1]?\d)?\d|2[0-4]\d|25[0-5]))</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.ServerNamePattern">
            <summary>
            Matching Server Name
            </summary>
            <remarks>[a-zA-Z0-9_]+</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.ShareNamePattern">
            <summary>
            Matching QuickIOShareInfo Name
            </summary>
            <remarks>[a-zA-Z0-9_]+</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.FolderNamePattern">
            <summary>
            Matching Folder Name
            </summary>
            <remarks>[a-zA-Z0-9_]+</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.OptionalSperatorPattern">
            <summary>
            Optional UNC Separator
            </summary>
            <remarks>\\{0,1}</remarks>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.RegularShareRootPattern">
            <summary>
            Pattern matching share root
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOPatterns.RegularSharePattern">
            <summary>
            Pattern matching share path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOPatterns.GetStrict(System.String)">
            <summary>
            Returns ^<paramref name="pattern"/>$
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIORecommendedValues">
            <summary>
            Various default and recommended values for different operations, connections and API calls
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIORecommendedValues.DefaultReadBufferBytes">
            <summary>
            Recommended buffer byte size for default read operations
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIORecommendedValues.TCPMaxPackageBytes">
            <summary>
            Recommended size of Byte packages for TCP connections
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIORecommendedValues.MTUMaxPackageBytes">
            <summary>
            Recommended size of Byte packages for local ethernet connections
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIORecommendedValues.SMBMaxPackageBytes">
            <summary>
            Recommended size of Byte packages for SMB connections
            </summary>
            <remarks>See http://support.microsoft.com/kb/223140</remarks>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOShare">
            <summary>
            Provides static methods to access network shares.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShare.GetDiskInformation(System.String)">
            <summary>
            Receives <see cref="T:SchwabenCode.QuickIO.QuickIODiskInformation"/> of specifies share path
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODiskInformation"/></returns>
            <remarks>See http://support.microsoft.com/kb/231497</remarks>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShare.EnumerateShares(System.String,SchwabenCode.QuickIO.QuickIOShareApiReadLevel)">
            <summary>
            Enumerate shares of specific machine. If no machine is specified, local machine is used
            </summary>
            <returns>Collection of <see cref="T:SchwabenCode.QuickIO.QuickIOShareInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOShareApiReadLevel">
            <summary>
            Read level indicator for share access
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareApiReadLevel.Admin">
            <summary>
            Requests all information and required admin privilegs
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareApiReadLevel.Normal">
            <summary>
            Default call type
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOShareInfo">
            <summary>
            Information about a local share
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShareInfo.#ctor(System.String,System.String,SchwabenCode.QuickIO.QuickIOShareType,System.String)">
            <summary>
            Called by enumeration
            </summary>
            <param name="server">Servername</param>
            <param name="shareName">Name of Share</param>
            <param name="shareType">Type of share</param>
            <param name="remark">Comment or smth</param>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOShareInfo.Server">
            <summary>
            The name of the computer that this share belongs to
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOShareInfo.ShareName">
            <summary>
            QuickIOShareInfo name
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOShareInfo.ShareType">
            <summary>
            QuickIOShareInfo type
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOShareInfo.Remark">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOShareInfo.IsFileSystem">
            <summary>
            Returns true if this is a file system share
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShareInfo.ToString">
            <summary>
            Returns the path to this share
            </summary>
            <returns></returns>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareInfo._fullName">
            <summary>
            Returns the path in regular format (\\server\share\)
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShareInfo.GetDiskInformation">
            <summary>
            Returns <see cref="T:SchwabenCode.QuickIO.QuickIODiskInformation"/> of this instance.
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODiskInformation"/></returns>
            <remarks>Only supported for <see cref="F:SchwabenCode.QuickIO.QuickIOShareType.Disk"/></remarks>
            <exception cref="T:SchwabenCode.QuickIO.UnsupportedShareTypeException">Metadata not supported for this Sharetype. Only available for <see cref="F:SchwabenCode.QuickIO.QuickIOShareType.Disk"/></exception>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOShareInfo.AsDirectoryInfo">
            <summary>
            Returns a <see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/> of the current path of this file
            </summary>
            <returns><see cref="T:SchwabenCode.QuickIO.QuickIODirectoryInfo"/></returns>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOShareType">
            <summary>
            Enum collection of available shares types
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareType.Disk">
            <summary>
            Disk or network share share
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareType.Printer">
            <summary>
            Printer share
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareType.Device">
            <summary>
            Device share
            </summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareType.IPC">
            <summary>
            IPC share</summary>
        </member>
        <member name="F:SchwabenCode.QuickIO.QuickIOShareType.Special">
            <summary>
            Special share
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.DirectoryAlreadyExistsException">
            <summary>
            This error is raised if you want to create for example a folder which already exists.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.DirectoryAlreadyExistsException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.DirectoryAlreadyExistsException"/>
            </summary>
            <param name="message">Error message</param>
            <param name="path">Affected directory path</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.DirectoryNotEmptyException">
            <summary>
            This error is raised if a folder that is not empty should be deleted.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.DirectoryNotEmptyException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.DirectoryNotEmptyException"/>
            </summary>
            <param name="message">Error message</param>
            <param name="path">Affected directory path</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.FileAlreadyExistsException">
            <summary>
            This error is raised if a file should be created that already exists.
            </summary>   
        </member>
        <member name="M:SchwabenCode.QuickIO.FileAlreadyExistsException.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.FileAlreadyExistsException"/>
            </summary>
            <param name="path">Affected file path</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.FileAlreadyExistsException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.FileAlreadyExistsException"/>
            </summary>
            <param name="message">Error message</param>
            <param name="path">Affected file path</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.FileSystemIsBusyException">
            <summary>
            This error is raised if file system is busy and further operations are not able to execute
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.FileSystemIsBusyException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.FileSystemIsBusyException"/>
            </summary>
            <param name="message">Error message</param>
            <param name="path">Affected directory path</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.InvalidPathException">
            <summary>
            Invalid Path Exception
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.InvalidPathException.#ctor(System.String)">
            <summary>
            Invalid Path Exception
            </summary>
            <param name="path">Invalid Path</param>
        </member>
        <member name="M:SchwabenCode.QuickIO.InvalidPathException.#ctor(System.String,System.String)">
            <summary>
            Invalid Path Exception
            </summary>
            <param name="message">Error Message</param>
            <param name="path">Invalid Path</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.PathAlreadyExistsException">
            <summary>
            Exception if path does not exist.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PathAlreadyExistsException.#ctor(System.String,System.String)">
            <summary>
            Exception if path does not exist.
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.PathNotFoundException">
            <summary>
            Exception if path does not exist.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PathNotFoundException.#ctor(System.String)">
            <summary>
            Exception if path does not exist.
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.PathNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Exception if path does not exist.
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOBaseException">
            <summary>
            Abstract base class for exceptions
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.QuickIOBaseException.Path">
            <summary>
            Affected Path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOBaseException.#ctor(System.String,System.String)">
            <summary>
            Abstract base class for exceptions
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOBaseException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Abstract base class for exceptions
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.QuickIOTransferAlreadyRunningException">
            <summary>
            Exception of already running transfer activity
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.QuickIOTransferAlreadyRunningException.#ctor(System.String)">
            <summary>
            Creates a new exception of <see cref="T:SchwabenCode.QuickIO.QuickIOTransferAlreadyRunningException"/>
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException">
            <summary>
            Exception if path returns another type as excepted
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException.Estimated">
            <summary>
            Estimated Type
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException.Found">
            <summary>
            Type found
            </summary>
        </member>
        <member name="P:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException.FullName">
            <summary>
            Affected full path
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.UnmatchedFileSystemEntryTypeException.#ctor(SchwabenCode.QuickIO.QuickIOFileSystemEntryType,SchwabenCode.QuickIO.QuickIOFileSystemEntryType,System.String)">
            <summary>
            Exception if path returns another type as excepted
            </summary>
        </member>
        <member name="T:SchwabenCode.QuickIO.UnsupportedDriveTypeException">
            <summary>
            Represents an exception for unsuuported drive types
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.UnsupportedDriveTypeException.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.UnsupportedDriveTypeException"/>
            </summary>
            <param name="path">Unsupported drive</param>
        </member>
        <member name="T:SchwabenCode.QuickIO.UnsupportedShareTypeException">
            <summary>
            Represents an exception for unsuuported drive types
            </summary>
        </member>
        <member name="M:SchwabenCode.QuickIO.UnsupportedShareTypeException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:SchwabenCode.QuickIO.UnsupportedShareTypeException"/>
            </summary>
            <param name="path">Unsupported drive</param>
            <param name="message">Error</param>
        </member>
    </members>
</doc>
